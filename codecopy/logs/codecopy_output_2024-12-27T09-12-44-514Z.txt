Summary:
 - Directory: /Users/gokulcholaghar/Vercel/legalwiz
 - Files processed: 54
 - Total lines: 5044
 - Duration: 0.03 seconds
================================================================================
Directory Structure:

├── public/
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   ├── chat/
│   │   │   │   └── route.js
│   │   │   ├── generate-agreement/
│   │   │   │   └── route.js
│   │   │   ├── improve-formatting/
│   │   │   │   └── route.js
│   │   │   ├── improve-text/
│   │   │   │   └── route.js
│   │   │   └── places/
│   │   │       └── autocomplete/
│   │   │           └── route.js
│   │   ├── auth/
│   │   │   └── callback/
│   │   │       └── route.js
│   │   ├── components/
│   │   │   ├── BusinessDetailsStep.js
│   │   │   ├── EntityDetailsStep.js
│   │   │   ├── OrganizationTypeStep.js
│   │   │   └── SignupStep.js
│   │   ├── dashboard/
│   │   │   └── page.js
│   │   ├── editor/
│   │   │   ├── [templateId]/
│   │   │   │   └── page.js
│   │   │   └── document/
│   │   │       └── [documentId]/
│   │   │           └── page.js
│   │   ├── fonts/
│   │   ├── register/
│   │   │   └── page.js
│   │   ├── sign-in/
│   │   │   └── page.js
│   │   ├── verify-email/
│   │   │   └── page.js
│   │   ├── globals.css
│   │   ├── layout.js
│   │   └── page.js
│   ├── components/
│   │   ├── ui/
│   │   │   ├── alert.jsx
│   │   │   ├── button.jsx
│   │   │   ├── card.jsx
│   │   │   ├── command.jsx
│   │   │   ├── dialog.jsx
│   │   │   ├── dialog.tsx
│   │   │   ├── input.jsx
│   │   │   ├── label.jsx
│   │   │   ├── popover.jsx
│   │   │   ├── radio-group.jsx
│   │   │   ├── scroll-area.jsx
│   │   │   ├── select.jsx
│   │   │   ├── sheet.jsx
│   │   │   ├── table.jsx
│   │   │   └── textarea.jsx
│   │   ├── ChangePreview.js
│   │   ├── Editor.js
│   │   ├── JurisdictionSearch.jsx
│   │   ├── LoadingModal.js
│   │   ├── MenuBar.js
│   │   ├── NewAgreementForm.jsx
│   │   ├── Sidebar.js
│   │   └── SuggestionPopup.js
│   ├── lib/
│   │   ├── extensions/
│   │   │   └── placeholder.js
│   │   ├── supabase.js
│   │   └── utils.js
│   ├── styles/
│   │   └── editor.css
│   └── middleware.js
├── .eslintrc.json
├── README.md
├── components.json
├── db-schema.txt
├── jsconfig.json
├── package.json
└── tailwind.config.js

Files extracted:
.eslintrc.json (starts at line 1)
README.md (starts at line 5)
components.json (starts at line 43)
db-schema.txt (starts at line 60)
jsconfig.json (starts at line 571)
package.json (starts at line 579)
tailwind.config.js (starts at line 642)
src/middleware.js (starts at line 720)
src/app/globals.css (starts at line 744)
src/app/layout.js (starts at line 865)
src/app/page.js (starts at line 898)
src/app/api/chat/route.js (starts at line 1000)
src/app/api/generate-agreement/route.js (starts at line 1035)
src/app/api/improve-formatting/route.js (starts at line 1166)
src/app/api/improve-text/route.js (starts at line 1205)
src/app/api/places/autocomplete/route.js (starts at line 1254)
src/app/auth/callback/route.js (starts at line 1272)
src/app/components/BusinessDetailsStep.js (starts at line 1289)
src/app/components/EntityDetailsStep.js (starts at line 1404)
src/app/components/OrganizationTypeStep.js (starts at line 1652)
src/app/components/SignupStep.js (starts at line 1732)
src/app/dashboard/page.js (starts at line 1848)
src/app/editor/[templateId]/page.js (starts at line 2280)
src/app/editor/document/[documentId]/page.js (starts at line 2383)
src/app/register/page.js (starts at line 2591)
src/app/sign-in/page.js (starts at line 2700)
src/app/verify-email/page.js (starts at line 2819)
src/components/ChangePreview.js (starts at line 2982)
src/components/Editor.js (starts at line 3062)
src/components/JurisdictionSearch.jsx (starts at line 3418)
src/components/LoadingModal.js (starts at line 3508)
src/components/MenuBar.js (starts at line 3560)
src/components/NewAgreementForm.jsx (starts at line 3657)
src/components/Sidebar.js (starts at line 3784)
src/components/SuggestionPopup.js (starts at line 3843)
src/components/ui/alert.jsx (starts at line 3914)
src/components/ui/button.jsx (starts at line 3962)
src/components/ui/card.jsx (starts at line 4010)
src/components/ui/command.jsx (starts at line 4061)
src/components/ui/dialog.jsx (starts at line 4179)
src/components/ui/dialog.tsx (starts at line 4276)
src/components/ui/input.jsx (starts at line 4399)
src/components/ui/label.jsx (starts at line 4419)
src/components/ui/popover.jsx (starts at line 4438)
src/components/ui/radio-group.jsx (starts at line 4466)
src/components/ui/scroll-area.jsx (starts at line 4498)
src/components/ui/select.jsx (starts at line 4539)
src/components/ui/sheet.jsx (starts at line 4662)
src/components/ui/table.jsx (starts at line 4772)
src/components/ui/textarea.jsx (starts at line 4856)
src/lib/supabase.js (starts at line 4875)
src/lib/utils.js (starts at line 4882)
src/lib/extensions/placeholder.js (starts at line 4889)
src/styles/editor.css (starts at line 4932)

================================================================================

File: .eslintrc.json (starts at line 1)

{
  "extends": "next/core-web-vitals"
}



================================================================================

File: README.md (starts at line 5)

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
# docwiz



================================================================================

File: components.json (starts at line 43)

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}


================================================================================

File: db-schema.txt (starts at line 60)

//db schema for claude's reference

[
  {
    "table_name": "registrations",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "registrations",
    "foreign_column_name": "id"
  },
  {
    "table_name": "registrations",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "registrations",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "registrations",
    "column_name": "organization_type",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "domain",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 255,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "description",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "industry",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "entity_name",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 255,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "registration_type",
    "ordinal_position": 8,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "jurisdiction",
    "ordinal_position": 9,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "country_code",
    "ordinal_position": 10,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 10,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "country_name",
    "ordinal_position": 11,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "state_code",
    "ordinal_position": 12,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 10,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "state_name",
    "ordinal_position": 13,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "city_name",
    "ordinal_position": 14,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "authorized_signatory",
    "ordinal_position": 15,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "signatory_email",
    "ordinal_position": 16,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 255,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "created_at",
    "ordinal_position": 17,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "updated_at",
    "ordinal_position": 18,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "status",
    "ordinal_position": 19,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "templates",
    "foreign_column_name": "id"
  },
  {
    "table_name": "templates",
    "column_name": "created_at",
    "ordinal_position": 2,
    "is_nullable": "NO",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "template_name",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "content",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "ideal_for",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "description",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "is_ai_generated",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "user_id",
    "ordinal_position": 8,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "user_documents",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "template_id",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "templates",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "content",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "title",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "created_at",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "updated_at",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "registration_id",
    "ordinal_position": 8,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "registrations",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "status",
    "ordinal_position": 9,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "jurisdiction",
    "ordinal_position": 10,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "placeholder_values",
    "ordinal_position": 11,
    "is_nullable": "YES",
    "data_type": "jsonb",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  }
]


================================================================================

File: jsconfig.json (starts at line 571)

{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}



================================================================================

File: package.json (starts at line 579)

{
  "name": "docwiz",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.47.2",
    "@tiptap/extension-code-block-lowlight": "^2.10.3",
    "@tiptap/extension-link": "^2.10.3",
    "@tiptap/extension-placeholder": "^2.10.3",
    "@tiptap/extension-typography": "^2.10.3",
    "@tiptap/react": "^2.10.3",
    "@tiptap/starter-kit": "^2.10.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "country-state-city": "^3.2.1",
    "date-fns": "^4.1.0",
    "highlight.js": "^11.10.0",
    "lowlight": "^3.2.0",
    "lucide-react": "^0.468.0",
    "next": "15.0.4",
    "openai": "^4.76.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.0",
    "react-hot-toast": "^2.4.1",
    "react-markdown": "^9.0.1",
    "rehype-parse": "^9.0.1",
    "rehype-remark": "^10.0.0",
    "rehype-stringify": "^10.0.1",
    "remark-parse": "^11.0.0",
    "remark-rehype": "^11.1.1",
    "remark-stringify": "^11.0.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "tiptap-markdown": "^0.8.10",
    "unified": "^11.0.5",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "eslint": "^8",
    "eslint-config-next": "15.0.4",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}



================================================================================

File: tailwind.config.js (starts at line 642)

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,jsx}",
    "./components/**/*.{js,jsx}",
    "./app/**/*.{js,jsx}",
    "./src/**/*.{js,jsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("@tailwindcss/typography"), require("tailwindcss-animate")],
};



================================================================================

File: src/middleware.js (starts at line 720)

import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";

export async function middleware(req) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  const {
    data: { session },
  } = await supabase.auth.getSession();

  // If there's no session and the user is trying to access the dashboard
  if (!session && req.nextUrl.pathname.startsWith("/dashboard")) {
    const redirectUrl = new URL("/login", req.url);
    return NextResponse.redirect(redirectUrl);
  }

  return res;
}

export const config = {
  matcher: ["/dashboard/:path*", "/verify-email", "/auth/callback"],
};



================================================================================

File: src/app/globals.css (starts at line 744)

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.ProseMirror p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

.ProseMirror {
  > * + * {
    margin-top: 0.75em;
  }
}

/* Add syntax highlighting styles */
pre {
  background: #0d1117;
  padding: 1rem;
  border-radius: 0.5rem;
}

code {
  color: #c9d1d9;
}

.hljs-comment,
.hljs-quote {
  color: #8b949e;
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag {
  color: #ff7b72;
}

.hljs-string,
.hljs-attr {
  color: #a5d6ff;
}

.hljs-number,
.hljs-literal {
  color: #79c0ff;
}

.hljs-title,
.hljs-class,
.hljs-type {
  color: #d2a8ff;
}


================================================================================

File: src/app/layout.js (starts at line 865)

import localFont from "next/font/local";
import "./globals.css";
import { Toaster } from "sonner";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
        <Toaster />
      </body>
    </html>
  );
}



================================================================================

File: src/app/page.js (starts at line 898)

import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
              src/app/page.js
            </code>
            .
          </li>
          <li>Save and see your changes instantly.</li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}



================================================================================

File: src/app/api/chat/route.js (starts at line 1000)

import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req) {
  try {
    const { messages, documentContent } = await req.json();

    const systemMessage = {
      role: "system",
      content: `You are a helpful assistant analyzing a document. Here's the document content: ${documentContent}
      
      Help the user understand the document, answer questions about it, and suggest improvements when asked.
      If the user asks for changes, explain how the document could be modified to incorporate their suggestions.`,
    };

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [systemMessage, ...messages],
      temperature: 0.7,
    });

    return NextResponse.json({ message: response.choices[0].message.content });
  } catch (error) {
    console.error("Chat API error:", error);
    return NextResponse.json(
      { error: "Failed to process chat request" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/generate-agreement/route.js (starts at line 1035)

import OpenAI from "openai";
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize Supabase with service role key
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    db: {
      schema: "public",
    },
  }
);

export async function POST(req) {
  try {
    const { prompt, userId, jurisdiction } = await req.json();

    if (!userId || !jurisdiction) {
      return NextResponse.json(
        { error: "User ID and jurisdiction are required" },
        { status: 400 }
      );
    }

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `You are a legal document generator. You must respond with valid JSON only. Your response must contain two primary objects:
          
        1. **Document Details**:
           - "title" (string): A concise name for the document.
           - "description" (string): A brief explanation of the document's purpose.
           - "content" (string): The main body of the document written in Markdown format. Include placeholders for dynamic fields in the format "{{PLACEHOLDER_NAME}}" where appropriate.
        
        2. **Placeholders**:
           - A list of all placeholders used in the "content" field. Each placeholder must be represented as an object with:
              - "name" (string): The exact name of the placeholder (e.g., "PLACEHOLDER_NAME").
              - "description" (string): A brief description of the purpose or meaning of the placeholder.
        
        Ensure the JSON is strictly valid, and the document content is detailed, professional, and formatted in Markdown.`,
        },
        {
          role: "user",
          content: `Generate a legal agreement for the following jurisdiction: ${jurisdiction}. Request: ${prompt}`,
        },
      ],
      temperature: 0.3,
    });

    const response = completion.choices[0].message.content;
    let parsedResponse;

    try {
      const cleanedResponse = response.trim().replace(/[\n\r]/g, " ");
      parsedResponse = JSON.parse(cleanedResponse);

      // Validate and restructure the response
      const documentDetails = parsedResponse["Document Details"];
      const placeholders = parsedResponse["Placeholders"];

      if (!documentDetails || !placeholders) {
        throw new Error("Missing Document Details or Placeholders");
      }

      // Initialize placeholder values with empty values
      const placeholderValues = placeholders.map((placeholder) => ({
        ...placeholder,
        value: "",
      }));

      // Insert the new document
      const { data: document, error } = await supabase
        .from("user_documents")
        .insert([
          {
            user_id: userId,
            title: documentDetails.title,
            content: documentDetails.content,
            placeholder_values: placeholderValues,
            status: "draft",
          },
        ])
        .select()
        .single();

      if (error) {
        console.error("Database error:", error);
        return NextResponse.json(
          {
            error: "Failed to save document",
            details: error.message,
          },
          { status: 500 }
        );
      }

      return NextResponse.json({
        id: document.id,
        title: documentDetails.title,
        description: documentDetails.description,
        content: documentDetails.content,
        placeholder_values: placeholderValues,
      });
    } catch (error) {
      console.error("JSON parsing error:", error, "Raw response:", response);
      return NextResponse.json(
        { error: "Invalid response format from AI" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json(
      {
        error: "Failed to generate agreement",
        details: error.message,
      },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/improve-formatting/route.js (starts at line 1166)

import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request) {
  try {
    const { content } = await request.json();

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content:
            "You are a markdown formatting expert. Your task is to improve the formatting of the provided markdown content without changing any of the actual content. Focus on proper heading hierarchy, consistent spacing, and professional markdown structure. Don't add any new content or formal message to acknowledge the request, just improve the formatting.",
        },
        {
          role: "user",
          content: content,
        },
      ],
      temperature: 0.3,
    });

    const formattedContent = response.choices[0].message.content;

    return NextResponse.json({ formattedContent });
  } catch (error) {
    console.error("Error in improve-formatting:", error);
    return NextResponse.json(
      { error: "Failed to improve formatting" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/improve-text/route.js (starts at line 1205)

import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req) {
  try {
    const { selectedText, fullDocument, prompt } = await req.json();

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content:
            "You are an expert in improving legal documents while maintaining their legal validity and professional tone.",
        },
        {
          role: "user",
          content: `I have a legal document with the following selected section:

---
${selectedText}
---

Full document context:
${fullDocument}

Please improve this section based on this request: ${prompt}

Return only the improved section, maintaining proper formatting and ensuring it fits seamlessly into the document. Dont mention anything other than the text you are improving. Return the text in MD format.`,
        },
      ],
    });

    return NextResponse.json({
      improvedText: completion.choices[0].message.content.trim(),
    });
  } catch (error) {
    console.error("Error improving text:", error);
    return NextResponse.json(
      { error: "Failed to improve text" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/places/autocomplete/route.js (starts at line 1254)

import { NextResponse } from "next/server";

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const input = searchParams.get("input");

  try {
    const response = await fetch(
      `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${input}&types=(cities)&key=${process.env.GOOGLE_MAPS_API_KEY}`
    );

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}



================================================================================

File: src/app/auth/callback/route.js (starts at line 1272)

import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

export async function GET(request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");

  if (code) {
    const supabase = createRouteHandlerClient({ cookies });
    await supabase.auth.exchangeCodeForSession(code);
  }

  // URL to redirect to after sign in process completes
  return NextResponse.redirect(new URL("/verify-email", request.url));
}



================================================================================

File: src/app/components/BusinessDetailsStep.js (starts at line 1289)

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

const industries = [
  "Technology",
  "Finance",
  "Healthcare",
  "Education",
  "Retail",
  "Other",
];

export default function BusinessDetailsStep({ onNext, registrationId }) {
  const supabase = createClientComponentClient();
  const [domain, setDomain] = useState("");
  const [description, setDescription] = useState("");
  const [industry, setIndustry] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Updating registration:", registrationId, {
        domain,
        description,
        industry,
      });

      if (!registrationId) {
        throw new Error("Registration ID is missing");
      }

      const { error } = await supabase
        .from("registrations")
        .update({
          domain,
          description,
          industry,
          updated_at: new Date().toISOString(),
        })
        .eq("id", registrationId);

      if (error) throw error;
      onNext({ domain, description, industry });
    } catch (error) {
      console.error("Failed to update business details:", error);
      // You might want to add error handling UI here
    }
  };

  const fetchData = () => {
    setDescription(
      "This is a pre-filled business description based on the fetched data."
    );
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="domain">Business Domain</Label>
        <div className="flex space-x-2">
          <Input
            id="domain"
            placeholder="Enter business domain"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
            required
          />
          <Button type="button" onClick={fetchData}>
            Fetch Data
          </Button>
        </div>
      </div>
      <div className="space-y-2">
        <Label htmlFor="description">Business Description</Label>
        <Textarea
          id="description"
          placeholder="Enter business description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="industry">Industry</Label>
        <Select onValueChange={setIndustry} required>
          <SelectTrigger>
            <SelectValue placeholder="Select industry" />
          </SelectTrigger>
          <SelectContent>
            {industries.map((ind) => (
              <SelectItem key={ind} value={ind}>
                {ind}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Button type="submit" className="w-full">
        Next
      </Button>
    </form>
  );
}



================================================================================

File: src/app/components/EntityDetailsStep.js (starts at line 1404)

import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Info } from "lucide-react";
import { Country, State, City } from "country-state-city";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";

const registrationTypes = [
  "LLC",
  "Sole Proprietor",
  "Corporation",
  "Partnership",
  "Other",
];

export default function EntityDetailsStep({ onNext, registrationId }) {
  const supabase = createClientComponentClient();
  const router = useRouter();
  const [entityName, setEntityName] = useState("");
  const [registrationType, setRegistrationType] = useState("");
  const [country, setCountry] = useState("");
  const [state, setState] = useState("");
  const [city, setCity] = useState("");
  const [countries, setCountries] = useState([]);
  const [states, setStates] = useState([]);
  const [cities, setCities] = useState([]);
  const [authorizedSignatory, setAuthorizedSignatory] = useState("me");
  const [signatoryEmail, setSignatoryEmail] = useState("");

  useEffect(() => {
    setCountries(Country.getAllCountries());
  }, []);

  useEffect(() => {
    if (country) {
      setStates(State.getStatesOfCountry(country.isoCode));
      setState("");
      setCity("");
    }
  }, [country]);

  useEffect(() => {
    if (state) {
      setCities(City.getCitiesOfState(country.isoCode, state.isoCode));
      setCity("");
    }
  }, [state, country]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const { error } = await supabase
        .from("registrations")
        .update({
          entity_name: entityName,
          registration_type: registrationType,
          country_code: country.isoCode,
          country_name: country.name,
          state_code: state?.isoCode || null,
          state_name: state?.name || null,
          city_name: city?.name || null,
          authorized_signatory: authorizedSignatory,
          signatory_email:
            authorizedSignatory === "someone_else" ? signatoryEmail : null,
          updated_at: new Date().toISOString(),
        })
        .eq("id", registrationId);

      if (error) throw error;

      // Check email verification status
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user?.email_confirmed_at) {
        // If email is not verified, redirect to verify email page
        router.push("/verify-email");
      } else {
        // If email is verified, proceed to dashboard
        router.push("/dashboard");
      }

      onNext({
        entityName,
        registrationType,
        jurisdiction: {
          country: country.name,
          state: state?.name || "",
          city: city?.name || "",
        },
        authorizedSignatory,
        signatoryEmail,
      });

    } catch (error) {
      console.error("Error updating registration:", error);
      toast.error("Failed to update registration details");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="entityName">Entity Name</Label>
        <Input
          id="entityName"
          placeholder="Enter entity name"
          value={entityName}
          onChange={(e) => setEntityName(e.target.value)}
          required
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="registrationType">Registration Type</Label>
        <Select onValueChange={setRegistrationType} required>
          <SelectTrigger>
            <SelectValue placeholder="Select registration type" />
          </SelectTrigger>
          <SelectContent>
            {registrationTypes.map((type) => (
              <SelectItem key={type} value={type}>
                {type}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div className="space-y-2">
        <Label htmlFor="country">Country</Label>
        <Select
          onValueChange={(value) =>
            setCountry(countries.find((c) => c.isoCode === value))
          }
          required
        >
          <SelectTrigger>
            <SelectValue placeholder="Select country" />
          </SelectTrigger>
          <SelectContent>
            {countries.map((country) => (
              <SelectItem key={country.isoCode} value={country.isoCode}>
                {country.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {country && states.length > 0 && (
        <div className="space-y-2">
          <Label htmlFor="state">State/Province</Label>
          <Select
            onValueChange={(value) =>
              setState(states.find((s) => s.isoCode === value))
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select state/province" />
            </SelectTrigger>
            <SelectContent>
              {states.map((state) => (
                <SelectItem key={state.isoCode} value={state.isoCode}>
                  {state.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}

      {state && cities.length > 0 && (
        <div className="space-y-2">
          <Label htmlFor="city">City</Label>
          <Select
            onValueChange={(value) =>
              setCity(cities.find((c) => c.name === value))
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select city" />
            </SelectTrigger>
            <SelectContent>
              {cities.map((city) => (
                <SelectItem key={city.name} value={city.name}>
                  {city.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}

      <Alert>
        <Info className="h-4 w-4" />
        <AlertDescription>
          Selecting the correct jurisdiction is crucial for ensuring the
          validity of your documents and compliance with local regulations.
        </AlertDescription>
      </Alert>

      <div className="space-y-2">
        <Label>Authorized Signatory</Label>
        <RadioGroup
          value={authorizedSignatory}
          onValueChange={setAuthorizedSignatory}
        >
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="me" id="me" />
            <Label htmlFor="me">Me</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="someone_else" id="someone_else" />
            <Label htmlFor="someone_else">Someone Else</Label>
          </div>
        </RadioGroup>
      </div>
      {authorizedSignatory === "someone_else" && (
        <div className="space-y-2">
          <Label htmlFor="signatoryEmail">Signatory Email</Label>
          <Input
            id="signatoryEmail"
            type="email"
            placeholder="Enter signatory email"
            value={signatoryEmail}
            onChange={(e) => setSignatoryEmail(e.target.value)}
            required
          />
        </div>
      )}
      <Button type="submit" className="w-full">
        Next
      </Button>
    </form>
  );
}



================================================================================

File: src/app/components/OrganizationTypeStep.js (starts at line 1652)

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Building, Briefcase, Users, User } from "lucide-react";
import { useCallback } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";


const organizationTypes = [
  {
    type: "Individual",
    icon: User,
    description: "Perfect for freelancers and solo entrepreneurs",
  },
  {
    type: "SMB",
    icon: Briefcase,
    description: "Ideal for small and medium-sized businesses",
  },
  {
    type: "Startup",
    icon: Users,
    description: "Built for fast-growing companies and teams",
  },
  {
    type: "Enterprise",
    icon: Building,
    description: "Designed for large organizations with complex needs",
  },
];

export default function OrganizationTypeStep({ onNext, registrationId }) {
  const supabase = createClientComponentClient();

  console.log('OrganizationTypeStep registrationId:', registrationId); // Debug log

  const handleSelection = useCallback(
    async (type) => {
      try {
        console.log('Updating registration:', registrationId, type); // Debug log
        
        if (!registrationId) {
          throw new Error('Registration ID is missing');
        }

        const { error } = await supabase
          .from("registrations")
          .update({ organization_type: type })
          .eq("id", registrationId);

        if (error) throw error;
        onNext({ organizationType: type });
      } catch (error) {
        console.error("Failed to update organization type:", error);
        // You might want to add error handling UI here
      }
    },
    [registrationId, onNext, supabase]
  );

  return (
    <div className="grid grid-cols-2 gap-4">
      {organizationTypes.map(({ type, icon: Icon, description }) => (
        <Card
          key={type}
          className="cursor-pointer hover:bg-gray-100"
          onClick={() => handleSelection(type)}
        >
          <CardContent className="flex flex-col items-center justify-center p-6">
            <Icon className="w-12 h-12 mb-2" />
            <span className="font-medium">{type}</span>
            <p className="text-sm text-gray-500 text-center mt-1">
              {description}
            </p>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}



================================================================================

File: src/app/components/SignupStep.js (starts at line 1732)

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { supabase } from "@/lib/supabase";
import { toast } from "sonner";

export default function SignupStep({ onNext }) {
  const [loading, setLoading] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);

      // Check if user exists
      const { data: existingUser } = await supabase
        .from("profiles")
        .select()
        .eq("email", email)
        .single();

      if (existingUser) {
        toast.error("An account with this email already exists");
        return;
      }

      // If user doesn't exist, proceed with signup
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: name,
          },
        },
      });

      if (authError) throw authError;

      // Create registration entry
      const { data: registration, error: registrationError } = await supabase
        .from("registrations")
        .insert([
          {
            user_id: authData.user.id,
            status: "pending",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
        ])
        .select()
        .single();

      if (registrationError) throw registrationError;

      console.log('Registration created:', registration);
      console.log('Registration ID:', registration.id);

      onNext({ name, email, registrationId: registration.id });
      toast.success(
        "Signup successful! Please check your email to verify your account."
      );
    } catch (error) {
      toast.error(error.message || "Error during signup");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <Button type="submit" disabled={loading} className="w-full">
          {loading ? "Loading..." : "Sign Up with Email"}
        </Button>
      </form>
    </div>
  );
}



================================================================================

File: src/app/dashboard/page.js (starts at line 1848)

"use client";

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { NewAgreementForm } from "@/components/NewAgreementForm";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import {
  formatDistanceToNow,
  isToday,
  isYesterday,
  format,
  isThisWeek,
  isThisYear,
} from "date-fns";
import Image from "next/image";

export default function DashboardPage() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [registrations, setRegistrations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    totalDocuments: 0,
    signedDocuments: 0,
    totalParties: 0,
  });
  const [templates, setTemplates] = useState([]);
  const [loadingTemplates, setLoadingTemplates] = useState(false);
  const [templateSearchQuery, setTemplateSearchQuery] = useState("");
  const [userDocuments, setUserDocuments] = useState([]);
  const [documentSearchQuery, setDocumentSearchQuery] = useState("");

  useEffect(() => {
    async function fetchData() {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (!user) return;

        // Fetch registrations
        const { data: registrationsData, error: registrationsError } =
          await supabase
            .from("registrations")
            .select("*")
            .eq("user_id", user.id)
            .order("created_at", { ascending: false });

        if (registrationsError) throw registrationsError;
        setRegistrations(registrationsData || []);

        // Fetch user documents
        const { data: documentsData, error: documentsError } = await supabase
          .from("user_documents")
          .select(
            `
            *,
            template:templates(template_name)
          `
          )
          .eq("user_id", user.id)
          .order("created_at", { ascending: false });

        if (documentsError) throw documentsError;
        setUserDocuments(documentsData || []);

        // Calculate stats
        setStats({
          totalDocuments: (documentsData || []).length,
          signedDocuments: (documentsData || []).filter(
            (doc) => doc.status === "signed"
          ).length,
          totalParties: registrationsData.reduce(
            (acc, doc) => acc + (doc.parties?.length || 0),
            0
          ),
        });
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  const fetchTemplates = async () => {
    setLoadingTemplates(true);
    try {
      const { data, error } = await supabase
        .from("templates")
        .select("*")
        .order("created_at", { ascending: false });

      if (error) throw error;
      setTemplates(data || []);
    } catch (error) {
      console.error("Error fetching templates:", error);
    } finally {
      setLoadingTemplates(false);
    }
  };

  // Filter templates based on search
  const filteredTemplates = templates.filter((template) =>
    Object.values({
      template_name: template.template_name,
      ideal_for: template.ideal_for,
      description: template.description,
    }).some((value) =>
      value?.toLowerCase().includes(templateSearchQuery.toLowerCase())
    )
  );

  // Update the helper function
  function formatRelativeTime(dateStr) {
    try {
      const date = new Date(dateStr);

      if (isToday(date)) {
        const distance = formatDistanceToNow(date, { addSuffix: false });
        return distance === "less than a minute"
          ? "just now"
          : `${distance} ago`;
      }

      if (isYesterday(date)) {
        return "yesterday";
      }

      if (isThisWeek(date)) {
        return formatDistanceToNow(date, { addSuffix: true });
      }

      if (isThisYear(date)) {
        return format(date, "MMM d");
      }

      return format(date, "MMM d, yyyy");
    } catch (error) {
      return "Invalid date";
    }
  }

  const filteredDocuments = userDocuments.filter((doc) =>
    Object.values({
      title: doc.title || "",
      description: doc.description || "",
    }).some((value) =>
      value.toLowerCase().includes(documentSearchQuery.toLowerCase())
    )
  );

  if (loading) {
    return (
      <div className="container mx-auto p-6">
        <h1 className="text-2xl font-bold mb-4">Loading...</h1>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Logo Section */}
      <div className="flex justify-start mb-8">
        <Image
          src="/logo.png"
          alt="DocWiz Logo"
          width={180}
          height={60}
          priority
          className="h-auto"
        />
      </div>

      {/* Stats Section */}
      <div className="grid gap-4 md:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Documents
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalDocuments}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Signed Documents
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.signedDocuments}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Parties</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalParties}</div>
          </CardContent>
        </Card>
      </div>

      <div className="flex space-x-4">
        <Dialog>
          <DialogTrigger asChild>
            <Button>Generate New Agreement</Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New Agreement</DialogTitle>
            </DialogHeader>
            <NewAgreementForm />
          </DialogContent>
        </Dialog>

        <Dialog>
          <DialogTrigger asChild>
            <Button variant="secondary" onClick={fetchTemplates}>
              Select Template
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-[900px] max-h-[80vh]">
            <DialogHeader>
              <DialogTitle className="text-xl mb-4">
                Select a Template
              </DialogTitle>
              <div className="mb-4">
                <Input
                  type="text"
                  placeholder="Search templates..."
                  value={templateSearchQuery}
                  onChange={(e) => setTemplateSearchQuery(e.target.value)}
                  className="max-w-sm"
                />
              </div>
            </DialogHeader>
            {loadingTemplates ? (
              <div className="flex items-center justify-center py-8">
                Loading templates...
              </div>
            ) : (
              <div className="overflow-y-auto max-h-[60vh]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[200px]">Template Name</TableHead>
                      <TableHead className="w-[150px]">Ideal For</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead className="w-[100px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredTemplates.map((template) => (
                      <TableRow key={template.id}>
                        <TableCell className="font-medium">
                          {template.template_name}
                        </TableCell>
                        <TableCell>{template.ideal_for}</TableCell>
                        <TableCell>
                          <div className="max-h-[100px] overflow-y-auto pr-4">
                            {template.description}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Button
                            size="sm"
                            onClick={async () => {
                              try {
                                // Get current user
                                const {
                                  data: { user },
                                } = await supabase.auth.getUser();
                                if (!user) throw new Error("Not authenticated");

                                // Create new user document from template
                                const { data: newDocument, error } =
                                  await supabase
                                    .from("user_documents")
                                    .insert([
                                      {
                                        user_id: user.id,
                                        template_id: template.id,
                                        content: template.content,
                                        title: template.template_name,
                                        status: "draft",
                                      },
                                    ])
                                    .select()
                                    .single();

                                if (error) throw error;

                                // Redirect to editor with new document ID
                                router.push(
                                  `/editor/document/${newDocument.id}`
                                );
                              } catch (error) {
                                console.error(
                                  "Error creating document:",
                                  error
                                );
                                // Add error handling/notification here
                              }
                            }}
                          >
                            Select
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </div>

      {/* Documents Table */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Documents</CardTitle>
          <div className="mt-4">
            <br></br>
            <Input
              type="text"
              placeholder="Search documents..."
              value={documentSearchQuery}
              onChange={(e) => setDocumentSearchQuery(e.target.value)}
              className="max-w-sm"
            />
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Title</TableHead>
                <TableHead>Template</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Created</TableHead>
                <TableHead>Last Updated</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredDocuments.map((doc) => (
                <TableRow key={doc.id}>
                  <TableCell className="font-medium">{doc.title}</TableCell>
                  <TableCell>
                    {doc.template?.template_name || "Custom Document"}
                  </TableCell>
                  <TableCell>
                    <span
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        doc.status === "draft"
                          ? "bg-yellow-100 text-yellow-800"
                          : doc.status === "signed"
                            ? "bg-green-100 text-green-800"
                            : "bg-gray-100 text-gray-800"
                      }`}
                    >
                      {doc.status || "draft"}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span className="text-xs text-muted-foreground">
                        {formatRelativeTime(doc.created_at)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span className="text-xs text-muted-foreground">
                        {formatRelativeTime(doc.updated_at || doc.created_at)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => router.push(`/editor/document/${doc.id}`)}
                    >
                      Edit
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
              {filteredDocuments.length === 0 && (
                <TableRow>
                  <TableCell
                    colSpan={6}
                    className="text-center text-muted-foreground"
                  >
                    No documents found matching your search.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/editor/[templateId]/page.js (starts at line 2280)

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import Editor from "@/components/Editor";

export default function EditorPage({ params }) {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [userDocument, setUserDocument] = useState(null);
  const [content, setContent] = useState("");
  const { templateId } = params;

  useEffect(() => {
    async function initializeDocument() {
      // Get the current user
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError) {
        console.error("Error getting user:", userError);
        return;
      }

      // First, fetch the template
      const { data: template, error: templateError } = await supabase
        .from("templates")
        .select("*")
        .eq("id", templateId)
        .single();

      if (templateError) {
        console.error("Error fetching template:", templateError);
        return;
      }

      // Create a new user document
      const { data: newDocument, error: documentError } = await supabase
        .from("user_documents")
        .insert([
          {
            user_id: user.id,
            template_id: templateId,
            content: template.content,
            title: template.template_name,
            status: "draft",
          },
        ])
        .select()
        .single();

      if (documentError) {
        console.error("Error creating user document:", documentError);
        return;
      }

      setUserDocument(newDocument);
      setContent(newDocument.content);
    }

    initializeDocument();
  }, [templateId, supabase]);

  const handleContentChange = async (newContent) => {
    setContent(newContent);
    
    // Update the user document in the database
    const { error } = await supabase
      .from('user_documents')
      .update({ 
        content: newContent,
        updated_at: new Date().toISOString()
      })
      .eq('id', userDocument.id);

    if (error) {
      console.error('Error updating document:', error);
    }
  };

  if (!userDocument) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">{userDocument.title}</h1>
        <Button onClick={() => router.back()}>Back</Button>
      </div>

      <Editor 
        content={content} 
        onChange={handleContentChange}
        documentId={userDocument?.id} 
      />
    </div>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/page.js (starts at line 2383)

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import Editor from "@/components/Editor";
import { formatDistanceToNow } from "date-fns";
import { use } from "react";
import LoadingModal from "@/components/LoadingModal";

export default function EditorPage({ params }) {
  const resolvedParams = use(params);
  const documentId = resolvedParams.documentId;
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [userDocument, setUserDocument] = useState(null);
  const [content, setContent] = useState("");
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [, setForceUpdate] = useState(0);
  const [isFormatting, setIsFormatting] = useState(false);

  const formatRelativeTime = (dateString) => {
    return formatDistanceToNow(new Date(dateString), { addSuffix: true });
  };

  useEffect(() => {
    async function fetchDocument() {
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();

      if (userError) {
        console.error("Error getting user:", userError);
        return;
      }

      // Fetch the user's document
      const { data: document, error: documentError } = await supabase
        .from("user_documents")
        .select(
          `
          *,
          template:templates(*)
        `
        )
        .eq("id", documentId)
        .eq("user_id", user.id)
        .single();

      if (documentError) {
        console.error("Error fetching document:", documentError);
        return;
      }

      if (document) {
        setUserDocument(document);
        setContent(document.content);
      }
    }

    fetchDocument();
  }, [documentId, supabase]);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setForceUpdate((prev) => prev + 1);
    }, 60000);

    return () => clearInterval(intervalId);
  }, []);

  const handleContentChange = async (newContent) => {
    const newTimestamp = new Date().toISOString();
    setContent(newContent);
    setUserDocument((prev) => ({
      ...prev,
      updated_at: newTimestamp,
    }));

    const { error } = await supabase
      .from("user_documents")
      .update({
        content: newContent,
        updated_at: newTimestamp,
      })
      .eq("id", documentId);

    if (error) {
      console.error("Error updating document:", error);
    }
  };

  const handleTitleChange = async (newTitle) => {
    const newTimestamp = new Date().toISOString();

    const { error } = await supabase
      .from("user_documents")
      .update({
        title: newTitle,
        updated_at: newTimestamp,
      })
      .eq("id", documentId);

    if (error) {
      console.error("Error updating document title:", error);
      return;
    }

    setUserDocument((prev) => ({
      ...prev,
      title: newTitle,
      updated_at: newTimestamp,
    }));
    setIsEditingTitle(false);
  };

  const handleImproveFormatting = async (currentContent) => {
    setIsFormatting(true);
    try {
      const response = await fetch("/api/improve-formatting", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: currentContent,
        }),
      });

      const data = await response.json();

      if (data.error) throw new Error(data.error);

      return data.formattedContent;
    } catch (error) {
      console.error("Error improving formatting:", error);
      return null;
    } finally {
      setIsFormatting(false);
    }
  };

  const handleCancelFormatting = () => {
    setIsFormatting(false);
  };

  if (!userDocument) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex flex-col mb-6">
        <div className="flex items-center justify-between">
          {isEditingTitle ? (
            <input
              type="text"
              className="text-3xl font-bold bg-transparent border-b border-gray-300 focus:outline-none focus:border-primary w-2/3"
              value={userDocument.title}
              onChange={(e) =>
                setUserDocument((prev) => ({ ...prev, title: e.target.value }))
              }
              onBlur={() => handleTitleChange(userDocument.title)}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  handleTitleChange(userDocument.title);
                } else if (e.key === "Escape") {
                  setIsEditingTitle(false);
                }
              }}
              autoFocus
            />
          ) : (
            <h1
              className="text-3xl font-bold cursor-pointer hover:opacity-80"
              onClick={() => setIsEditingTitle(true)}
            >
              {userDocument.title}
            </h1>
          )}
          <div className="space-x-4">
            <Button variant="outline" onClick={() => router.back()}>
              Back
            </Button>
            <Button>Save</Button>
          </div>
        </div>
        <div className="text-sm text-muted-foreground mt-2">
          <span>Created {formatRelativeTime(userDocument.created_at)}</span>
          <span className="mx-2">•</span>
          <span>Last edited {formatRelativeTime(userDocument.updated_at)}</span>
        </div>
      </div>

      <Editor
        content={content}
        onChange={handleContentChange}
        documentId={documentId}
        onImproveFormatting={handleImproveFormatting}
      />

      <LoadingModal isOpen={isFormatting} onCancel={handleCancelFormatting} />
    </div>
  );
}



================================================================================

File: src/app/register/page.js (starts at line 2591)

"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import SignupStep from "../components/SignupStep";
import OrganizationTypeStep from "../components/OrganizationTypeStep";
import BusinessDetailsStep from "../components/BusinessDetailsStep";
import EntityDetailsStep from "../components/EntityDetailsStep";

const steps = [
  "Signup",
  "Organization Type",
  "Business Details",
  "Entity Details",
];

export default function OnboardingForm() {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({});

  const handleNext = (stepData) => {
    console.log("Current formData:", formData); // Debug log
    console.log("New stepData:", stepData); // Debug log

    setFormData({ ...formData, ...stepData });
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  console.log("Rendered with formData:", formData); // Debug log

  const handleBack = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = () => {
    console.log("Form submitted:", formData);
    // Here you would typically send the data to your backend
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return <SignupStep onNext={handleNext} />;
      case 1:
        return (
          <OrganizationTypeStep
            onNext={handleNext}
            registrationId={formData.registrationId}
          />
        );
      case 2:
        return (
          <BusinessDetailsStep
            onNext={handleNext}
            registrationId={formData.registrationId}
          />
        );
      case 3:
        return (
          <EntityDetailsStep
            onNext={handleSubmit}
            registrationId={formData.registrationId}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">
            {steps[currentStep]}
          </CardTitle>
        </CardHeader>
        <CardContent>{renderStep()}</CardContent>
        <CardFooter className="flex justify-between">
          <Button
            variant="outline"
            onClick={handleBack}
            disabled={currentStep === 0}
          >
            Back
          </Button>
          <div className="flex space-x-2">
            {steps.map((_, index) => (
              <div
                key={index}
                className={`w-3 h-3 rounded-full ${
                  index === currentStep ? "bg-blue-500" : "bg-gray-300"
                }`}
              />
            ))}
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/sign-in/page.js (starts at line 2700)

"use client";

import { useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Mail, Lock } from "lucide-react";
import Link from "next/link";

export default function SignIn() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSignIn = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        if (error.message === "Email not confirmed") {
          router.push("/verify-email");
          toast.info("Please verify your email before continuing.");
          return;
        }
        throw error;
      }

      const {
        data: { user },
      } = await supabase.auth.getUser();
      router.push("/dashboard");
      toast.success("Signed in successfully!");
    } catch (error) {
      console.error("Error signing in:", error);
      toast.error(error.message || "Failed to sign in");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">
            Sign In
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSignIn} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <div className="relative">
                <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="pl-10"
                  required
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <div className="relative">
                <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="password"
                  type="password"
                  placeholder="Enter your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="pl-10"
                  required
                />
              </div>
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? "Signing in..." : "Sign In"}
            </Button>

            <div className="text-center text-sm text-gray-500">
              Don't have an account?{" "}
              <Link href="/register" className="text-blue-600 hover:underline">
                Sign up
              </Link>
            </div>

            <div className="text-center text-sm">
              <Link
                href="/forgot-password"
                className="text-blue-600 hover:underline"
              >
                Forgot your password?
              </Link>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/verify-email/page.js (starts at line 2819)

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Mail } from "lucide-react";

export default function VerifyEmail() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [countdown, setCountdown] = useState(60);
  const [resendCooldown, setResendCooldown] = useState(0);
  const [loading, setLoading] = useState(false);
  const [userEmail, setUserEmail] = useState(null);
  const [isVerifying, setIsVerifying] = useState(true);

  useEffect(() => {
    const timer = setInterval(() => {
      setCountdown((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);

    const cooldownTimer = setInterval(() => {
      setResendCooldown((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);

    const checkEmailVerification = async () => {
      try {
        const {
          data: { user },
          error,
        } = await supabase.auth.getUser();

        if (error) throw error;

        if (user?.email_confirmed_at) {
          // Clear any existing sessions to ensure a fresh login
          await supabase.auth.refreshSession();
          router.push("/dashboard");
        }
      } catch (error) {
        console.error("Error checking verification:", error);
        toast.error("Failed to verify email status");
      }
    };

    // Check every 3 seconds
    const verificationChecker = setInterval(checkEmailVerification, 3000);

    // Check for valid session on mount
    const checkSession = async () => {
      try {
        setIsVerifying(true);
        const {
          data: { session },
          error,
        } = await supabase.auth.getSession();

        if (error) throw error;

        // If no session, redirect to sign in
        if (!session) {
          router.push("/sign-in");
          return;
        }

        // Store the email for display and verification
        setUserEmail(session.user.email);

        // If already verified, redirect to dashboard
        if (session.user.email_confirmed_at) {
          router.push("/dashboard");
          return;
        }
      } catch (error) {
        console.error("Session check error:", error);
        toast.error("Unable to verify session");
        router.push("/sign-in");
      } finally {
        setIsVerifying(false);
      }
    };

    checkSession();

    return () => {
      clearInterval(timer);
      clearInterval(cooldownTimer);
      clearInterval(verificationChecker);
    };
  }, [router, supabase.auth]);

  const handleResendEmail = async () => {
    try {
      setLoading(true);
      const { error } = await supabase.auth.resend({
        type: "signup",
      });

      if (error) throw error;

      // Set cooldown to 60 seconds
      setResendCooldown(60);
      toast.success("Verification email resent successfully!");
    } catch (error) {
      console.error("Error resending verification email:", error);
      toast.error(error.message || "Failed to resend verification email");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">
            Verify Your Email
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {userEmail && (
            <p className="text-center text-gray-600">
              We've sent a verification email to{" "}
              <span className="font-medium">{userEmail}</span>
            </p>
          )}
          <p className="text-center text-sm text-gray-500">
            You'll be automatically redirected once your email is verified.
          </p>
          {countdown > 0 && (
            <p className="text-center text-sm text-gray-500">
              Checking for verification... ({countdown}s)
            </p>
          )}

          <div className="flex justify-center">
            <Button
              variant="outline"
              onClick={handleResendEmail}
              disabled={resendCooldown > 0 || loading}
              className="gap-2"
            >
              <Mail className="h-4 w-4" />
              {loading
                ? "Sending..."
                : resendCooldown > 0
                  ? `Resend in ${resendCooldown}s`
                  : "Resend verification email"}
            </Button>
          </div>

          <p className="text-center text-sm text-gray-500">
            Don't see the email? Check your spam folder.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/components/ChangePreview.js (starts at line 2982)

export default function ChangePreview({ originalText, newText, onAccept, onReject }) {
  const renderFormattedContent = (content) => {
    // If content is already HTML, render it directly
    if (/<[^>]*>/g.test(content)) {
      return (
        <div 
          dangerouslySetInnerHTML={{ __html: content }}
          className="prose prose-sm max-w-none [&>ul]:list-disc [&>ul]:pl-4 [&>ol]:list-decimal [&>ol]:pl-4"
        />
      );
    }
    
    // If plain text with newlines, convert to HTML with proper formatting
    if (content.includes('\n')) {
      const htmlContent = content
        .split('\n')
        .map(line => {
          if (line.trim().startsWith('-') || line.trim().startsWith('•')) {
            return `<li>${line.trim().substring(1).trim()}</li>`;
          }
          return `<p>${line}</p>`;
        })
        .join('');
      
      return (
        <div 
          dangerouslySetInnerHTML={{ __html: htmlContent }}
          className="prose prose-sm max-w-none [&>ul]:list-disc [&>ul]:pl-4 [&>ol]:list-decimal [&>ol]:pl-4"
        />
      );
    }
    
    // Plain text without formatting
    return <p>{content}</p>;
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-3xl w-full mx-4 space-y-4 max-h-[80vh] overflow-y-auto">
        <h3 className="text-lg font-semibold">Review Changes</h3>
        
        <div className="space-y-4">
          <div>
            <h4 className="text-sm font-medium text-gray-500">Original Text:</h4>
            <div className="p-3 bg-red-50 dark:bg-red-900/20">
              <div className="text-red-700 dark:text-red-300">
                {renderFormattedContent(originalText)}
              </div>
            </div>
          </div>
          
          <div>
            <h4 className="text-sm font-medium text-gray-500">New Text:</h4>
            <div className="p-3 bg-green-50 dark:bg-green-900/20">
              <div className="text-green-700 dark:text-green-300">
                {renderFormattedContent(newText)}
              </div>
            </div>
          </div>
        </div>

        <div className="flex justify-end space-x-3 pt-4 border-t">
          <button
            onClick={onReject}
            className="px-4 py-2 border rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            Reject
          </button>
          <button
            onClick={onAccept}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Accept
          </button>
        </div>
      </div>
    </div>
  );
}



================================================================================

File: src/components/Editor.js (starts at line 3062)

"use client";

import { useEditor, EditorContent } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Placeholder from "@tiptap/extension-placeholder";
import Typography from "@tiptap/extension-typography";
import CodeBlockLowlight from "@tiptap/extension-code-block-lowlight";
import Link from "@tiptap/extension-link";
import { common, createLowlight } from "lowlight";
import { useEffect, useState, useCallback } from "react";
import { Markdown } from "tiptap-markdown";
import MenuBar from "./MenuBar";
import Sidebar from "./Sidebar";
import { Extension } from "@tiptap/core";
import { Plugin, PluginKey } from "@tiptap/pm/state";
import { Decoration, DecorationSet } from "@tiptap/pm/view";
import "../styles/editor.css";
import SuggestionPopup from "./SuggestionPopup";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import ChangePreview from "./ChangePreview";
import { Wand2 } from "lucide-react";

// Create a new lowlight instance with common languages
const lowlight = createLowlight(common);

// Add custom extension for placeholders
const PlaceholderHighlight = Extension.create({
  name: "placeholderHighlight",

  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("placeholderHighlight"),
        props: {
          decorations: (state) => {
            const { doc } = state;
            const decorations = [];

            doc.descendants((node, pos) => {
              if (node.isText) {
                // Match {{PLACEHOLDER_NAME}} format
                const regex = /\{\{([^}]+)\}\}/g;
                let match;

                while ((match = regex.exec(node.text)) !== null) {
                  const start = pos + match.index;
                  const end = start + match[0].length;

                  decorations.push(
                    Decoration.inline(start, end, {
                      class: "placeholder-text",
                    })
                  );
                }
              }
            });

            return DecorationSet.create(doc, decorations);
          },
        },
      }),
    ];
  },
});

export default function Editor({
  content,
  onChange,
  documentId,
  onImproveFormatting,
}) {
  const [isMounted, setIsMounted] = useState(false);
  const [documentValues, setDocumentValues] = useState({});
  const [selection, setSelection] = useState(null);
  const [popupPosition, setPopupPosition] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [previewChanges, setPreviewChanges] = useState(null);
  const supabase = createClientComponentClient();

  // Function to extract placeholders from content
  const extractPlaceholders = useCallback((text) => {
    const regex = /\{\{([^}]+)\}\}/g;
    const matches = [];
    let match;

    while ((match = regex.exec(text)) !== null) {
      matches.push({
        name: match[1],
        value: "",
      });
    }

    return matches;
  }, []);

  // Editor initialization
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        heading: { levels: [1, 2, 3, 4, 5, 6] },
        codeBlock: false,
      }),
      Placeholder.configure({
        placeholder: "Start typing...",
      }),
      Typography,
      CodeBlockLowlight.configure({
        lowlight,
        defaultLanguage: "javascript",
      }),
      Link.configure({
        openOnClick: false,
      }),
      Markdown.configure({
        html: true,
        transformPastedText: true,
        transformCopiedText: true,
      }),
      PlaceholderHighlight,
    ],
    content,
    onUpdate: ({ editor }) => {
      const markdown = editor.storage.markdown.getMarkdown();
      if (onChange) {
        onChange(markdown);
      }
    },
    editorProps: {
      attributes: {
        class:
          "prose prose-sm max-w-none focus:outline-none" +
          " prose-headings:font-semibold" +
          " prose-h1:text-3xl prose-h1:mb-4" +
          " prose-h2:text-2xl prose-h2:mb-3" +
          " prose-h3:text-xl prose-h3:mb-2" +
          " prose-p:text-base prose-p:leading-relaxed" +
          " prose-pre:text-sm",
      },
    },
  });

  // Selection handling
  useEffect(() => {
    if (!editor) return;

    const handleSelection = () => {
      const { view } = editor;
      const { from, to } = view.state.selection;

      if (from === to) {
        setSelection(null);
        setPopupPosition(null);
        return;
      }

      const selectedText = editor.state.doc.textBetween(from, to);
      const coords = view.coordsAtPos(from);

      setSelection({
        text: selectedText,
        from,
        to,
      });

      setPopupPosition({
        top: coords.top + window.scrollY - 10,
        left: coords.left + window.scrollX,
      });
    };

    editor.on("selectionUpdate", handleSelection);
    return () => editor.off("selectionUpdate", handleSelection);
  }, [editor]);

  // Initialize document values and sync with database
  useEffect(() => {
    if (documentId && content) {
      const fetchDocumentValues = async () => {
        const { data: document, error } = await supabase
          .from("user_documents")
          .select("placeholder_values")
          .eq("id", documentId)
          .single();

        if (!error && document?.placeholder_values) {
          const values = document.placeholder_values.reduce((acc, curr) => {
            acc[curr.name] = curr.value;
            return acc;
          }, {});
          setDocumentValues(values);
        } else {
          // If no values in database, extract from content
          const placeholders = extractPlaceholders(content);
          const values = placeholders.reduce((acc, curr) => {
            acc[curr.name] = curr.value;
            return acc;
          }, {});
          setDocumentValues(values);
        }
      };

      fetchDocumentValues();
    }
  }, [documentId, content, extractPlaceholders, supabase]);

  // Placeholder value handling
  const handlePlaceholderChange = async (name, value) => {
    const newValues = {
      ...documentValues,
      [name]: value,
    };

    setDocumentValues(newValues);

    // Update database
    if (documentId) {
      const placeholderArray = Object.entries(newValues).map(
        ([name, value]) => ({
          name,
          value,
        })
      );

      const { error } = await supabase
        .from("user_documents")
        .update({
          placeholder_values: placeholderArray,
        })
        .eq("id", documentId);

      if (error) {
        console.error("Error updating placeholder values:", error);
      }
    }
  };

  // AI improvement handling
  const handleSuggestionSubmit = async (prompt) => {
    if (!selection) return;

    setIsProcessing(true);
    try {
      const response = await fetch("/api/improve-text", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          selectedText: selection.text,
          fullDocument: editor.getHTML(),
          prompt,
        }),
      });

      const data = await response.json();
      if (data.error) throw new Error(data.error);

      setPreviewChanges({
        originalText: selection.text,
        newText: data.improvedText,
        from: selection.from,
        to: selection.to,
      });

      setPopupPosition(null);
    } catch (error) {
      console.error("Error improving text:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleAcceptChanges = () => {
    if (!previewChanges) return;

    editor
      .chain()
      .focus()
      .setTextSelection({ from: previewChanges.from, to: previewChanges.to })
      .deleteSelection()
      .insertContent(previewChanges.newText)
      .run();

    setPreviewChanges(null);
    setSelection(null);
  };

  const handleRejectChanges = () => {
    setPreviewChanges(null);
    setSelection(null);
  };

  const handleImproveFormatting = async () => {
    if (!editor) return;

    try {
      const currentContent = editor.storage.markdown.getMarkdown();
      if (onImproveFormatting) {
        const formattedContent = await onImproveFormatting(currentContent);
        if (formattedContent) {
          editor.commands.setContent(formattedContent, true);
        }
      }
    } catch (error) {
      console.error("Error improving formatting:", error);
    }
  };

  useEffect(() => {
    setIsMounted(true);
  }, []);

  if (!isMounted) {
    return (
      <div className="min-h-[calc(100vh-200px)] p-4 border rounded-lg">
        Loading editor...
      </div>
    );
  }

  return (
    <div className="max-w-none flex relative">
      <div className="flex-1 border rounded-lg">
        <MenuBar
          editor={editor}
          onImproveFormatting={handleImproveFormatting}
        />
        <EditorContent
          editor={editor}
          className="min-h-[calc(100vh-200px)] p-4"
        />
        {popupPosition && (
          <SuggestionPopup
            position={popupPosition}
            onSubmit={handleSuggestionSubmit}
            onClose={() => {
              setSelection(null);
              setPopupPosition(null);
            }}
          />
        )}
      </div>
      <Sidebar
        documentValues={documentValues}
        onValueChange={handlePlaceholderChange}
      />
      {previewChanges && (
        <ChangePreview
          originalText={previewChanges.originalText}
          newText={previewChanges.newText}
          onAccept={handleAcceptChanges}
          onReject={handleRejectChanges}
        />
      )}
    </div>
  );
}



================================================================================

File: src/components/JurisdictionSearch.jsx (starts at line 3418)

import React from "react";
import { useState } from "react";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from "cmdk";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

export function JurisdictionSearch({ value, onChange, defaultValue }) {
  const [open, setOpen] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [inputValue, setInputValue] = useState('');

  const searchJurisdictions = async (searchTerm) => {
    console.log('Searching for:', searchTerm);
    setInputValue(searchTerm);
    if (!searchTerm || searchTerm.length < 3) {
      setSearchResults([]);
      return;
    }

    try {
      const response = await fetch(
        `/api/places/autocomplete?input=${encodeURIComponent(searchTerm)}`
      );
      const data = await response.json();
      console.log('API Response:', data);
      
      if (data.predictions) {
        const formattedResults = data.predictions.map(prediction => ({
          value: prediction.description,
          label: prediction.description
        }));
        console.log('Formatted Results:', formattedResults);
        setSearchResults(formattedResults);
      }
    } catch (error) {
      console.error("Error fetching jurisdictions:", error);
    }
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
        >
          {value
            ? value
            : defaultValue || "Select jurisdiction..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[400px] p-0" align="start">
        <Command>
          <CommandInput 
            placeholder="Search jurisdictions..." 
            value={inputValue}
            onValueChange={searchJurisdictions}
          />
          {searchResults.length === 0 ? (
            <CommandEmpty>No results found.</CommandEmpty>
          ) : (
            <CommandGroup>
              {searchResults.map((result) => (
                <CommandItem
                  key={result.value}
                  onSelect={() => {
                    onChange(result.value);
                    setOpen(false);
                  }}
                >
                  {result.label}
                </CommandItem>
              ))}
            </CommandGroup>
          )}
        </Command>
      </PopoverContent>
    </Popover>
  );
}



================================================================================

File: src/components/LoadingModal.js (starts at line 3508)

import { useState, useEffect } from "react";

export default function LoadingModal({ isOpen, onCancel }) {
  const [loadingText, setLoadingText] = useState(
    "Analyzing document structure..."
  );

  useEffect(() => {
    if (!isOpen) return;

    const messages = [
      "Analyzing document structure...",
      "Applying agreement best practices...",
      "Enhancing readability...",
      "Polishing final formatting...",
      "Finalizing changes...",
    ];

    let currentIndex = 0;
    const interval = setInterval(() => {
      currentIndex += 1;
      if (currentIndex < messages.length) {
        setLoadingText(messages[currentIndex]);
      } else {
        clearInterval(interval);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg text-center w-[400px]">
        <h2 className="text-xl font-semibold mb-4">Formatting using AI</h2>
        <div className="mb-6">
          <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600 min-h-[28px]">{loadingText}</p>
        </div>
        <button
          onClick={onCancel}
          className="bg-red-500 text-white px-6 py-2 rounded hover:bg-red-600 transition-colors font-medium"
        >
          Cancel
        </button>
      </div>
    </div>
  );
}



================================================================================

File: src/components/MenuBar.js (starts at line 3560)

import { Wand2 } from "lucide-react";

export default function MenuBar({ editor, onImproveFormatting }) {
  if (!editor) {
    return null;
  }

  return (
    <div className="border-b p-2 flex flex-wrap gap-2">
      <button
        onClick={() => editor.chain().focus().toggleBold().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("bold") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Bold
      </button>
      <button
        onClick={() => editor.chain().focus().toggleItalic().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("italic") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Italic
      </button>
      <button
        onClick={() => editor.chain().focus().toggleStrike().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("strike") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Strike
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCode().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("code") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Code
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCodeBlock().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("codeBlock") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Code Block
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("heading", { level: 1 })
            ? "bg-gray-200"
            : "hover:bg-gray-100"
        }`}
      >
        H1
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("heading", { level: 2 })
            ? "bg-gray-200"
            : "hover:bg-gray-100"
        }`}
      >
        H2
      </button>
      <button
        onClick={() => editor.chain().focus().toggleBulletList().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("bulletList") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Bullet List
      </button>
      <button
        onClick={() => editor.chain().focus().toggleOrderedList().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("orderedList") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Ordered List
      </button>
      <button
        onClick={onImproveFormatting}
        className="p-2 rounded hover:bg-gray-100 text-orange-500 hover:text-orange-600 flex items-center gap-1"
        title="Improve Formatting"
      >
        <Wand2 className="w-5 h-5" />
        <span>Auto Format AI</span>
      </button>
    </div>
  );
}



================================================================================

File: src/components/NewAgreementForm.jsx (starts at line 3657)

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useRouter } from "next/navigation";
import { Wand2 } from "lucide-react"; // Import the magic wand icon
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Select } from "@/components/ui/select";
import { JurisdictionSearch } from "@/components/JurisdictionSearch";

export function NewAgreementForm() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);
  const [jurisdiction, setJurisdiction] = useState("");
  const [userRegistration, setUserRegistration] = useState(null);

  useEffect(() => {
    const fetchUserRegistration = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data, error } = await supabase
          .from('registrations')
          .select('city_name, state_name, country_name')
          .eq('user_id', user.id)
          .single();
        
        if (data) {
          setUserRegistration(data);
          // Set default jurisdiction from registration
          setJurisdiction(`${data.city_name}, ${data.state_name}, ${data.country_name}`);
        }
      }
    };

    fetchUserRegistration();
  }, [supabase]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      // Generate agreement using AI
      const response = await fetch('/api/generate-agreement', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          userId: user.id,
          jurisdiction
        }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error);

      // Create new document
      const { data: newDocument, error } = await supabase
        .from('user_documents')
        .insert([{
          user_id: user.id,
          content: data.content,
          title: data.title,
          status: 'draft'
        }])
        .select()
        .single();

      if (error) throw error;

      // Redirect to editor
      router.push(`/editor/document/${newDocument.id}`);
    } catch (error) {
      console.error('Error:', error);
      // Add error handling/notification here
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <div className="flex items-center gap-2 mb-2">
          <Wand2 className="h-4 w-4" />
          <span className="text-sm text-muted-foreground">AI-Powered Generation</span>
        </div>
        <Textarea
          placeholder="Explain what agreement you need and for what purpose...
Example: I need a non-disclosure agreement for a freelance developer who will be working on my startup"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          className="min-h-[120px]"
        />
        <p className="text-sm text-muted-foreground">
          Tip: Check our templates first to save time - we have many common agreements ready to use.
        </p>
      </div>
      <div className="space-y-2">
        <label className="text-sm text-muted-foreground">Jurisdiction</label>
        <JurisdictionSearch
          value={jurisdiction}
          onChange={setJurisdiction}
          defaultValue={userRegistration ? 
            `${userRegistration.city_name}, ${userRegistration.state_name}, ${userRegistration.country_name}` : 
            undefined
          }
        />
        {userRegistration && (
          <p className="text-sm text-muted-foreground">
            Default jurisdiction based on your registration
          </p>
        )}
      </div>
      <Button type="submit" className="w-full" disabled={loading}>
        {loading ? "Generating..." : "Generate Agreement"}
      </Button>
    </form>
  );
}


================================================================================

File: src/components/Sidebar.js (starts at line 3784)

import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";

export default function Sidebar({ documentValues, onValueChange }) {
  if (!documentValues || Object.keys(documentValues).length === 0) {
    return (
      <div className="w-80 border-l p-4">
        <p className="text-sm text-muted-foreground text-center">
          No document fields available
        </p>
      </div>
    );
  }

  return (
    <div className="w-80 border-l bg-muted/10">
      <div className="p-4 border-b">
        <h2 className="font-semibold">Document Fields</h2>
        <p className="text-sm text-muted-foreground">
          These fields will be used throughout the document
        </p>
      </div>

      <ScrollArea className="h-[calc(100vh-10rem)]">
        <div className="p-4 space-y-6">
          {Object.entries(documentValues).map(([name, details]) => (
            <div key={name} className="space-y-2">
              <Label htmlFor={name} className="text-sm font-medium capitalize">
                {name.replace(/([A-Z])/g, " $1").trim()}
              </Label>

              {details.description && (
                <p className="text-xs text-muted-foreground">
                  {details.description}
                </p>
              )}

              <Input
                id={name}
                value={details.value || ""}
                onChange={(e) => onValueChange(name, e.target.value)}
                placeholder={`Enter ${name.toLowerCase()}`}
                className="bg-background"
              />
            </div>
          ))}
        </div>
      </ScrollArea>

      <div className="p-4 border-t bg-muted/30">
        <p className="text-xs text-muted-foreground">
          Changes are automatically saved and will be reflected in the document
        </p>
      </div>
    </div>
  );
}



================================================================================

File: src/components/SuggestionPopup.js (starts at line 3843)

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";

export default function SuggestionPopup({ position, onSubmit, onClose }) {
  const [prompt, setPrompt] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await onSubmit(prompt);
    } finally {
      setIsLoading(false);
      setPrompt("");
    }
  };

  return (
    <div
      className="absolute z-50 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 w-80"
      style={{
        top: `${position.top}px`,
        left: `${position.left}px`,
      }}
    >
      <form onSubmit={handleSubmit}>
        <textarea
          className="w-full p-2 border rounded-md mb-2 dark:bg-gray-700"
          placeholder="How would you like to improve this section?"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          rows={3}
        />
        <div className="flex justify-end space-x-2">
          <Button variant="outline" type="button" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit" disabled={!prompt.trim() || isLoading}>
            {isLoading ? (
              <span className="flex items-center gap-2">
                <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="none"
                  />
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
                Loading...
              </span>
            ) : (
              "Submit"
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}



================================================================================

File: src/components/ui/alert.jsx (starts at line 3914)

import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================================================

File: src/components/ui/button.jsx (starts at line 3962)

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }



================================================================================

File: src/components/ui/card.jsx (starts at line 4010)

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================================================

File: src/components/ui/command.jsx (starts at line 4061)

"use client";
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props} />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  ...props
}) => {
  return (
    (<Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command
          className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>)
  );
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props} />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props} />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props} />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props} />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />)
  );
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================================================

File: src/components/ui/dialog.jsx (starts at line 4179)

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================================================

File: src/components/ui/dialog.tsx (starts at line 4276)

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================================================

File: src/components/ui/input.jsx (starts at line 4399)

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }



================================================================================

File: src/components/ui/label.jsx (starts at line 4419)

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================================================

File: src/components/ui/popover.jsx (starts at line 4438)

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



================================================================================

File: src/components/ui/radio-group.jsx (starts at line 4466)

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>)
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================================================

File: src/components/ui/scroll-area.jsx (starts at line 4498)

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================================================

File: src/components/ui/select.jsx (starts at line 4539)

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================================================

File: src/components/ui/sheet.jsx (starts at line 4662)

"use client";
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      {children}
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================================================

File: src/components/ui/table.jsx (starts at line 4772)

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================================================

File: src/components/ui/textarea.jsx (starts at line 4856)

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Textarea.displayName = "Textarea"

export { Textarea }



================================================================================

File: src/lib/supabase.js (starts at line 4875)

import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



================================================================================

File: src/lib/utils.js (starts at line 4882)

import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}



================================================================================

File: src/lib/extensions/placeholder.js (starts at line 4889)

import { Extension } from "@tiptap/core";
import { Plugin, PluginKey } from "@tiptap/pm/state";
import { Decoration, DecorationSet } from "@tiptap/pm/view";

export const PlaceholderHighlight = Extension.create({
  name: "placeholderHighlight",

  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("placeholderHighlight"),
        props: {
          decorations: (state) => {
            const { doc } = state;
            const decorations = [];

            doc.descendants((node, pos) => {
              if (node.isText) {
                // Match {{PLACEHOLDER_NAME}} format
                const regex = /\{\{([^}]+)\}\}/g;
                let match;

                while ((match = regex.exec(node.text)) !== null) {
                  const start = pos + match.index;
                  const end = start + match[0].length;

                  decorations.push(
                    Decoration.inline(start, end, {
                      class: "placeholder-text",
                    })
                  );
                }
              }
            });

            return DecorationSet.create(doc, decorations);
          },
        },
      }),
    ];
  },
});



================================================================================

File: src/styles/editor.css (starts at line 4932)

/* Base Editor Styles */
.ProseMirror {
  > * + * {
    margin-top: 0.75em;
  }
  
  outline: none;
  min-height: calc(100vh - 10rem);
}

/* Placeholder Styles */
.ProseMirror p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

/* Dynamic Field Styles */
.placeholder-text {
  background-color: #e8f0fe;
  border-radius: 4px;
  padding: 2px 6px;
  margin: 0 1px;
  border: 1px solid #4285f4;
  color: #1967d2;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: 0.875em;
  cursor: text;
  transition: all 0.2s ease;
}

.placeholder-text:hover {
  background-color: #d2e3fc;
  border-color: #1a73e8;
}

/* Dark Mode Styles */
.dark .placeholder-text {
  background-color: #1a365d;
  border-color: #4299e1;
  color: #63b3ed;
}

.dark .placeholder-text:hover {
  background-color: #2a4365;
  border-color: #63b3ed;
}

/* Syntax Highlighting */
pre {
  background: #0d1117;
  padding: 1rem;
  border-radius: 0.5rem;
  overflow-x: auto;
}

code {
  color: #c9d1d9;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

.hljs-comment,
.hljs-quote {
  color: #8b949e;
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag {
  color: #ff7b72;
}

.hljs-string,
.hljs-attr {
  color: #a5d6ff;
}

.hljs-number,
.hljs-literal {
  color: #79c0ff;
}

.hljs-title,
.hljs-class,
.hljs-type {
  color: #d2a8ff;
}

/* Sidebar Styles */
.document-fields {
  border-left: 1px solid #e5e7eb;
  background-color: #fafafa;
  transition: all 0.2s ease;
}

.dark .document-fields {
  border-left-color: #374151;
  background-color: #1f2937;
}

/* Editor Toolbar Styles */
.editor-toolbar {
  border-bottom: 1px solid #e5e7eb;
  background-color: #ffffff;
  padding: 0.5rem;
}

.dark .editor-toolbar {
  border-bottom-color: #374151;
  background-color: #111827;
}


================================================================================