Summary:
 - Directory: /Users/gokulcholaghar/Vercel/legalwiz
 - Files processed: 88
 - Total lines: 10106
 - Duration: 0.04 seconds
================================================================================
Directory Structure:

├── public/
│   ├── pdf.worker.min.js
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   ├── chat/
│   │   │   │   └── route.js
│   │   │   ├── check-email/
│   │   │   │   └── route.js
│   │   │   ├── create-billing-portal/
│   │   │   │   └── route.js
│   │   │   ├── create-checkout-session/
│   │   │   │   └── route.js
│   │   │   ├── create-stripe-customer/
│   │   │   │   └── route.js
│   │   │   ├── generate-agreement/
│   │   │   │   └── route.js
│   │   │   ├── generate-templates/
│   │   │   │   └── route.js
│   │   │   ├── improve-formatting/
│   │   │   │   └── route.js
│   │   │   ├── improve-text/
│   │   │   │   └── route.js
│   │   │   ├── places/
│   │   │   │   └── autocomplete/
│   │   │   │       └── route.js
│   │   │   ├── signwell/
│   │   │   │   └── create-document/
│   │   │   │       └── route.js
│   │   │   └── webhooks/
│   │   │       ├── signwell/
│   │   │       │   └── route.js
│   │   │       └── stripe/
│   │   │           └── route.js
│   │   ├── auth/
│   │   │   └── callback/
│   │   │       └── route.js
│   │   ├── components/
│   │   │   ├── BusinessDetailsStep.js
│   │   │   ├── EntityDetailsStep.js
│   │   │   ├── OrganizationTypeStep.js
│   │   │   └── SignupStep.js
│   │   ├── dashboard/
│   │   │   └── page.js
│   │   ├── editor/
│   │   │   ├── [templateId]/
│   │   │   │   └── page.js
│   │   │   └── document/
│   │   │       └── [documentId]/
│   │   │           ├── preview/
│   │   │           │   └── page.js
│   │   │           ├── tracking/
│   │   │           │   ├── components/
│   │   │           │   │   ├── DocumentPreview.js
│   │   │           │   │   ├── SigningStatus.js
│   │   │           │   │   └── Timeline.js
│   │   │           │   └── page.js
│   │   │           └── page.js
│   │   ├── fonts/
│   │   ├── pricing/
│   │   │   └── page.js
│   │   ├── profile/
│   │   │   └── page.js
│   │   ├── register/
│   │   │   └── page.js
│   │   ├── sign-in/
│   │   │   └── page.js
│   │   ├── verify-email/
│   │   │   └── page.js
│   │   ├── globals.css
│   │   ├── layout.js
│   │   └── page.js
│   ├── components/
│   │   ├── ui/
│   │   │   ├── alert.jsx
│   │   │   ├── badge.jsx
│   │   │   ├── button.jsx
│   │   │   ├── calendar.jsx
│   │   │   ├── card.jsx
│   │   │   ├── command.jsx
│   │   │   ├── dialog.jsx
│   │   │   ├── dialog.tsx
│   │   │   ├── dropdown-menu.jsx
│   │   │   ├── input.jsx
│   │   │   ├── label.jsx
│   │   │   ├── popover.jsx
│   │   │   ├── radio-group.jsx
│   │   │   ├── scroll-area.jsx
│   │   │   ├── section.jsx
│   │   │   ├── select.jsx
│   │   │   ├── separator.jsx
│   │   │   ├── sheet.jsx
│   │   │   ├── slider.css
│   │   │   ├── slider.jsx
│   │   │   ├── switch.jsx
│   │   │   ├── table.jsx
│   │   │   ├── textarea.jsx
│   │   │   ├── toast.jsx
│   │   │   └── toaster.jsx
│   │   ├── ChangePreview.js
│   │   ├── Editor.js
│   │   ├── JurisdictionSearch.jsx
│   │   ├── LoadingModal.js
│   │   ├── MenuBar.js
│   │   ├── NewAgreementForm.jsx
│   │   ├── PDFGenerator.js
│   │   ├── PDFPreview.js
│   │   ├── Sidebar.js
│   │   └── SuggestionPopup.js
│   ├── data/
│   │   └── industries.js
│   ├── hooks/
│   │   └── use-toast.js
│   ├── lib/
│   │   ├── extensions/
│   │   │   └── placeholder.js
│   │   ├── hooks/
│   │   │   └── use-window-size.js
│   │   ├── supabase.js
│   │   ├── utils.js
│   │   └── utils.ts
│   ├── styles/
│   │   └── editor.css
│   ├── utils/
│   │   └── rateLimiter.js
│   └── middleware.js
├── .eslintrc.json
├── README.md
├── components.json
├── db-schema.txt
├── jsconfig.json
├── next.config.js
├── package.json
└── tailwind.config.js

Files extracted:
.eslintrc.json (starts at line 1)
README.md (starts at line 9)
components.json (starts at line 47)
db-schema.txt (starts at line 64)
jsconfig.json (starts at line 900)
next.config.js (starts at line 908)
package.json (starts at line 919)
tailwind.config.js (starts at line 1001)
public/pdf.worker.min.js (starts at line 1079)
src/middleware.js (starts at line 1080)
src/app/globals.css (starts at line 1109)
src/app/layout.js (starts at line 1230)
src/app/page.js (starts at line 1265)
src/app/api/chat/route.js (starts at line 1271)
src/app/api/check-email/route.js (starts at line 1306)
src/app/api/create-billing-portal/route.js (starts at line 1355)
src/app/api/create-checkout-session/route.js (starts at line 1429)
src/app/api/create-stripe-customer/route.js (starts at line 1483)
src/app/api/generate-agreement/route.js (starts at line 1521)
src/app/api/generate-templates/route.js (starts at line 1726)
src/app/api/improve-formatting/route.js (starts at line 1903)
src/app/api/improve-text/route.js (starts at line 1942)
src/app/api/places/autocomplete/route.js (starts at line 1991)
src/app/api/signwell/create-document/route.js (starts at line 2009)
src/app/api/webhooks/signwell/route.js (starts at line 2149)
src/app/api/webhooks/stripe/route.js (starts at line 2308)
src/app/auth/callback/route.js (starts at line 2431)
src/app/components/BusinessDetailsStep.js (starts at line 2459)
src/app/components/EntityDetailsStep.js (starts at line 2574)
src/app/components/OrganizationTypeStep.js (starts at line 2822)
src/app/components/SignupStep.js (starts at line 2901)
src/app/dashboard/page.js (starts at line 3035)
src/app/editor/[templateId]/page.js (starts at line 3911)
src/app/editor/document/[documentId]/page.js (starts at line 4014)
src/app/editor/document/[documentId]/preview/page.js (starts at line 4245)
src/app/editor/document/[documentId]/tracking/page.js (starts at line 4532)
src/app/editor/document/[documentId]/tracking/components/DocumentPreview.js (starts at line 4645)
src/app/editor/document/[documentId]/tracking/components/SigningStatus.js (starts at line 4689)
src/app/editor/document/[documentId]/tracking/components/Timeline.js (starts at line 4785)
src/app/pricing/page.js (starts at line 4857)
src/app/profile/page.js (starts at line 5247)
src/app/register/page.js (starts at line 5585)
src/app/sign-in/page.js (starts at line 5724)
src/app/verify-email/page.js (starts at line 5916)
src/components/ChangePreview.js (starts at line 6092)
src/components/Editor.js (starts at line 6172)
src/components/JurisdictionSearch.jsx (starts at line 6661)
src/components/LoadingModal.js (starts at line 6776)
src/components/MenuBar.js (starts at line 6829)
src/components/NewAgreementForm.jsx (starts at line 6926)
src/components/PDFGenerator.js (starts at line 7225)
src/components/PDFPreview.js (starts at line 7491)
src/components/Sidebar.js (starts at line 7933)
src/components/SuggestionPopup.js (starts at line 8124)
src/components/ui/alert.jsx (starts at line 8195)
src/components/ui/badge.jsx (starts at line 8243)
src/components/ui/button.jsx (starts at line 8278)
src/components/ui/calendar.jsx (starts at line 8326)
src/components/ui/card.jsx (starts at line 8390)
src/components/ui/command.jsx (starts at line 8441)
src/components/ui/dialog.jsx (starts at line 8559)
src/components/ui/dialog.tsx (starts at line 8656)
src/components/ui/dropdown-menu.jsx (starts at line 8779)
src/components/ui/input.jsx (starts at line 8937)
src/components/ui/label.jsx (starts at line 8957)
src/components/ui/popover.jsx (starts at line 8976)
src/components/ui/radio-group.jsx (starts at line 9004)
src/components/ui/scroll-area.jsx (starts at line 9036)
src/components/ui/section.jsx (starts at line 9077)
src/components/ui/select.jsx (starts at line 9115)
src/components/ui/separator.jsx (starts at line 9238)
src/components/ui/sheet.jsx (starts at line 9264)
src/components/ui/slider.css (starts at line 9374)
src/components/ui/slider.jsx (starts at line 9388)
src/components/ui/switch.jsx (starts at line 9408)
src/components/ui/table.jsx (starts at line 9433)
src/components/ui/textarea.jsx (starts at line 9517)
src/components/ui/toast.jsx (starts at line 9536)
src/components/ui/toaster.jsx (starts at line 9620)
src/data/industries.js (starts at line 9656)
src/hooks/use-toast.js (starts at line 9670)
src/lib/supabase.js (starts at line 9826)
src/lib/utils.js (starts at line 9833)
src/lib/utils.ts (starts at line 9840)
src/lib/extensions/placeholder.js (starts at line 9847)
src/lib/hooks/use-window-size.js (starts at line 9890)
src/styles/editor.css (starts at line 9923)
src/utils/rateLimiter.js (starts at line 9986)

================================================================================

File: .eslintrc.json (starts at line 1)

{
  "extends": "next/core-web-vitals",
  "rules": {
    "react-hooks/exhaustive-deps": "warn",
    "react/no-unescaped-entities": "off"
  }
}



================================================================================

File: README.md (starts at line 9)

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
# docwiz



================================================================================

File: components.json (starts at line 47)

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}


================================================================================

File: db-schema.txt (starts at line 64)

//db schema for claude's reference

[
  {
    "table_name": "api_usage",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "api_usage",
    "foreign_column_name": "id"
  },
  {
    "table_name": "api_usage",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "api_usage",
    "column_name": "registration_id",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "registrations",
    "foreign_column_name": "id"
  },
  {
    "table_name": "api_usage",
    "column_name": "endpoint",
    "ordinal_position": 4,
    "is_nullable": "NO",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "api_usage",
    "column_name": "timestamp",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "api_usage",
    "column_name": "tokens_used",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "integer",
    "character_maximum_length": null,
    "numeric_precision": 32,
    "numeric_scale": 0,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "api_usage",
    "column_name": "cost",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "numeric",
    "character_maximum_length": null,
    "numeric_precision": 10,
    "numeric_scale": 4,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "api_usage",
    "column_name": "request_status",
    "ordinal_position": 8,
    "is_nullable": "NO",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "api_usage",
    "column_name": "error_details",
    "ordinal_position": 9,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "api_usage",
    "column_name": "created_at",
    "ordinal_position": 10,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "registrations",
    "foreign_column_name": "id"
  },
  {
    "table_name": "registrations",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "registrations",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "registrations",
    "column_name": "organization_type",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "domain",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 255,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "description",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "industry",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "entity_name",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 255,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "registration_type",
    "ordinal_position": 8,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "jurisdiction",
    "ordinal_position": 9,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "country_code",
    "ordinal_position": 10,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 10,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "country_name",
    "ordinal_position": 11,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "state_code",
    "ordinal_position": 12,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 10,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "state_name",
    "ordinal_position": 13,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "city_name",
    "ordinal_position": 14,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 100,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "authorized_signatory",
    "ordinal_position": 15,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "signatory_email",
    "ordinal_position": 16,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 255,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "created_at",
    "ordinal_position": 17,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "updated_at",
    "ordinal_position": 18,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "status",
    "ordinal_position": 19,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "registrations",
    "column_name": "stripe_customer_id",
    "ordinal_position": 20,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "subscriptions",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "subscriptions",
    "foreign_column_name": "id"
  },
  {
    "table_name": "subscriptions",
    "column_name": "registration_id",
    "ordinal_position": 2,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "registrations",
    "foreign_column_name": "id"
  },
  {
    "table_name": "subscriptions",
    "column_name": "stripe_subscription_id",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "subscriptions",
    "column_name": "status",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "subscriptions",
    "column_name": "current_period_end",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "subscriptions",
    "column_name": "cancel_at_period_end",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "subscriptions",
    "column_name": "created_at",
    "ordinal_position": 7,
    "is_nullable": "NO",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "templates",
    "foreign_column_name": "id"
  },
  {
    "table_name": "templates",
    "column_name": "created_at",
    "ordinal_position": 2,
    "is_nullable": "NO",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "template_name",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "content",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "ideal_for",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "description",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "is_ai_generated",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "user_id",
    "ordinal_position": 8,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "templates",
    "column_name": "placeholder_values",
    "ordinal_position": 9,
    "is_nullable": "YES",
    "data_type": "jsonb",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "ai_gen_template",
    "ordinal_position": 10,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "is_premium",
    "ordinal_position": 11,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "is_active",
    "ordinal_position": 12,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "templates",
    "column_name": "is_public",
    "ordinal_position": 13,
    "is_nullable": "YES",
    "data_type": "boolean",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "id",
    "ordinal_position": 1,
    "is_nullable": "NO",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "PRIMARY KEY",
    "foreign_table_name": "user_documents",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "user_id",
    "ordinal_position": 2,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "users",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "template_id",
    "ordinal_position": 3,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "templates",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "content",
    "ordinal_position": 4,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "title",
    "ordinal_position": 5,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "created_at",
    "ordinal_position": 6,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "updated_at",
    "ordinal_position": 7,
    "is_nullable": "YES",
    "data_type": "timestamp with time zone",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "registration_id",
    "ordinal_position": 8,
    "is_nullable": "YES",
    "data_type": "uuid",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": "FOREIGN KEY",
    "foreign_table_name": "registrations",
    "foreign_column_name": "id"
  },
  {
    "table_name": "user_documents",
    "column_name": "status",
    "ordinal_position": 9,
    "is_nullable": "YES",
    "data_type": "character varying",
    "character_maximum_length": 50,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "jurisdiction",
    "ordinal_position": 10,
    "is_nullable": "YES",
    "data_type": "text",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "placeholder_values",
    "ordinal_position": 11,
    "is_nullable": "YES",
    "data_type": "jsonb",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "document",
    "ordinal_position": 12,
    "is_nullable": "YES",
    "data_type": "jsonb",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  },
  {
    "table_name": "user_documents",
    "column_name": "signing_tracking",
    "ordinal_position": 13,
    "is_nullable": "YES",
    "data_type": "jsonb",
    "character_maximum_length": null,
    "numeric_precision": null,
    "numeric_scale": null,
    "constraint_type": null,
    "foreign_table_name": null,
    "foreign_column_name": null
  }
]


================================================================================

File: jsconfig.json (starts at line 900)

{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}



================================================================================

File: next.config.js (starts at line 908)

/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: (config) => {
    config.resolve.alias.canvas = false
    config.resolve.alias.encoding = false
    return config
  }
}

module.exports = nextConfig



================================================================================

File: package.json (starts at line 919)

{
  "name": "docwiz",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@react-hook/window-size": "^3.1.1",
    "@stripe/stripe-js": "^5.4.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.47.2",
    "@tiptap/extension-code-block-lowlight": "^2.10.3",
    "@tiptap/extension-link": "^2.10.3",
    "@tiptap/extension-placeholder": "^2.10.3",
    "@tiptap/extension-typography": "^2.10.3",
    "@tiptap/react": "^2.10.3",
    "@tiptap/starter-kit": "^2.10.3",
    "@upstash/ratelimit": "^2.0.5",
    "@upstash/redis": "^1.34.3",
    "@vercel/analytics": "^1.4.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "country-state-city": "^3.2.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.15.0",
    "highlight.js": "^11.10.0",
    "html2pdf.js": "^0.10.2",
    "lowlight": "^3.2.0",
    "lucide-react": "^0.468.0",
    "marked": "^15.0.4",
    "next": "15.0.4",
    "openai": "^4.76.0",
    "pdfjs-dist": "^3.4.120",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.0",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.4.0",
    "react-markdown": "^9.0.1",
    "react-pdf": "^9.2.1",
    "rehype-parse": "^9.0.1",
    "rehype-remark": "^10.0.0",
    "rehype-stringify": "^10.0.1",
    "remark-parse": "^11.0.0",
    "remark-rehype": "^11.1.1",
    "remark-stringify": "^11.0.0",
    "sonner": "^1.7.1",
    "stripe": "^17.5.0",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "tiptap-markdown": "^0.8.10",
    "unified": "^11.0.5",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "eslint": "^8",
    "eslint-config-next": "15.0.4",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}



================================================================================

File: tailwind.config.js (starts at line 1001)

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,jsx}",
    "./components/**/*.{js,jsx}",
    "./app/**/*.{js,jsx}",
    "./src/**/*.{js,jsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#0700C7",
          foreground: "#ffffff",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("@tailwindcss/typography"), require("tailwindcss-animate")],
};



================================================================================

File: public/pdf.worker.min.js (starts at line 1079)

Cannot find "/build/pdf.worker.min.js" in pdfjs-dist@4.8.69


================================================================================

File: src/middleware.js (starts at line 1080)

import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";

export async function middleware(req) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  const {
    data: { session },
  } = await supabase.auth.getSession();

  // If there's no session and the user is trying to access the dashboard
  if (!session && req.nextUrl.pathname.startsWith("/dashboard")) {
    const redirectUrl = new URL("/sign-in", req.url);
    return NextResponse.redirect(redirectUrl);
  }

  return res;
}

export const config = {
  matcher: [
    "/dashboard/:path*",
    "/verify-email",
    "/auth/callback",
    // Don't include /api/signwell/webhook
  ],
};



================================================================================

File: src/app/globals.css (starts at line 1109)

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.ProseMirror p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

.ProseMirror {
  > * + * {
    margin-top: 0.75em;
  }
}

/* Add syntax highlighting styles */
pre {
  background: #0d1117;
  padding: 1rem;
  border-radius: 0.5rem;
}

code {
  color: #c9d1d9;
}

.hljs-comment,
.hljs-quote {
  color: #8b949e;
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag {
  color: #ff7b72;
}

.hljs-string,
.hljs-attr {
  color: #a5d6ff;
}

.hljs-number,
.hljs-literal {
  color: #79c0ff;
}

.hljs-title,
.hljs-class,
.hljs-type {
  color: #d2a8ff;
}


================================================================================

File: src/app/layout.js (starts at line 1230)

import localFont from "next/font/local";
import "./globals.css";
import { Toaster } from "sonner";
import { Analytics } from "@vercel/analytics/react";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
        <Toaster />
        <Analytics />
      </body>
    </html>
  );
}



================================================================================

File: src/app/page.js (starts at line 1265)

import { redirect } from 'next/navigation';

export default function Home() {
  redirect('/dashboard');
}



================================================================================

File: src/app/api/chat/route.js (starts at line 1271)

import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req) {
  try {
    const { messages, documentContent } = await req.json();

    const systemMessage = {
      role: "system",
      content: `You are a helpful assistant analyzing a document. Here's the document content: ${documentContent}
      
      Help the user understand the document, answer questions about it, and suggest improvements when asked.
      If the user asks for changes, explain how the document could be modified to incorporate their suggestions.`,
    };

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [systemMessage, ...messages],
      temperature: 0.7,
    });

    return NextResponse.json({ message: response.choices[0].message.content });
  } catch (error) {
    console.error("Chat API error:", error);
    return NextResponse.json(
      { error: "Failed to process chat request" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/check-email/route.js (starts at line 1306)

import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY, // Use service role key for admin access
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
  }
);

export async function POST(request) {
  try {
    const { email } = await request.json();

    // Check if the email exists in auth.users
    const { data: user, error: userError } =
      await supabase.auth.admin.listUsers();

    if (userError) {
      console.error("Error checking user:", userError);
      return NextResponse.json(
        { error: "Internal server error" },
        { status: 500 }
      );
    }

    const existingUser = user.users.find((u) => u.email === email);

    if (existingUser) {
      return NextResponse.json(
        { error: "Email already registered" },
        { status: 400 }
      );
    }

    return NextResponse.json({ message: "Email available" });
  } catch (error) {
    console.error("Server error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/create-billing-portal/route.js (starts at line 1355)

import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function POST() {
  try {
    const supabase = createRouteHandlerClient({ cookies });

    // Get user from auth header
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError) throw new Error('Not authenticated');

    // Get registration record with stripe_customer_id and id
    const { data: registration, error: registrationError } = await supabase
      .from('registrations')
      .select('id, stripe_customer_id')
      .eq('user_id', user.id)
      .single();

    if (registrationError) {
      console.error('Registration error:', registrationError);
      throw new Error('Registration not found');
    }

    console.log('Found registration:', registration);

    // If no Stripe customer exists, create one
    if (!registration.stripe_customer_id) {
      const customer = await stripe.customers.create({
        email: user.email,
        metadata: {
          registration_id: registration.id,
          user_id: user.id
        }
      });

      console.log('Created Stripe customer:', customer.id);

      // Update registration with new stripe_customer_id
      const { error: updateError } = await supabase
        .from('registrations')
        .update({ 
          stripe_customer_id: customer.id,
          updated_at: new Date().toISOString()
        })
        .eq('id', registration.id)
        .select();

      if (updateError) {
        console.error('Update error:', updateError);
        throw new Error(`Failed to update registration: ${updateError.message}`);
      }
      
      registration.stripe_customer_id = customer.id;
    }

    // Create billing portal session
    const session = await stripe.billingPortal.sessions.create({
      customer: registration.stripe_customer_id,
      return_url: `${process.env.NEXT_PUBLIC_SITE_URL}/dashboard`,
    });

    return Response.json({ session_url: session.url });
  } catch (error) {
    console.error('Full error:', error);
    return Response.json({ 
      error: error.message,
      details: error.stack 
    }, { status: 400 });
  }
}



================================================================================

File: src/app/api/create-checkout-session/route.js (starts at line 1429)

import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// Default to localhost if NEXT_PUBLIC_SITE_URL is not set
const APP_URL = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";

export async function POST(req) {
  try {
    const { priceId, customerId } = await req.json();

    if (!priceId || !customerId) {
      return NextResponse.json(
        { error: "Missing required parameters" },
        { status: 400 }
      );
    }

    console.log("Creating checkout session with:", {
      priceId,
      customerId,
    });

    const checkoutSession = await stripe.checkout.sessions.create({
      mode: "subscription",
      payment_method_types: ["card"],
      customer: customerId,
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      success_url: `${APP_URL}/dashboard?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${APP_URL}/pricing`,
    });

    return NextResponse.json({ sessionId: checkoutSession.id });
  } catch (error) {
    console.error("Error creating checkout session:", error);
    return NextResponse.json(
      {
        error: "Error creating checkout session",
        details: error.message,
        code: error.code,
      },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/create-stripe-customer/route.js (starts at line 1483)

import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function POST(req) {
  try {
    const supabase = createRouteHandlerClient({ cookies });
    const { email, userId } = await req.json();

    // Verify the user is authenticated
    const {
      data: { session },
    } = await supabase.auth.getSession();
    if (!session || session.user.id !== userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Create Stripe customer
    const customer = await stripe.customers.create({
      email,
      metadata: {
        userId: userId,
      },
    });

    return NextResponse.json({ customerId: customer.id });
  } catch (error) {
    console.error("Error creating Stripe customer:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/generate-agreement/route.js (starts at line 1521)

import OpenAI from "openai";
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import { checkRateLimit, trackAPIUsage } from "@/utils/rateLimiter";

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize Supabase with service role key
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    db: {
      schema: "public",
    },
  }
);

export async function POST(req) {
  try {
    const { prompt, userId, jurisdiction, complexity, length } =
      await req.json();

    // Check rate limits
    const rateLimit = await checkRateLimit(userId);
    if (!rateLimit.success) {
      return NextResponse.json(
        {
          error: "Rate limit exceeded",
          message: "Rate limit exceeded",
          details: "Too many requests. Please try again later.",
          resetIn: rateLimit.resetIn || 3600, // Default to 1 hour if not provided
        },
        { status: 429 }
      );
    }

    if (!userId || !jurisdiction) {
      return NextResponse.json(
        { error: "User ID and jurisdiction are required" },
        { status: 400 }
      );
    }

    // Define word count ranges based on length parameter
    const wordCountRanges = {
      1: { min: 300, max: 500 },
      2: { min: 600, max: 1000 },
      3: { min: 1200, max: 2000 },
      4: { min: 2500, max: 3500 },
      5: { min: 4000, max: 6000 },
    };

    // Define complexity descriptions
    const complexityLevels = {
      1: "Use simple, everyday language with minimal legal terms.",
      2: "Use basic legal terms with clear explanations.",
      3: "Use standard legal language balanced with clarity.",
      4: "Use detailed legal terminology with proper context.",
      5: "Use comprehensive legal language with technical precision.",
    };

    const completion = await openai.chat.completions.create({
      model: "chatgpt-4o-latest",
      messages: [
        {
          role: "system",
          content: `You are a legal document generator. You must respond with valid JSON only. Your response must contain two primary objects:

1. **Document Details**:
   - "title" (string): A concise name for the document.
   - "description" (string): A brief explanation of the document's purpose.
   - "content" (string): The main body of the document written in Markdown format. Include placeholders for dynamic fields in the format "{{PLACEHOLDER_NAME}}" where appropriate. DO NOT include any signature blocks or signature sections at the end of the document as these will be handled separately.
   - "isLegal" (boolean): Indicate whether the requested agreement is legal in the specified jurisdiction.
   - "legalityNotes" (string): Optional explanation if the agreement is not legal.

2. **Placeholders**:
   - A list of all placeholders used in the "content" field. Each placeholder must be represented as an object with:
      - "name" (string): The exact name of the placeholder (e.g., "PLACEHOLDER_NAME").
      - "description" (string): A brief description of the purpose or meaning of the placeholder.
      - "format" (object): Specifies the input format with properties:
         - "type": One of "text", "date", "currency", "number", "email", "phone".
         - "currency": Required if type is "currency", specify "USD" or "INR" based on jurisdiction.
         - "pattern": Optional regex pattern for validation.
      - "signer" (boolean): **Optional**, include only if the placeholder represents a signing party's name.

Important: Do not include any signature blocks, signature lines, or signature sections in the document content. These will be handled separately by the system.

The output must be valid JSON and strictly adhere to the described format.

Additional Requirements:
- The document should be between ${wordCountRanges[length].min} and ${wordCountRanges[length].max} words.
- Complexity Level: ${complexityLevels[complexity]}`,
        },
        {
          role: "user",
          content: `Generate a legal agreement for the following jurisdiction: ${jurisdiction}. Request: ${prompt}`,
        },
      ],
      temperature: 0.3,
    });

    // Track API usage
    await trackAPIUsage({
      userId,
      endpoint: "generate-agreement",
      tokensUsed: completion.usage?.total_tokens || 0,
      cost: (completion.usage?.total_tokens || 0) * 0.00002, // Approximate cost calculation
      registrationId: null, // Add if available
    });

    const response = completion.choices[0].message.content;
    let parsedResponse;

    try {
      const cleanedResponse = response
        .trim()
        .replace(/[\n\r]/g, " ")
        .replace(/^```json\s*|\s*```$/g, "");
      parsedResponse = JSON.parse(cleanedResponse);

      // Try both formats: "Document Details" and "DocumentDetails"
      const documentDetails =
        parsedResponse["Document Details"] || parsedResponse["DocumentDetails"];
      const placeholders = parsedResponse["Placeholders"];

      if (!documentDetails || !placeholders) {
        throw new Error("Missing DocumentDetails or Placeholders");
      }

      // Initialize placeholder values with empty values
      const placeholderValues = placeholders.map((placeholder) => ({
        ...placeholder,
        value: "",
      }));

      // Insert the new document
      const { data: document, error } = await supabase
        .from("user_documents")
        .insert([
          {
            user_id: userId,
            title: documentDetails.title,
            content: documentDetails.content,
            placeholder_values: placeholderValues,
            status: "draft",
          },
        ])
        .select()
        .single();

      if (error) {
        console.error("Database error:", error);
        return NextResponse.json(
          {
            error: "Failed to save document",
            details: error.message,
          },
          { status: 500 }
        );
      }

      // Check if the agreement is legal before proceeding
      if (documentDetails.isLegal === false) {
        return NextResponse.json(
          {
            isLegal: false,
            legalityNotes:
              documentDetails.legalityNotes ||
              "This agreement is not legal in the specified jurisdiction.",
          },
          { status: 422 }
        );
      }

      return NextResponse.json({
        id: document.id,
        title: documentDetails.title,
        description: documentDetails.description,
        content: documentDetails.content,
        placeholder_values: placeholderValues,
        isLegal: documentDetails.isLegal ?? true,
      });
    } catch (error) {
      console.error("JSON parsing error:", error, "Raw response:", response);
      return NextResponse.json(
        { error: "Invalid response format from AI" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json(
      {
        error: "Failed to generate agreement",
        details: error.message,
      },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/generate-templates/route.js (starts at line 1726)

import OpenAI from "openai";
import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize Supabase with service role key
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    db: {
      schema: "public",
    },
  }
);

const API_PASSWORD = "your_secure_password_here"; // Replace with your password

export async function POST(req) {
  try {
    const { password, templates } = await req.json();

    // Verify password
    if (password !== API_PASSWORD) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Validate request body
    if (!Array.isArray(templates)) {
      return NextResponse.json(
        { error: "Templates must be an array" },
        { status: 400 }
      );
    }

    const results = [];

    // Process each template request
    for (const template of templates) {
      const { prompt, complexity, length } = template;

      if (!prompt) {
        results.push({
          error: "Document name (prompt) is required",
          template,
        });
        continue;
      }

      // Define word count ranges based on length parameter
      const wordCountRanges = {
        1: { min: 300, max: 500 },
        2: { min: 600, max: 1000 },
        3: { min: 1200, max: 2000 },
        4: { min: 2500, max: 3500 },
        5: { min: 4000, max: 6000 },
      };

      // Define complexity descriptions
      const complexityLevels = {
        1: "Use simple, everyday language with minimal legal terms.",
        2: "Use basic legal terms with clear explanations.",
        3: "Use standard legal language balanced with clarity.",
        4: "Use detailed legal terminology with proper context.",
        5: "Use comprehensive legal language with technical precision.",
      };

      try {
        const completion = await openai.chat.completions.create({
          model: "chatgpt-4o-latest",
          messages: [
            {
              role: "system",
              content: `You are a legal document template generator. You must respond with valid JSON only. Your response must contain two primary objects:

1. **Document Details** (use key "Document Details" with a space):
   - "title" (string): A concise name for the template
   - "description" (string): A single-sentence brief explanation of the template's purpose (max 100 characters)
   - "ideal_for" (array): Array of target users from these options only: ["Individuals", "Startups", "SMBs", "Enterprises", "General"]
   - "content" (string): The main body of the template in Markdown format. Always use {{JURISDICTION}} as a placeholder and include other generic placeholders like {{CURRENCY}}, {{COMPANY_NAME}}, {{EFFECTIVE_DATE}}, etc.

2. **Placeholders**:
   - A list of all placeholders used in the "content" field. Each placeholder must be represented as an object with:
      - "name" (string): The exact name of the placeholder (e.g., "JURISDICTION")
      - "description" (string): A brief description of what this placeholder represents
      - "format" (object): Specifies the input format with properties:
         - "type": One of "text", "date", "currency", "number", "email", "phone"
         - "currency": Required if type is "currency"
         - "pattern": Optional regex pattern for validation
      - "signer" (boolean): **Optional**, include only if the placeholder represents a signing party's name

Important: Do not include any signature blocks, signature lines, or signature sections in the document content. These will be handled separately by the system.

Note: Always include JURISDICTION as a required placeholder.

The document should be between ${wordCountRanges[length || 3].min} and ${wordCountRanges[length || 3].max} words.
Complexity Level: ${complexityLevels[complexity || 3]}`,
            },
            {
              role: "user",
              content: `Generate a template for: ${prompt}`,
            },
          ],
          temperature: 0.3,
        });

        console.log("OpenAI response received"); // Debug log

        const response = completion.choices[0].message.content;
        const cleanedResponse = response
          .trim()
          .replace(/[\n\r]/g, " ")
          .replace(/^```json\s*|\s*```$/g, "");

        console.log("Cleaned response:", cleanedResponse); // Debug log

        const parsedResponse = JSON.parse(cleanedResponse);

        console.log("Parsed response:", parsedResponse); // Debug log

        // Insert template into database
        const { data: insertedTemplate, error: insertError } = await supabase
          .from("templates")
          .insert([
            {
              template_name: parsedResponse["Document Details"].title,
              ideal_for: parsedResponse["Document Details"].ideal_for,
              description: parsedResponse["Document Details"].description,
              content: parsedResponse["Document Details"].content,
              placeholder_values: parsedResponse["Placeholders"],
              ai_gen_template: true,
              is_active: true,
              is_public: true,
            },
          ])
          .select()
          .single();

        if (insertError) {
          console.error("Database insertion error:", insertError); // Debug log
          throw insertError;
        }

        console.log("Template inserted successfully:", insertedTemplate); // Debug log

        results.push({
          success: true,
          template: insertedTemplate,
        });
      } catch (error) {
        console.error("Error processing template:", error); // Debug log
        results.push({
          error: error.message,
          template,
        });
      }
    }

    return NextResponse.json({
      results,
    });
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json(
      {
        error: "Failed to generate templates",
        details: error.message,
      },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/improve-formatting/route.js (starts at line 1903)

import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request) {
  try {
    const { content } = await request.json();

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content:
            "You are a markdown formatting expert. Your task is to improve the formatting of the provided markdown content without changing any of the actual content. Focus on proper heading hierarchy, consistent spacing, and professional markdown structure. Don't add any new content or formal message to acknowledge the request, just improve the formatting.",
        },
        {
          role: "user",
          content: content,
        },
      ],
      temperature: 0.3,
    });

    const formattedContent = response.choices[0].message.content;

    return NextResponse.json({ formattedContent });
  } catch (error) {
    console.error("Error in improve-formatting:", error);
    return NextResponse.json(
      { error: "Failed to improve formatting" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/improve-text/route.js (starts at line 1942)

import OpenAI from "openai";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req) {
  try {
    const { selectedText, fullDocument, prompt } = await req.json();

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content:
            "You are an expert in improving legal documents while maintaining their legal validity and professional tone.",
        },
        {
          role: "user",
          content: `I have a legal document with the following selected section:

---
${selectedText}
---

Full document context:
${fullDocument}

Please improve this section based on this request: ${prompt}

Return only the improved section, maintaining proper formatting and ensuring it fits seamlessly into the document. Dont mention anything other than the text you are improving. Return the text in MD format.`,
        },
      ],
    });

    return NextResponse.json({
      improvedText: completion.choices[0].message.content.trim(),
    });
  } catch (error) {
    console.error("Error improving text:", error);
    return NextResponse.json(
      { error: "Failed to improve text" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/places/autocomplete/route.js (starts at line 1991)

import { NextResponse } from "next/server";

export async function GET(request) {
  const { searchParams } = new URL(request.url);
  const input = searchParams.get("input");

  try {
    const response = await fetch(
      `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${input}&types=(cities)&key=${process.env.GOOGLE_MAPS_API_KEY}`
    );

    const data = await response.json();
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}



================================================================================

File: src/app/api/signwell/create-document/route.js (starts at line 2009)

import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    const body = await request.json();
    const { fileUrl, documentName, signers } = body;

    // Log the request for debugging
    console.log("SignWell Request:", {
      fileUrl,
      documentName,
      signers,
    });

    // Log the full signers data to debug fields
    console.log("Signers with fields:", JSON.stringify(signers, null, 2));

    console.log("Received signers:", signers);

    // Before creating signwellPayload, validate fields
    let hasValidFields = false;
    signers.forEach((signer, index) => {
      if (
        !signer.fields ||
        !Array.isArray(signer.fields) ||
        signer.fields.length === 0
      ) {
        console.warn(
          `Warning: No valid fields found for signer ${index + 1}:`,
          signer
        );
      } else {
        // Validate each field has required properties
        const validFieldsExist = signer.fields.every(
          (field) =>
            field.page &&
            typeof field.x === "number" &&
            typeof field.y === "number"
        );
        if (validFieldsExist) {
          hasValidFields = true;
          console.log(
            `Valid fields found for signer ${index + 1}:`,
            signer.fields
          );
        } else {
          console.warn(
            `Invalid field format for signer ${index + 1}:`,
            signer.fields
          );
        }
      }
    });

    if (!hasValidFields) {
      throw new Error(
        "At least one signer must have valid signature fields with page, x, and y coordinates"
      );
    }

    const signwellPayload = {
      test_mode: true,
      files: [
        {
          file_url: fileUrl,
          name: `${documentName}.pdf`,
        },
      ],
      name: documentName,
      subject: documentName,
      message: "Please sign this document",
      recipients: signers.map((signer, index) => ({
        id: `recipient_${index + 1}`,
        name: signer.name,
        email: signer.email,
        order: index + 1,
        role: "signer",
        message: "Please sign this document",
      })),
      draft: false,
      reminders: true,
      apply_signing_order: false,
      embedded_signing: false,
      embedded_signing_notifications: false,
      text_tags: false,
      allow_decline: true,
      allow_reassign: true,
      with_signature_page: true,
    };

    // Log the final payload for verification
    console.log(
      "Final SignWell Payload:",
      JSON.stringify(signwellPayload, null, 2)
    );

    // Right before the fetch call
    console.log("Final stringified payload:", JSON.stringify(signwellPayload));

    const response = await fetch("https://www.signwell.com/api/v1/documents/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Api-Key": process.env.SIGNWELL_API_KEY,
      },
      body: JSON.stringify(signwellPayload),
    });

    const data = await response.json();

    // Log the SignWell response
    console.log("SignWell Response:", data);

    if (!response.ok) {
      // Extract and format detailed error messages
      const errorMessages = [];
      if (data.errors) {
        Object.entries(data.errors).forEach(([category, errors]) => {
          Object.entries(errors).forEach(([key, messages]) => {
            errorMessages.push(
              `${category} (${key}): ${JSON.stringify(messages)}`
            );
          });
        });
      }
      throw new Error(
        `SignWell API error: ${errorMessages.length ? errorMessages.join("; ") : "Unknown error"}`
      );
    }

    return NextResponse.json(data);
  } catch (error) {
    console.error("SignWell API error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to create document" },
      { status: 500 }
    );
  }
}



================================================================================

File: src/app/api/webhooks/signwell/route.js (starts at line 2149)

import { createClient } from "@supabase/supabase-js";
import { NextResponse } from "next/server";

// Create a Supabase client without auth
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY // Use service role key for admin access
);

// Add GET method for webhook verification
export async function GET(request) {
  return NextResponse.json({ status: "ok" });
}

export async function POST(request) {
  console.log("Webhook received:", new Date().toISOString());
  try {
    // 1. Get webhook data first
    const webhookData = await request.json();
    console.log("Webhook data:", webhookData);

    const { event, data } = webhookData;
    const documentId = data.object.id;

    // 2. Find the document using the SignWell ID
    const { data: userDocument, error: fetchError } = await supabase
      .from("user_documents")
      .select("*")
      .eq("document->>signwellId", documentId)
      .single();

    if (fetchError) {
      console.error("Error fetching document:", fetchError);
      return NextResponse.json(
        { error: "Document not found" },
        { status: 404 }
      );
    }

    // Prepare the signing tracking entry
    const trackingEntry = {
      event_type: event.type,
      timestamp: new Date(event.time * 1000).toISOString(),
      signer: event.related_signer || null,
      event_data: data.object,
    };

    // Update document status based on event type
    let documentStatus = userDocument.document.documentStatus;
    let signers = userDocument.document.signers;

    switch (event.type) {
      case "document_viewed":
        // Update signer status when document is viewed
        if (event.related_signer) {
          signers = signers.map((signer) =>
            signer.email === event.related_signer.email
              ? { ...signer, status: "viewed" }
              : signer
          );
        }
        break;

      case "document_signed":
        // Update individual signer status
        if (event.related_signer) {
          signers = signers.map((signer) =>
            signer.email === event.related_signer.email
              ? { ...signer, status: "signed" }
              : signer
          );
        }
        break;

      case "document_completed":
        documentStatus = "completed";
        signers = signers.map((signer) => ({ ...signer, status: "signed" }));

        // Fetch the completed PDF
        const response = await fetch(
          `https://www.signwell.com/api/v1/documents/${documentId}/completed_pdf/`,
          {
            headers: {
              "X-Api-Key": process.env.SIGNWELL_API_KEY,
            },
          }
        );

        if (response.ok) {
          const pdfBlob = await response.blob();
          const fileName = `agreements/${userDocument.id}/signed_${Date.now()}.pdf`;

          // Upload to Supabase Storage
          const { data: uploadData, error: uploadError } =
            await supabase.storage.from("documents").upload(fileName, pdfBlob, {
              contentType: "application/pdf",
            });

          if (!uploadError) {
            const {
              data: { publicUrl },
            } = supabase.storage.from("documents").getPublicUrl(fileName);

            // Add signed PDF URL to document data
            userDocument.document.signedPdfUrl = publicUrl;
          }
        }
        break;

      case "document_declined":
        documentStatus = "declined";
        if (event.related_signer) {
          signers = signers.map((signer) =>
            signer.email === event.related_signer.email
              ? { ...signer, status: "declined" }
              : signer
          );
        }
        break;

      case "document_expired":
        documentStatus = "expired";
        break;

      case "document_canceled":
        documentStatus = "canceled";
        break;
    }

    // Update the user document with new status and tracking information
    const { error: updateError } = await supabase
      .from("user_documents")
      .update({
        status: documentStatus,
        document: {
          ...userDocument.document,
          documentStatus,
          signers,
          lastUpdated: new Date().toISOString(),
        },
        signing_tracking: [
          ...(userDocument.signing_tracking || []),
          trackingEntry,
        ],
      })
      .eq("id", userDocument.id);

    if (updateError) {
      console.error("Error updating document:", updateError);
      return NextResponse.json({ error: "Update failed" }, { status: 500 });
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Webhook error:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}



================================================================================

File: src/app/api/webhooks/stripe/route.js (starts at line 2308)

import { headers } from "next/headers";
import Stripe from "stripe";
import { createClient } from "@supabase/supabase-js";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
  }
);

export async function POST(req) {
  const body = await req.text();
  const sig = headers().get("stripe-signature");

  let event;

  try {
    event = stripe.webhooks.constructEvent(body, sig, endpointSecret);
  } catch (err) {
    return Response.json(
      { error: `Webhook Error: ${err.message}` },
      { status: 400 }
    );
  }

  try {
    switch (event.type) {
      case "customer.subscription.created":
        const newSubscription = event.data.object;

        // Get registration from customer metadata
        const { data: registration, error: registrationError } = await supabase
          .from("registrations")
          .select("id")
          .eq("stripe_customer_id", newSubscription.customer)
          .single();

        if (registrationError || !registration) {
          console.error("Registration lookup error:", registrationError);
          throw new Error(
            "Registration not found for customer: " + newSubscription.customer
          );
        }

        // Create new subscription record
        const { error: insertError } = await supabase
          .from("subscriptions")
          .insert({
            registration_id: registration.id,
            stripe_subscription_id: newSubscription.id,
            status: newSubscription.status,
            current_period_end: new Date(
              newSubscription.current_period_end * 1000
            ),
            cancel_at_period_end: newSubscription.cancel_at_period_end,
            created_at: new Date(),
          });

        if (insertError) {
          console.error("Subscription insert error:", insertError);
          throw new Error("Failed to create subscription record");
        }
        break;

      case "customer.subscription.updated":
      case "customer.subscription.deleted":
        const subscription = event.data.object;

        // Get registration from customer metadata
        const { data: existingRegistration, error: lookupError } =
          await supabase
            .from("registrations")
            .select("id")
            .eq("stripe_customer_id", subscription.customer)
            .single();

        if (lookupError || !existingRegistration) {
          console.error("Registration lookup error:", lookupError);
          throw new Error(
            "Registration not found for customer: " + subscription.customer
          );
        }

        // Update subscription in database
        const { error: updateError } = await supabase
          .from("subscriptions")
          .update({
            status: subscription.status,
            current_period_end: new Date(
              subscription.current_period_end * 1000
            ),
            cancel_at_period_end: subscription.cancel_at_period_end,
          })
          .eq("registration_id", existingRegistration.id);

        if (updateError) {
          console.error("Subscription update error:", updateError);
          throw new Error("Failed to update subscription record");
        }
        break;
    }

    return Response.json({ received: true });
  } catch (error) {
    console.error("Error processing webhook:", error);
    return Response.json(
      {
        error: error.message,
        details: error.details || "No additional details",
      },
      { status: 400 }
    );
  }
}



================================================================================

File: src/app/auth/callback/route.js (starts at line 2431)

import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";

export async function GET(request) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");
  const next = requestUrl.searchParams.get("next") || "/dashboard";

  if (code) {
    const supabase = createRouteHandlerClient({ cookies });
    await supabase.auth.exchangeCodeForSession(code);

    // After exchanging the code, check if this was an email verification
    const {
      data: { session },
    } = await supabase.auth.getSession();

    if (session?.user?.email_confirmed_at) {
      // If email is verified, redirect to dashboard
      return NextResponse.redirect(new URL("/dashboard", request.url));
    }
  }

  // For other auth callbacks, redirect to the next URL
  return NextResponse.redirect(new URL(next, request.url));
}



================================================================================

File: src/app/components/BusinessDetailsStep.js (starts at line 2459)

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

const industries = [
  "Technology",
  "Finance",
  "Healthcare",
  "Education",
  "Retail",
  "Other",
];

export default function BusinessDetailsStep({ onNext, registrationId }) {
  const supabase = createClientComponentClient();
  const [domain, setDomain] = useState("");
  const [description, setDescription] = useState("");
  const [industry, setIndustry] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      console.log("Updating registration:", registrationId, {
        domain,
        description,
        industry,
      });

      if (!registrationId) {
        throw new Error("Registration ID is missing");
      }

      const { error } = await supabase
        .from("registrations")
        .update({
          domain,
          description,
          industry,
          updated_at: new Date().toISOString(),
        })
        .eq("id", registrationId);

      if (error) throw error;
      onNext({ domain, description, industry });
    } catch (error) {
      console.error("Failed to update business details:", error);
      // You might want to add error handling UI here
    }
  };

  const fetchData = () => {
    setDescription(
      "This is a pre-filled business description based on the fetched data."
    );
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="domain">Business Domain</Label>
        <div className="flex space-x-2">
          <Input
            id="domain"
            placeholder="Enter business domain"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
            required
          />
          <Button type="button" onClick={fetchData}>
            Fetch Data
          </Button>
        </div>
      </div>
      <div className="space-y-2">
        <Label htmlFor="description">Business Description</Label>
        <Textarea
          id="description"
          placeholder="Enter business description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="industry">Industry</Label>
        <Select onValueChange={setIndustry} required>
          <SelectTrigger>
            <SelectValue placeholder="Select industry" />
          </SelectTrigger>
          <SelectContent>
            {industries.map((ind) => (
              <SelectItem key={ind} value={ind}>
                {ind}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Button type="submit" className="w-full">
        Next
      </Button>
    </form>
  );
}



================================================================================

File: src/app/components/EntityDetailsStep.js (starts at line 2574)

import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Info } from "lucide-react";
import { Country, State, City } from "country-state-city";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useRouter } from "next/navigation";
import { toast } from "react-hot-toast";

const registrationTypes = [
  "LLC",
  "Sole Proprietor",
  "Corporation",
  "Partnership",
  "Other",
];

export default function EntityDetailsStep({ onNext, registrationId }) {
  const supabase = createClientComponentClient();
  const router = useRouter();
  const [entityName, setEntityName] = useState("");
  const [registrationType, setRegistrationType] = useState("");
  const [country, setCountry] = useState("");
  const [state, setState] = useState("");
  const [city, setCity] = useState("");
  const [countries, setCountries] = useState([]);
  const [states, setStates] = useState([]);
  const [cities, setCities] = useState([]);
  const [authorizedSignatory, setAuthorizedSignatory] = useState("me");
  const [signatoryEmail, setSignatoryEmail] = useState("");

  useEffect(() => {
    setCountries(Country.getAllCountries());
  }, []);

  useEffect(() => {
    if (country) {
      setStates(State.getStatesOfCountry(country.isoCode));
      setState("");
      setCity("");
    }
  }, [country]);

  useEffect(() => {
    if (state) {
      setCities(City.getCitiesOfState(country.isoCode, state.isoCode));
      setCity("");
    }
  }, [state, country]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const { error } = await supabase
        .from("registrations")
        .update({
          entity_name: entityName,
          registration_type: registrationType,
          country_code: country.isoCode,
          country_name: country.name,
          state_code: state?.isoCode || null,
          state_name: state?.name || null,
          city_name: city?.name || null,
          authorized_signatory: authorizedSignatory,
          signatory_email:
            authorizedSignatory === "someone_else" ? signatoryEmail : null,
          updated_at: new Date().toISOString(),
        })
        .eq("id", registrationId);

      if (error) throw error;

      // Check email verification status
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user?.email_confirmed_at) {
        // If email is not verified, redirect to verify email page
        router.push("/verify-email");
      } else {
        // If email is verified, proceed to dashboard
        router.push("/dashboard");
      }

      onNext({
        entityName,
        registrationType,
        jurisdiction: {
          country: country.name,
          state: state?.name || "",
          city: city?.name || "",
        },
        authorizedSignatory,
        signatoryEmail,
      });

    } catch (error) {
      console.error("Error updating registration:", error);
      toast.error("Failed to update registration details");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="entityName">Entity Name</Label>
        <Input
          id="entityName"
          placeholder="Enter entity name"
          value={entityName}
          onChange={(e) => setEntityName(e.target.value)}
          required
        />
      </div>
      <div className="space-y-2">
        <Label htmlFor="registrationType">Registration Type</Label>
        <Select onValueChange={setRegistrationType} required>
          <SelectTrigger>
            <SelectValue placeholder="Select registration type" />
          </SelectTrigger>
          <SelectContent>
            {registrationTypes.map((type) => (
              <SelectItem key={type} value={type}>
                {type}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <div className="space-y-2">
        <Label htmlFor="country">Country</Label>
        <Select
          onValueChange={(value) =>
            setCountry(countries.find((c) => c.isoCode === value))
          }
          required
        >
          <SelectTrigger>
            <SelectValue placeholder="Select country" />
          </SelectTrigger>
          <SelectContent>
            {countries.map((country) => (
              <SelectItem key={country.isoCode} value={country.isoCode}>
                {country.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {country && states.length > 0 && (
        <div className="space-y-2">
          <Label htmlFor="state">State/Province</Label>
          <Select
            onValueChange={(value) =>
              setState(states.find((s) => s.isoCode === value))
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select state/province" />
            </SelectTrigger>
            <SelectContent>
              {states.map((state) => (
                <SelectItem key={state.isoCode} value={state.isoCode}>
                  {state.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}

      {state && cities.length > 0 && (
        <div className="space-y-2">
          <Label htmlFor="city">City</Label>
          <Select
            onValueChange={(value) =>
              setCity(cities.find((c) => c.name === value))
            }
          >
            <SelectTrigger>
              <SelectValue placeholder="Select city" />
            </SelectTrigger>
            <SelectContent>
              {cities.map((city) => (
                <SelectItem key={city.name} value={city.name}>
                  {city.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      )}

      <Alert>
        <Info className="h-4 w-4" />
        <AlertDescription>
          Selecting the correct jurisdiction is crucial for ensuring the
          validity of your documents and compliance with local regulations.
        </AlertDescription>
      </Alert>

      <div className="space-y-2">
        <Label>Authorized Signatory</Label>
        <RadioGroup
          value={authorizedSignatory}
          onValueChange={setAuthorizedSignatory}
        >
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="me" id="me" />
            <Label htmlFor="me">Me</Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="someone_else" id="someone_else" />
            <Label htmlFor="someone_else">Someone Else</Label>
          </div>
        </RadioGroup>
      </div>
      {authorizedSignatory === "someone_else" && (
        <div className="space-y-2">
          <Label htmlFor="signatoryEmail">Signatory Email</Label>
          <Input
            id="signatoryEmail"
            type="email"
            placeholder="Enter signatory email"
            value={signatoryEmail}
            onChange={(e) => setSignatoryEmail(e.target.value)}
            required
          />
        </div>
      )}
      <Button type="submit" className="w-full">
        Next
      </Button>
    </form>
  );
}



================================================================================

File: src/app/components/OrganizationTypeStep.js (starts at line 2822)

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Building, Briefcase, Users, User } from "lucide-react";
import { useCallback } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

const organizationTypes = [
  {
    type: "Individual",
    icon: User,
    description: "Perfect lancers and solo entrepreneurs",
  },
  {
    type: "SMB",
    icon: Briefcase,
    description: "Ideal for small and medium-sized businesses",
  },
  {
    type: "Startup",
    icon: Users,
    description: "Built for fast-growing companies and teams",
  },
  {
    type: "Enterprise",
    icon: Building,
    description: "Designed for large organizations with complex needs",
  },
];

export default function OrganizationTypeStep({ onNext, registrationId }) {
  const supabase = createClientComponentClient();

  console.log("OrganizationTypeStep registrationId:", registrationId); // Debug log

  const handleSelection = useCallback(
    async (type) => {
      try {
        console.log("Updating registration:", registrationId, type); // Debug log

        if (!registrationId) {
          throw new Error("Registration ID is missing");
        }

        const { error } = await supabase
          .from("registrations")
          .update({ organization_type: type })
          .eq("id", registrationId);

        if (error) throw error;
        onNext({ organizationType: type });
      } catch (error) {
        console.error("Failed to update organization type:", error);
        // You might want to add error handling UI here
      }
    },
    [registrationId, onNext, supabase]
  );

  return (
    <div className="grid grid-cols-2 gap-4">
      {organizationTypes.map(({ type, icon: Icon, description }) => (
        <Card
          key={type}
          className="cursor-pointer hover:bg-gray-100"
          onClick={() => handleSelection(type)}
        >
          <CardContent className="flex flex-col items-center justify-center p-6">
            <Icon className="w-12 h-12 mb-2" />
            <span className="font-medium">{type}</span>
            <p className="text-sm text-gray-500 text-center mt-1">
              {description}
            </p>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}



================================================================================

File: src/app/components/SignupStep.js (starts at line 2901)

import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { supabase } from "@/lib/supabase";
import { toast } from "sonner";
import Image from "next/image";

export default function SignupStep({ onNext, onError }) {
  const [loading, setLoading] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);

      // First check if the email exists
      const {
        data: { users },
        error: signInError,
      } = await supabase.auth.signInWithOtp({
        email,
        options: {
          shouldCreateUser: false, // This prevents creating a new user
        },
      });

      // If no error, it means the email exists
      if (!signInError) {
        onError(
          "This email is already registered. We've sent you a magic link to sign in. Check your email inbox."
        );
        return;
      }

      // Proceed with signup if email doesn't exist
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: { full_name: name },
        },
      });

      if (authError) throw authError;

      // Only proceed with registration if user creation was successful
      const { data: registration, error: registrationError } = await supabase
        .from("registrations")
        .insert([
          {
            user_id: authData.user.id,
            status: "pending",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
        ])
        .select()
        .single();

      if (registrationError) throw registrationError;

      // Progress to next step
      onNext({
        name,
        email,
        registrationId: registration.id,
        userId: authData.user.id,
      });

      toast.success("Please check your email to verify your account.");
    } catch (error) {
      onError(error.message || "Error during signup");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-center mb-6">
        <Image
          src="/logo.png"
          alt="DocWiz Logo"
          width={200}
          height={60}
          priority
        />
      </div>
      <h1 className="text-2xl font-semibold text-center mb-6">Signup</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <Button type="submit" disabled={loading} className="w-full">
          {loading ? "Loading..." : "Sign Up with Email"}
        </Button>
      </form>
    </div>
  );
}



================================================================================

File: src/app/dashboard/page.js (starts at line 3035)

"use client";

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { NewAgreementForm } from "@/components/NewAgreementForm";
import { Input } from "@/components/ui/input";
import { useRouter } from "next/navigation";
import {
  formatDistanceToNow,
  isToday,
  isYesterday,
  format,
  isThisWeek,
  isThisYear,
} from "date-fns";
import Image from "next/image";
import { Wand2 } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { UserCircle } from "lucide-react";
import { Loader2 } from "lucide-react";

const STATUS_FILTERS = [
  { value: "all", label: "All" },
  { value: "draft", label: "Draft" },
  { value: "pending_signature", label: "Pending Signature" },
  { value: "completed", label: "Completed" },
];

// Define PartiesDialog as a separate component
const PartiesDialog = ({
  open,
  onOpenChange,
  parties,
  searchQuery,
  onSearchChange,
  formatRelativeTime,
  router,
}) => (
  <Dialog open={open} onOpenChange={onOpenChange}>
    <DialogContent className="max-w-[900px] max-h-[80vh]">
      <DialogHeader>
        <DialogTitle>Document Parties</DialogTitle>
        <div className="mt-4">
          <Input
            type="text"
            placeholder="Search by name, email, or document title..."
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            className="max-w-sm"
          />
        </div>
      </DialogHeader>
      <ScrollArea className="h-[60vh]">
        {parties.length === 0 ? (
          <div className="text-center text-muted-foreground py-8">
            No parties found matching your search.
          </div>
        ) : (
          parties.map((party) => (
            <Card key={party.email} className="mb-4">
              <CardHeader>
                <CardTitle className="text-lg">
                  {party.name} ({party.email})
                </CardTitle>
                <div className="text-sm text-muted-foreground">
                  Total Documents: {party.documents.length}
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-4">
                    {["draft", "pending_signature", "completed"].map(
                      (status) => (
                        <div key={status} className="text-sm">
                          <div className="font-medium">
                            {status === "pending_signature"
                              ? "Pending Signature"
                              : status === "draft"
                                ? "Draft"
                                : "Completed"}
                          </div>
                          <div>
                            {
                              party.documents.filter(
                                (doc) => doc.status === status
                              ).length
                            }
                          </div>
                        </div>
                      )
                    )}
                  </div>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Document</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Created</TableHead>
                        <TableHead>Last Updated</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {party.documents.map((doc) => (
                        <TableRow key={doc.id}>
                          <TableCell>{doc.title}</TableCell>
                          <TableCell>
                            <span
                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                doc.status === "draft"
                                  ? "bg-yellow-100 text-yellow-800 border border-yellow-200"
                                  : doc.status === "completed" ||
                                      doc.status === "signed"
                                    ? "bg-green-100 text-green-800 border border-green-200"
                                    : doc.status === "pending_signature"
                                      ? "bg-blue-100 text-blue-800 border border-blue-200"
                                      : "bg-gray-100 text-gray-800 border border-gray-200"
                              }`}
                            >
                              {doc.status === "pending_signature"
                                ? "Pending Signature"
                                : doc.status === "draft"
                                  ? "Draft"
                                  : doc.status === "completed" ||
                                      doc.status === "signed"
                                    ? "Completed"
                                    : doc.status}
                            </span>
                          </TableCell>
                          <TableCell>
                            {formatRelativeTime(doc.created_at)}
                          </TableCell>
                          <TableCell>
                            {formatRelativeTime(doc.updated_at)}
                          </TableCell>
                          <TableCell>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() =>
                                router.push(`/editor/document/${doc.id}`)
                              }
                            >
                              {doc.status === "draft" ? "Edit" : "View"}
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </ScrollArea>
    </DialogContent>
  </Dialog>
);

// Add new SignedDocumentsDialog component after PartiesDialog
const SignedDocumentsDialog = ({
  open,
  onOpenChange,
  documents,
  searchQuery,
  onSearchChange,
  formatRelativeTime,
}) => {
  const router = useRouter();

  const handleViewDocument = (doc) => {
    router.push(`/editor/document/${doc.id}`);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-[900px] max-h-[80vh]">
        <DialogHeader>
          <DialogTitle>Signed Documents</DialogTitle>
          <div className="mt-4">
            <Input
              type="text"
              placeholder="Search by title or description..."
              value={searchQuery}
              onChange={(e) => onSearchChange(e.target.value)}
              className="max-w-sm"
            />
          </div>
        </DialogHeader>
        <ScrollArea className="h-[60vh]">
          {documents.length === 0 ? (
            <div className="text-center text-muted-foreground py-8">
              No signed documents found matching your search.
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Document Title</TableHead>
                  <TableHead>Template</TableHead>
                  <TableHead>Created</TableHead>
                  <TableHead>Completed</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {documents.map((doc) => (
                  <TableRow key={doc.id}>
                    <TableCell className="font-medium">{doc.title}</TableCell>
                    <TableCell>
                      {doc.template?.template_name || "Custom Document"}
                    </TableCell>
                    <TableCell>{formatRelativeTime(doc.created_at)}</TableCell>
                    <TableCell>{formatRelativeTime(doc.updated_at)}</TableCell>
                    <TableCell>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleViewDocument(doc)}
                      >
                        View
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

export default function DashboardPage() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [registrations, setRegistrations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    totalDocuments: 0,
    signedDocuments: 0,
    totalParties: 0,
  });
  const [templates, setTemplates] = useState([]);
  const [loadingTemplates, setLoadingTemplates] = useState(false);
  const [templateSearchQuery, setTemplateSearchQuery] = useState("");
  const [userDocuments, setUserDocuments] = useState([]);
  const [documentSearchQuery, setDocumentSearchQuery] = useState("");
  const [uniqueParties, setUniqueParties] = useState([]);
  const [showPartiesDialog, setShowPartiesDialog] = useState(false);
  const [partySearchQuery, setPartySearchQuery] = useState("");
  const [showSignedDocsDialog, setShowSignedDocsDialog] = useState(false);
  const [signedDocsSearchQuery, setSignedDocsSearchQuery] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("all");

  useEffect(() => {
    async function fetchData() {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (!user) return;

        // Fetch registrations
        const { data: registrationsData, error: registrationsError } =
          await supabase
            .from("registrations")
            .select("*")
            .eq("user_id", user.id)
            .order("created_at", { ascending: false });

        if (registrationsError) throw registrationsError;
        setRegistrations(registrationsData || []);

        // Fetch user documents
        const { data: documentsData, error: documentsError } = await supabase
          .from("user_documents")
          .select(
            `
            *,
            template:templates(template_name)
          `
          )
          .eq("user_id", user.id)
          .order("created_at", { ascending: false });

        if (documentsError) throw documentsError;
        setUserDocuments(documentsData || []);

        // Process documents to extract unique parties and count documents
        const parties = new Map();
        let totalDocs = documentsData.length;
        let signedDocs = 0;

        documentsData.forEach((doc) => {
          // Count signed/completed documents
          if (doc.status === "completed" || doc.status === "signed") {
            signedDocs++;
          }

          const signers = doc.document?.signers || [];
          signers.forEach((signer) => {
            if (!parties.has(signer.email)) {
              parties.set(signer.email, {
                name: signer.name,
                email: signer.email,
                documents: [],
              });
            }

            parties.get(signer.email).documents.push({
              id: doc.id,
              title: doc.title,
              status: doc.status,
              created_at: doc.created_at,
              updated_at: doc.updated_at,
            });
          });
        });

        setUniqueParties(Array.from(parties.values()));
        setStats({
          totalDocuments: totalDocs,
          signedDocuments: signedDocs,
          totalParties: parties.size,
        });
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, [supabase]);

  const fetchTemplates = async () => {
    setLoadingTemplates(true);
    try {
      const { data, error } = await supabase
        .from("templates")
        .select("*, placeholder_values")
        .eq("ai_gen_template", true)
        .eq("is_active", true)
        .eq("is_public", true)
        .order("created_at", { ascending: false });

      if (error) throw error;
      setTemplates(data || []);
    } catch (error) {
      console.error("Error fetching templates:", error);
    } finally {
      setLoadingTemplates(false);
    }
  };

  // Filter templates based on search
  const filteredTemplates = templates.filter((template) =>
    Object.values({
      template_name: template.template_name,
      ideal_for: template.ideal_for,
      description: template.description,
    }).some((value) =>
      value?.toLowerCase().includes(templateSearchQuery.toLowerCase())
    )
  );

  // Update the helper function
  function formatRelativeTime(dateStr) {
    try {
      const date = new Date(dateStr);

      if (isToday(date)) {
        const distance = formatDistanceToNow(date, { addSuffix: false });
        return distance === "less than a minute"
          ? "just now"
          : `${distance} ago`;
      }

      if (isYesterday(date)) {
        return "yesterday";
      }

      if (isThisWeek(date)) {
        return formatDistanceToNow(date, { addSuffix: true });
      }

      if (isThisYear(date)) {
        return format(date, "MMM d");
      }

      return format(date, "MMM d, yyyy");
    } catch (error) {
      return "Invalid date";
    }
  }

  const filteredDocuments = userDocuments.filter((doc) => {
    const matchesSearch = Object.values({
      title: doc.title || "",
      description: doc.description || "",
    }).some((value) =>
      value.toLowerCase().includes(documentSearchQuery.toLowerCase())
    );

    const matchesStatus =
      selectedStatus === "all" ||
      doc.status === selectedStatus ||
      (selectedStatus === "completed" && doc.status === "signed");

    return matchesSearch && matchesStatus;
  });

  const filteredParties = uniqueParties.filter((party) => {
    const searchTerm = partySearchQuery.toLowerCase();
    if (
      party.name.toLowerCase().includes(searchTerm) ||
      party.email.toLowerCase().includes(searchTerm)
    ) {
      return true;
    }
    return party.documents.some((doc) =>
      doc.title.toLowerCase().includes(searchTerm)
    );
  });

  const filteredSignedDocuments = userDocuments.filter((doc) => {
    const isSignedOrCompleted =
      doc.status === "signed" || doc.status === "completed";
    if (!isSignedOrCompleted) return false;

    return Object.values({
      title: doc.title || "",
      description: doc.description || "",
    }).some((value) =>
      value.toLowerCase().includes(signedDocsSearchQuery.toLowerCase())
    );
  });

  if (loading) {
    return (
      <div className="container mx-auto p-6 flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Logo and Account Section */}
      <div className="flex justify-between items-center mb-8">
        <Image
          src="/logo.png"
          alt="DocWiz Logo"
          width={180}
          height={60}
          priority
          className="h-auto"
        />

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="flex items-center gap-2">
              <UserCircle className="h-5 w-5" />
              My Account
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-48">
            <DropdownMenuItem onClick={() => router.push("/profile")}>
              Profile
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={async () => {
                try {
                  // Check subscription status directly from database
                  const { data: subscription } = await supabase
                    .from("subscriptions")
                    .select("status, stripe_subscription_id")
                    .eq("registration_id", registrations[0]?.id) // Assuming the first registration
                    .single();

                  if (
                    subscription?.status === "active" &&
                    subscription?.stripe_subscription_id
                  ) {
                    // If subscribed, open customer portal
                    const response = await fetch("/api/create-billing-portal", {
                      method: "POST",
                    });
                    const { session_url, error } = await response.json();
                    if (error) throw new Error(error);
                    window.location.href = session_url;
                  } else {
                    // If not subscribed, open pricing page
                    router.push("/pricing");
                  }
                } catch (error) {
                  console.error("Error handling billing:", error);
                  // If any error occurs, redirect to pricing page
                  router.push("/pricing");
                }
              }}
            >
              Billing
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={async () => {
                await supabase.auth.signOut();
                router.push("/sign-in");
              }}
              className="text-red-600"
            >
              Logout
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Stats Section */}
      <div className="grid gap-4 md:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Documents
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalDocuments}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader
            className="flex flex-row items-center justify-between space-y-0 pb-2 cursor-pointer"
            onClick={() => setShowSignedDocsDialog(true)}
          >
            <CardTitle className="text-sm font-medium">
              Signed Documents
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div
              className="text-2xl font-bold cursor-pointer"
              onClick={() => setShowSignedDocsDialog(true)}
            >
              {stats.signedDocuments}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader
            className="flex flex-row items-center justify-between space-y-0 pb-2 cursor-pointer"
            onClick={() => setShowPartiesDialog(true)}
          >
            <CardTitle className="text-sm font-medium">Total Parties</CardTitle>
          </CardHeader>
          <CardContent>
            <div
              className="text-2xl font-bold cursor-pointer"
              onClick={() => setShowPartiesDialog(true)}
            >
              {stats.totalParties}
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="flex space-x-4 items-center">
        <Dialog>
          <DialogTrigger asChild>
            <Button className="bg-[#0700c7] text-white hover:bg-[#0700c7]/90">
              <Wand2 className="mr-1 h-4 w-2" />
              Generate Agreement Using AI
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New Agreement</DialogTitle>
            </DialogHeader>
            <NewAgreementForm />
          </DialogContent>
        </Dialog>
        <div className="text-muted-foreground">or</div>
        <Dialog>
          <DialogTrigger asChild>
            <Button
              variant="outline"
              className="bg-white text-[#0700c7] border-[#0700c7] hover:bg-[#0700c7]/10"
              onClick={fetchTemplates}
            >
              Select A Template
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-[900px] max-h-[80vh]">
            <DialogHeader>
              <DialogTitle className="text-xl mb-4">
                Select an AI-Generated Template
              </DialogTitle>
              <div className="mb-4">
                <Input
                  type="text"
                  placeholder="Search templates..."
                  value={templateSearchQuery}
                  onChange={(e) => setTemplateSearchQuery(e.target.value)}
                  className="max-w-sm"
                />
              </div>
            </DialogHeader>
            {loadingTemplates ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
              </div>
            ) : (
              <div className="overflow-y-auto max-h-[60vh]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[200px]">Template Name</TableHead>
                      <TableHead className="w-[150px]">Ideal For</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead className="w-[100px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredTemplates.map((template) => (
                      <TableRow key={template.id}>
                        <TableCell className="font-medium">
                          {template.template_name}
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1">
                            {JSON.parse(template.ideal_for).map(
                              (tag, index) => (
                                <span
                                  key={index}
                                  className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                                >
                                  {tag}
                                </span>
                              )
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="max-h-[100px] overflow-y-auto pr-4">
                            {template.description}
                          </div>
                        </TableCell>
                        <TableCell>
                          <Button
                            size="sm"
                            onClick={async () => {
                              try {
                                const {
                                  data: { user },
                                } = await supabase.auth.getUser();
                                if (!user) throw new Error("Not authenticated");

                                // Create new user document from template
                                const { data: newDocument, error } =
                                  await supabase
                                    .from("user_documents")
                                    .insert([
                                      {
                                        user_id: user.id,
                                        template_id: template.id,
                                        content: template.content,
                                        title: template.template_name,
                                        status: "draft",
                                        placeholder_values:
                                          template.placeholder_values,
                                      },
                                    ])
                                    .select()
                                    .single();

                                if (error) throw error;

                                router.push(
                                  `/editor/document/${newDocument.id}`
                                );
                              } catch (error) {
                                console.error(
                                  "Error creating document:",
                                  error
                                );
                              }
                            }}
                          >
                            Select
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </div>

      {/* Documents Table */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Documents</CardTitle>
          <div className="flex flex-col gap-4">
            <div className="flex flex-wrap gap-2 mt-2">
              {STATUS_FILTERS.map((filter) => (
                <Button
                  key={filter.value}
                  variant="outline"
                  size="sm"
                  className={`${
                    selectedStatus === filter.value
                      ? "bg-primary text-primary-foreground hover:bg-primary/90"
                      : "hover:bg-muted"
                  }`}
                  onClick={() => setSelectedStatus(filter.value)}
                >
                  {filter.value !== "all" && (
                    <span
                      className={`mr-2 h-2 w-2 rounded-full ${
                        filter.value === "draft"
                          ? "bg-yellow-500"
                          : filter.value === "pending_signature"
                            ? "bg-blue-500"
                            : filter.value === "completed"
                              ? "bg-green-500"
                              : "bg-gray-500"
                      }`}
                    />
                  )}
                  {filter.label}
                </Button>
              ))}
            </div>
            <div>
              <Input
                type="text"
                placeholder="Search documents..."
                value={documentSearchQuery}
                onChange={(e) => setDocumentSearchQuery(e.target.value)}
                className="max-w-sm"
              />
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Title</TableHead>
                <TableHead>Template</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Created</TableHead>
                <TableHead>Last Updated</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredDocuments.map((doc) => (
                <TableRow key={doc.id}>
                  <TableCell className="font-medium">{doc.title}</TableCell>
                  <TableCell>
                    {doc.template?.template_name || "Custom Document"}
                  </TableCell>
                  <TableCell>
                    <span
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        doc.status === "draft"
                          ? "bg-yellow-100 text-yellow-800 border border-yellow-200"
                          : doc.status === "completed" ||
                              doc.status === "signed"
                            ? "bg-green-100 text-green-800 border border-green-200"
                            : doc.status === "pending_signature"
                              ? "bg-blue-100 text-blue-800 border border-blue-200"
                              : "bg-gray-100 text-gray-800 border border-gray-200"
                      }`}
                    >
                      {doc.status === "pending_signature"
                        ? "Pending Signature"
                        : doc.status === "draft"
                          ? "Draft"
                          : doc.status === "completed" ||
                              doc.status === "signed"
                            ? "Completed"
                            : doc.status}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span className="text-xs text-muted-foreground">
                        {formatRelativeTime(doc.created_at)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span className="text-xs text-muted-foreground">
                        {formatRelativeTime(doc.updated_at || doc.created_at)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => router.push(`/editor/document/${doc.id}`)}
                    >
                      {doc.status === "draft" ? "Edit" : "View"}
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
              {filteredDocuments.length === 0 && (
                <TableRow>
                  <TableCell
                    colSpan={6}
                    className="text-center text-muted-foreground"
                  >
                    No documents found matching your search.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <PartiesDialog
        open={showPartiesDialog}
        onOpenChange={setShowPartiesDialog}
        parties={filteredParties}
        searchQuery={partySearchQuery}
        onSearchChange={setPartySearchQuery}
        formatRelativeTime={formatRelativeTime}
        router={router}
      />

      <SignedDocumentsDialog
        open={showSignedDocsDialog}
        onOpenChange={setShowSignedDocsDialog}
        documents={filteredSignedDocuments}
        searchQuery={signedDocsSearchQuery}
        onSearchChange={setSignedDocsSearchQuery}
        formatRelativeTime={formatRelativeTime}
      />
    </div>
  );
}



================================================================================

File: src/app/editor/[templateId]/page.js (starts at line 3911)

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import Editor from "@/components/Editor";

export default function EditorPage({ params }) {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [userDocument, setUserDocument] = useState(null);
  const [content, setContent] = useState("");
  const { templateId } = params;

  useEffect(() => {
    async function initializeDocument() {
      // Get the current user
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError) {
        console.error("Error getting user:", userError);
        return;
      }

      // First, fetch the template
      const { data: template, error: templateError } = await supabase
        .from("templates")
        .select("*")
        .eq("id", templateId)
        .single();

      if (templateError) {
        console.error("Error fetching template:", templateError);
        return;
      }

      // Create a new user document
      const { data: newDocument, error: documentError } = await supabase
        .from("user_documents")
        .insert([
          {
            user_id: user.id,
            template_id: templateId,
            content: template.content,
            title: template.template_name,
            status: "draft",
          },
        ])
        .select()
        .single();

      if (documentError) {
        console.error("Error creating user document:", documentError);
        return;
      }

      setUserDocument(newDocument);
      setContent(newDocument.content);
    }

    initializeDocument();
  }, [templateId, supabase]);

  const handleContentChange = async (newContent) => {
    setContent(newContent);
    
    // Update the user document in the database
    const { error } = await supabase
      .from('user_documents')
      .update({ 
        content: newContent,
        updated_at: new Date().toISOString()
      })
      .eq('id', userDocument.id);

    if (error) {
      console.error('Error updating document:', error);
    }
  };

  if (!userDocument) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">{userDocument.title}</h1>
        <Button onClick={() => router.back()}>Back</Button>
      </div>

      <Editor 
        content={content} 
        onChange={handleContentChange}
        documentId={userDocument?.id} 
      />
    </div>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/page.js (starts at line 4014)

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import Editor from "@/components/Editor";
import { formatDistanceToNow } from "date-fns";
import { use } from "react";
import LoadingModal from "@/components/LoadingModal";
import { redirect } from "next/navigation";

export default function EditorPage({ params }) {
  const resolvedParams = use(params);
  const documentId = resolvedParams.documentId;
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [userDocument, setUserDocument] = useState(null);
  const [content, setContent] = useState("");
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [, setForceUpdate] = useState(0);
  const [isFormatting, setIsFormatting] = useState(false);

  const formatRelativeTime = (dateString) => {
    return formatDistanceToNow(new Date(dateString), { addSuffix: true });
  };

  useEffect(() => {
    async function fetchDocument() {
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();

      if (userError) {
        console.error("Error getting user:", userError);
        return;
      }

      // Fetch the user's document
      const { data: document, error: documentError } = await supabase
        .from("user_documents")
        .select(
          `
          *,
          template:templates(*)
        `
        )
        .eq("id", documentId)
        .eq("user_id", user.id)
        .single();

      if (documentError) {
        console.error("Error fetching document:", documentError);
        return;
      }

      // Redirect to tracking page if document is pending signature or completed
      if (
        document.status === "pending_signature" ||
        document.status === "completed"
      ) {
        router.push(`/editor/document/${documentId}/tracking`);
        return;
      }

      if (document) {
        setUserDocument(document);
        setContent(document.content);
      }
    }

    fetchDocument();
  }, [documentId, supabase, router]);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setForceUpdate((prev) => prev + 1);
    }, 60000);

    return () => clearInterval(intervalId);
  }, [router]);

  const handleContentChange = async (newContent) => {
    const newTimestamp = new Date().toISOString();
    setContent(newContent);
    setUserDocument((prev) => ({
      ...prev,
      updated_at: newTimestamp,
    }));

    const { error } = await supabase
      .from("user_documents")
      .update({
        content: newContent,
        updated_at: newTimestamp,
      })
      .eq("id", documentId);

    if (error) {
      console.error("Error updating document:", error);
    }
  };

  const handleTitleChange = async (newTitle) => {
    const newTimestamp = new Date().toISOString();

    const { error } = await supabase
      .from("user_documents")
      .update({
        title: newTitle,
        updated_at: newTimestamp,
      })
      .eq("id", documentId);

    if (error) {
      console.error("Error updating document title:", error);
      return;
    }

    setUserDocument((prev) => ({
      ...prev,
      title: newTitle,
      updated_at: newTimestamp,
    }));
    setIsEditingTitle(false);
  };

  const handleImproveFormatting = async (currentContent) => {
    setIsFormatting(true);
    try {
      const response = await fetch("/api/improve-formatting", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: currentContent,
        }),
      });

      const data = await response.json();

      if (data.error) throw new Error(data.error);

      return data.formattedContent;
    } catch (error) {
      console.error("Error improving formatting:", error);
      return null;
    } finally {
      setIsFormatting(false);
    }
  };

  const handleCancelFormatting = () => {
    setIsFormatting(false);
  };

  if (!userDocument) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex flex-col mb-6">
        <div className="flex items-center justify-between">
          {isEditingTitle ? (
            <input
              type="text"
              className="text-3xl font-bold bg-transparent border-b border-gray-300 focus:outline-none focus:border-primary w-2/3"
              value={userDocument.title}
              onChange={(e) =>
                setUserDocument((prev) => ({ ...prev, title: e.target.value }))
              }
              onBlur={() => handleTitleChange(userDocument.title)}
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  handleTitleChange(userDocument.title);
                } else if (e.key === "Escape") {
                  setIsEditingTitle(false);
                }
              }}
              autoFocus
            />
          ) : (
            <>
              <h1
                className="text-3xl font-bold cursor-pointer hover:opacity-80"
                onClick={() => setIsEditingTitle(true)}
              >
                {userDocument.title}
              </h1>
            </>
          )}
          <div className="space-x-4">
            <Button variant="outline" onClick={() => router.back()}>
              Back
            </Button>
            <Button
              onClick={() =>
                router.push(`/editor/document/${documentId}/preview`)
              }
            >
              Next
            </Button>
          </div>
        </div>
        <div className="text-sm text-muted-foreground mt-2">
          <span>Created {formatRelativeTime(userDocument.created_at)}</span>
          <span className="mx-2">•</span>
          <span>Last edited {formatRelativeTime(userDocument.updated_at)}</span>
        </div>
      </div>

      <Editor
        content={content}
        onChange={handleContentChange}
        documentId={documentId}
        onImproveFormatting={handleImproveFormatting}
      />

      <div className="mt-4 text-sm text-muted-foreground bg-muted p-3 rounded-md">
        ℹ️ A dedicated signature page will be automatically added at the end of
        your document - no need to add signature fields manually
      </div>

      <LoadingModal isOpen={isFormatting} onCancel={handleCancelFormatting} />
    </div>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/preview/page.js (starts at line 4245)

"use client";

import { useEffect, useState, use } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import PDFPreview from "@/components/PDFPreview";
import { toast } from "sonner";
import {
  generatePreviewPDF,
  generateSignwellPDF,
} from "@/components/PDFGenerator";
import { Loader2 } from "lucide-react";

export default function PreviewPage({ params }) {
  const documentId = use(params).documentId;
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [document, setDocument] = useState(null);
  const [signers, setSigners] = useState([]);
  const [signerEmails, setSignerEmails] = useState({});
  const [isProcessing, setIsProcessing] = useState(false);

  // Add email validation regex
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  useEffect(() => {
    async function fetchDocument() {
      const { data: document, error } = await supabase
        .from("user_documents")
        .select("*")
        .eq("id", documentId)
        .single();

      if (error) {
        console.error("Error fetching document:", error);
        return;
      }

      setDocument(document);

      // Ensure placeholder_values is parsed if it's a string
      const placeholderValues =
        typeof document.placeholder_values === "string"
          ? JSON.parse(document.placeholder_values)
          : document.placeholder_values;

      if (Array.isArray(placeholderValues)) {
        console.log("Fetched placeholder values:", placeholderValues);

        // Find fields marked as signers
        const signerFields = placeholderValues.filter(
          (field) => field.signer === true
        );
        console.log("Extracted signer fields:", signerFields);

        setSigners(signerFields);

        // Initialize email state for signers
        const initialEmails = {};
        signerFields.forEach((signer) => {
          initialEmails[signer.name] = ""; // Initialize empty email for each signer
        });
        setSignerEmails(initialEmails);
      }
    }

    fetchDocument();
  }, [documentId, supabase]);

  const handleEmailChange = (signerName, email) => {
    // Simply update the email value without validation
    setSignerEmails((prev) => ({
      ...prev,
      [signerName]: email,
    }));
  };

  const handleSendForSigning = async () => {
    setIsProcessing(true);
    try {
      // Debug logs for placeholder values
      console.log("All placeholder values:", document.placeholder_values);

      // Log a sample placeholder value
      const signerPlaceholders = document.placeholder_values.filter(
        (field) => field.signer === true
      );
      console.log("Signer placeholders:", signerPlaceholders);

      // Validate emails
      const invalidEmails = Object.entries(signerEmails).some(
        ([_, email]) => !email || !emailRegex.test(email)
      );

      if (invalidEmails) {
        toast.error("Please provide valid email addresses for all signers");
        return;
      }

      // Update PDF generation to use generateSignwellPDF
      const pdfBlob = await generateSignwellPDF(
        document.content,
        document.placeholder_values
      );
      if (!pdfBlob) throw new Error("PDF generation failed");

      // 2. Upload to Supabase Storage
      const fileName = `agreements/${documentId}/${Date.now()}.pdf`;
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from("documents")
        .upload(fileName, pdfBlob, {
          contentType: "application/pdf",
        });

      if (uploadError) throw uploadError;

      // 3. Get public URL
      const {
        data: { publicUrl },
      } = supabase.storage.from("documents").getPublicUrl(fileName);

      // Add this before the SignWell API call
      const signersPayload = signers.map((signer, index) => {
        const signerFields = document.placeholder_values.filter(
          (field) => field.signer === true && field.name === signer.name
        );

        // Map the fields with their actual positions from placeholder_values
        const fields = signerFields.map((field) => ({
          type: "signature",
          x: field.x || 100,
          y: field.y || 100,
          page: field.page || 1,
          width: field.width || 120,
          height: field.height || 60,
        }));

        return {
          name: signer.value,
          email: signerEmails[signer.name],
          fields: fields,
        };
      });

      console.log("Final signers payload:", signersPayload);

      // Then use signersPayload in your API call
      const signwellResponse = await fetch("/api/signwell/create-document", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          fileUrl: publicUrl,
          documentName: document.title || "Untitled Document",
          signers: signersPayload,
        }),
      });

      if (!signwellResponse.ok) {
        const errorData = await signwellResponse.json();
        throw new Error(
          `SignWell Error: ${errorData.message || "Unknown error"}`
        );
      }

      const signwellData = await signwellResponse.json();

      // 5. Update document status and store agreement details
      const { error: updateError } = await supabase
        .from("user_documents")
        .update({
          status: "pending_signature",
          placeholder_values: document.placeholder_values.map((field) => {
            if (field.signer) {
              return { ...field, email: signerEmails[field.name] };
            }
            return field;
          }),
          document: {
            originalPdf: publicUrl,
            signwellId: signwellData.id,
            signers: Object.entries(signerEmails).map(([name, email]) => ({
              name,
              email,
              status: "pending",
            })),
            createdAt: new Date().toISOString(),
            lastUpdated: new Date().toISOString(),
            documentStatus: "pending_signature",
            signwellData: signwellData,
          },
        })
        .eq("id", documentId);

      if (updateError) throw updateError;

      toast.success("Document sent for signing!");
      router.push("/dashboard");
    } catch (error) {
      console.error("Error:", error);
      toast.error(error.message || "Failed to send document for signing");
    } finally {
      setIsProcessing(false);
    }
  };

  if (!document) return <div>Loading...</div>;

  return (
    <div className="container mx-auto p-6">
      <div className="grid grid-cols-2 gap-6">
        <div className="border rounded-lg p-4">
          <PDFPreview
            content={document.content}
            placeholderValues={document.placeholder_values}
            signers={signers}
          />
        </div>

        <div className="border rounded-lg p-6">
          <h2 className="text-2xl font-bold mb-8">Signing Details</h2>

          {signers.map((signer, index) => (
            <div key={signer.name}>
              <div className="bg-gray-50 rounded-lg p-6 mb-6">
                <div className="mb-4">
                  <h3 className="text-xl font-bold text-gray-900 mb-1">
                    {signer.value}
                  </h3>
                  <div className="text-sm text-gray-600">
                    {signer.description}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor={signer.name} className="text-sm font-medium">
                    Email Address
                  </Label>
                  <Input
                    id={signer.name}
                    type="email"
                    placeholder="Enter email address"
                    value={signerEmails[signer.name]}
                    onChange={(e) =>
                      handleEmailChange(signer.name, e.target.value)
                    }
                    className={`${
                      !emailRegex.test(signerEmails[signer.name]) &&
                      signerEmails[signer.name]
                        ? "border-red-500 focus:ring-red-500"
                        : "focus:ring-blue-500"
                    }`}
                  />
                </div>
              </div>

              {/* Add divider if not the last signer */}
              {index < signers.length - 1 && (
                <div className="border-b border-gray-200 mb-6" />
              )}
            </div>
          ))}

          <div className="mt-8 space-x-4 flex justify-end">
            <Button
              variant="outline"
              onClick={() => router.back()}
              className="px-6"
            >
              Back
            </Button>
            <Button
              onClick={handleSendForSigning}
              className="px-6 bg-blue-600 hover:bg-blue-700"
              disabled={isProcessing}
            >
              {isProcessing ? "Processing..." : "Send for Signing"}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/tracking/page.js (starts at line 4532)

"use client";

import { useEffect, useState, use } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import SigningStatus from "./components/SigningStatus";
import Timeline from "./components/Timeline";
import DocumentPreview from "./components/DocumentPreview";
import { formatDistanceToNow } from "date-fns";
import { Loader2 } from "lucide-react";

export default function TrackingPage({ params }) {
  const documentId = use(params).documentId;
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [document, setDocument] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchDocument() {
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();

      if (userError) {
        console.error("Error getting user:", userError);
        return;
      }

      const { data: document, error: documentError } = await supabase
        .from("user_documents")
        .select("*")
        .eq("id", documentId)
        .eq("user_id", user.id)
        .single();

      if (documentError) {
        console.error("Error fetching document:", documentError);
        return;
      }

      setDocument(document);
      setLoading(false);
    }

    fetchDocument();
  }, [documentId, supabase]);

  if (loading) {
    return (
      <div className="container mx-auto p-6 flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  const documentData = document.document || {};
  const signingTracking = document.signing_tracking || [];

  // Find placeholder values for signers
  const placeholderValues = document.placeholder_values || [];
  const signerPlaceholders = placeholderValues.filter((p) => p.signer);

  // Map signers with their display values
  const signersWithValues = documentData.signers.map((signer) => {
    const placeholder = placeholderValues.find((p) => p.name === signer.name);
    return {
      ...signer,
      displayName: placeholder?.value || signer.name,
      placeholderName: signer.name,
    };
  });

  return (
    <div className="container mx-auto p-6">
      {/* Header Section */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold">{document.title}</h1>
          <div className="text-sm text-muted-foreground mt-2">
            Created{" "}
            {formatDistanceToNow(new Date(documentData.createdAt), {
              addSuffix: true,
            })}
          </div>
        </div>
        <Button variant="outline" onClick={() => router.push("/dashboard")}>
          Back to Dashboard
        </Button>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column - Document Preview */}
        <div className="lg:col-span-2">
          <DocumentPreview document={document} />
        </div>

        {/* Right Column - Status and Timeline */}
        <div className="space-y-6">
          <SigningStatus
            document={document}
            signersWithValues={signersWithValues}
          />
          <Timeline events={signingTracking} />
        </div>
      </div>
    </div>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/tracking/components/DocumentPreview.js (starts at line 4645)

import { Card } from "@/components/ui/card";
import { Download } from "lucide-react";

export default function DocumentPreview({ document: documentInfo }) {
  const documentData = documentInfo.document || {};
  const pdfUrl = documentData.signedPdfUrl || documentData.originalPdf;

  if (!pdfUrl) {
    return (
      <Card className="p-6 h-full flex items-center justify-center">
        <p className="text-gray-500">No document preview available</p>
      </Card>
    );
  }

  const handleDownload = () => {
    window.open(pdfUrl, '_blank');
  };

  return (
    <Card className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Document Preview</h2>
        <div className="space-x-2">
          <button
            onClick={handleDownload}
            className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-md inline-flex items-center gap-1"
          >
            <Download className="w-4 h-4" />
            Download
          </button>
        </div>
      </div>
      <div className="w-full aspect-[1/1.4] bg-gray-50 rounded-lg overflow-hidden">
        <iframe
          src={`${pdfUrl}#toolbar=0`}
          className="w-full h-full"
          title="Document Preview"
        />
      </div>
    </Card>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/tracking/components/SigningStatus.js (starts at line 4689)

import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { formatDistanceToNow } from "date-fns";

export default function SigningStatus({ document }) {
  const documentData = document.document || {};
  const signers = documentData.signers || [];
  const placeholderValues = document.placeholder_values || [];

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case "completed":
      case "signed":
        return "bg-green-500";
      case "viewed":
        return "bg-blue-500";
      case "pending":
        return "bg-yellow-500";
      default:
        return "bg-gray-500";
    }
  };

  const getSignerDisplayName = (signerName) => {
    const placeholder = placeholderValues.find((p) => p.name === signerName);
    return placeholder?.value || signerName;
  };

  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Signing Status</h2>

      {/* Document Status */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm text-gray-600">Document Status</span>
          <Badge className={getStatusColor(documentData.documentStatus)}>
            {documentData.documentStatus || "Unknown"}
          </Badge>
        </div>
        <div className="text-sm text-gray-500">
          Last updated:{" "}
          {formatDistanceToNow(new Date(documentData.lastUpdated), {
            addSuffix: true,
          })}
        </div>
      </div>

      {/* Signers List */}
      <div className="space-y-4">
        <h3 className="text-sm font-medium">Signers</h3>
        {signers.map((signer, index) => (
          <div key={index} className="border rounded-lg p-3">
            <div className="flex items-center justify-between mb-1">
              <div>
                <span className="font-medium">
                  {getSignerDisplayName(signer.name)}
                </span>
                <div className="text-xs text-gray-500">{signer.name}</div>
              </div>
              <Badge className={getStatusColor(signer.status)}>
                {signer.status}
              </Badge>
            </div>
            <div className="text-sm text-gray-500">{signer.email}</div>
          </div>
        ))}
      </div>

      {/* Document Links */}
      {documentData.originalPdf && (
        <div className="mt-6 space-y-2">
          <a
            href={documentData.originalPdf}
            target="_blank"
            rel="noopener noreferrer"
            className="text-sm text-blue-600 hover:underline block"
          >
            View Original Document
          </a>
          {documentData.signedPdfUrl && (
            <a
              href={documentData.signedPdfUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-blue-600 hover:underline block"
            >
              View Signed Document
            </a>
          )}
        </div>
      )}
    </Card>
  );
}



================================================================================

File: src/app/editor/document/[documentId]/tracking/components/Timeline.js (starts at line 4785)

import { format } from "date-fns";
import { Card } from "@/components/ui/card";

export default function Timeline({ events }) {
  const getEventIcon = (eventType) => {
    switch (eventType) {
      case "document_created":
        return "📄";
      case "document_sent":
        return "📤";
      case "document_viewed":
        return "👁️";
      case "document_signed":
        return "✍️";
      case "document_completed":
        return "✅";
      default:
        return "•";
    }
  };

  const formatEventMessage = (event) => {
    const signer = event.signer;

    switch (event.event_type) {
      case "document_created":
        return "Document created";
      case "document_sent":
        return "Document sent for signing";
      case "document_viewed":
        return signer ? `Viewed by ${signer.name}` : "Document viewed";
      case "document_signed":
        return signer ? `Signed by ${signer.name}` : "Document signed";
      case "document_completed":
        return "Document completed";
      default:
        return event.event_type.replace(/_/g, " ");
    }
  };

  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Activity Timeline</h2>
      <div className="space-y-4">
        {events.length > 0 ? (
          events.map((event, index) => (
            <div key={index} className="flex gap-3">
              <div className="flex-shrink-0 w-8 h-8 flex items-center justify-center">
                <span className="text-xl">
                  {getEventIcon(event.event_type)}
                </span>
              </div>
              <div className="flex-grow">
                <p className="text-sm font-medium">
                  {formatEventMessage(event)}
                </p>
                <time className="text-xs text-gray-500">
                  {format(new Date(event.timestamp), "MMM d, yyyy 'at' h:mm a")}
                </time>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-muted-foreground py-4">
            No activity yet. Nobody has viewed this document.
          </div>
        )}
      </div>
    </Card>
  );
}



================================================================================

File: src/app/pricing/page.js (starts at line 4857)

"use client";

import { buttonVariants } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import Section from "@/components/ui/section";
import useWindowSize from "@/lib/hooks/use-window-size";
import { cn } from "@/lib/utils";
import { motion } from "framer-motion";
import { Check } from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import { FaStar } from "react-icons/fa";
import Image from "next/image";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { UserCircle } from "lucide-react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Button } from "@/components/ui/button";
import { loadStripe } from "@stripe/stripe-js";
import { Loader2 } from "lucide-react";

const STRIPE_PRICE_IDS = {
  UNLIMITED: {
    monthly: "price_1QbiZ4JX4APU5HfwOKJBuBva",
    yearly: "price_1QbiZ4JX4APU5HfwZ4VX4VRb",
  },
};

const pricingPlans = [
  {
    name: "STARTER",
    href: "#",
    price: "$0",
    period: "month",
    yearlyPrice: "$0",
    features: [
      "3 Documents per Month",
      "3 AI Amendments per Document",
      "1 AutoFormat AI per Document",
      "3 AI Questions per Document",
      "Basic Templates",
    ],
    description: "Perfect for individuals trying out the platform",
    buttonText: "Current Plan",
    isPopular: false,
  },
  {
    name: "UNLIMITED",
    href: "#",
    price: "$19.99",
    period: "month",
    yearlyPrice: "$150",
    priceId: STRIPE_PRICE_IDS.UNLIMITED,
    features: [
      "Unlimited Documents",
      "Unlimited AI Amendments and Clause Editor",
      "Unlimited AutoFormat AI",
      "Unlimited AI Questions (Coming Soon)",
      "Premium Templates",
      "Collaboration Tools (Coming Soon)",
    ],
    description: "Ideal for professionals and businesses",
    buttonText: "Subscribe",
    isPopular: true,
  },
  {
    name: "ENTERPRISE",
    href: "#",
    price: "Let's Talk",
    period: "",
    yearlyPrice: "Let's Talk",
    features: [
      "Everything in Unlimited",
      "Advanced Collaboration Tools",
      "Custom API Integrations",
      "Enhanced Security & Compliance",
      "Dedicated Account Manager",
      "24/7 Priority Support",
      "Enterprise Analytics",
      "White Labeling Options",
    ],
    description: "For large organizations with complex workflows",
    buttonText: "Contact Sales",
    isPopular: false,
  },
];

export default function PricingPage() {
  const [isMonthly, setIsMonthly] = useState(true);
  const { isDesktop } = useWindowSize();
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [isLoading, setIsLoading] = useState(false);

  const handleToggle = () => {
    setIsMonthly(!isMonthly);
  };

  const handleSubscription = async (plan) => {
    if (plan.name === "ENTERPRISE") {
      window.location.href = "mailto:hello@mydocwiz.com";
      return;
    }

    if (plan.name !== "UNLIMITED") return;

    try {
      setIsLoading(true);
      console.log("1. Starting subscription process...");

      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (!session) {
        console.log("No session found, redirecting to sign-in");
        router.push("/sign-in");
        return;
      }
      console.log("2. User is authenticated");

      const { data: registration, error: registrationError } = await supabase
        .from("registrations")
        .select("stripe_customer_id")
        .eq("user_id", session.user.id)
        .single();

      let stripeCustomerId = registration?.stripe_customer_id;

      // Create Stripe customer if it doesn't exist
      if (!stripeCustomerId) {
        console.log("3. No Stripe customer found, creating new customer");
        const createCustomerResponse = await fetch(
          "/api/create-stripe-customer",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: session.user.email,
              userId: session.user.id,
            }),
          }
        );

        if (!createCustomerResponse.ok) {
          throw new Error("Failed to create Stripe customer");
        }

        const { customerId } = await createCustomerResponse.json();
        stripeCustomerId = customerId;

        // Update registration with new Stripe customer ID
        const { error: updateError } = await supabase
          .from("registrations")
          .update({ stripe_customer_id: customerId })
          .eq("user_id", session.user.id);

        if (updateError) {
          throw new Error(
            "Failed to update registration with Stripe customer ID"
          );
        }
      }

      console.log(
        "4. Creating checkout session with price:",
        isMonthly ? plan.priceId.monthly : plan.priceId.yearly
      );

      const response = await fetch("/api/create-checkout-session", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          priceId: isMonthly ? plan.priceId.monthly : plan.priceId.yearly,
          customerId: stripeCustomerId,
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Failed to create checkout session");
      }

      const { sessionId } = await response.json();
      console.log("5. Got session ID:", sessionId);

      const stripe = await loadStripe(
        process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
      );
      if (!stripe) {
        throw new Error("Stripe failed to initialize");
      }
      console.log("6. Stripe loaded, redirecting to checkout...");

      const result = await stripe.redirectToCheckout({
        sessionId: sessionId,
      });

      if (result.error) {
        throw new Error(result.error.message);
      }
    } catch (error) {
      console.error("Error in subscription process:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center mb-8">
        <Link href="/dashboard">
          <Image
            src="/logo.png"
            alt="DocWiz Logo"
            width={180}
            height={60}
            priority
            className="h-auto"
          />
        </Link>

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="flex items-center gap-2">
              <UserCircle className="h-5 w-5" />
              My Account
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-48">
            <DropdownMenuItem onClick={() => router.push("/profile")}>
              Profile
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => router.push("/pricing")}>
              Billing
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={async () => {
                await supabase.auth.signOut();
                router.push("/sign-in");
              }}
              className="text-red-600"
            >
              Logout
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      <Section title="Pricing" subtitle="Choose the plan that's right for you">
        <div className="flex justify-center mb-10">
          <span className="mr-2 font-semibold">Monthly</span>
          <label className="relative inline-flex items-center cursor-pointer">
            <Label>
              <Switch checked={!isMonthly} onCheckedChange={handleToggle} />
            </Label>
          </label>
          <span className="ml-2 font-semibold">Yearly</span>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {pricingPlans.map((plan, index) => (
            <motion.div
              key={index}
              initial={{ y: 50, opacity: 0 }}
              whileInView={
                isDesktop
                  ? {
                      y: 0,
                      opacity: 1,
                      x:
                        index === pricingPlans.length - 1
                          ? -30
                          : index === 0
                            ? 30
                            : 0,
                      scale:
                        index === 0 || index === pricingPlans.length - 1
                          ? 0.94
                          : 1.0,
                    }
                  : { y: 0, opacity: 1 }
              }
              viewport={{ once: true }}
              transition={{
                duration: 0.6,
                type: "spring",
                stiffness: 100,
                damping: 30,
                delay: index * 0.1,
              }}
              className={cn(
                "rounded-2xl border p-6 bg-background text-center relative",
                plan.isPopular ? "border-primary border-2" : "border-border"
              )}
            >
              {plan.isPopular && (
                <div className="absolute top-0 right-0 bg-primary py-0.5 px-2 rounded-bl-xl rounded-tr-xl flex items-center">
                  <FaStar className="text-white" />
                  <span className="text-white ml-1 font-sans font-semibold">
                    Popular
                  </span>
                </div>
              )}
              {!isMonthly && plan.name === "UNLIMITED" && (
                <div className="absolute top-0 left-0 bg-green-600 py-0.5 px-2 rounded-br-xl rounded-tl-xl">
                  <span className="text-white font-sans font-semibold text-sm">
                    Save 37%
                  </span>
                </div>
              )}
              <div>
                <p className="text-base font-semibold text-muted-foreground">
                  {plan.name}
                </p>
                <p className="mt-6 flex items-center justify-center gap-x-2">
                  <span className="text-5xl font-bold tracking-tight text-foreground">
                    {isMonthly ? plan.price : plan.yearlyPrice}
                  </span>
                  {plan.period !== "" && (
                    <span className="text-sm font-semibold leading-6 tracking-wide text-muted-foreground">
                      {isMonthly ? `/ ${plan.period}` : "/ year"}
                    </span>
                  )}
                </p>

                <p className="text-xs leading-5 text-muted-foreground">
                  {plan.price !== "Let's Talk" &&
                    plan.name !== "STARTER" &&
                    (isMonthly
                      ? "billed monthly"
                      : plan.name === "UNLIMITED"
                        ? "billed annually (effective $12.5/month, save 37%)"
                        : "billed annually")}
                </p>

                <ul className="mt-5 gap-2 flex flex-col">
                  {plan.features.map((feature, idx) => (
                    <li key={idx} className="flex items-center">
                      <Check className="mr-2 h-4 w-4 text-primary" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>

                <hr className="w-full my-4" />

                <button
                  onClick={() => handleSubscription(plan)}
                  disabled={isLoading}
                  className={cn(
                    buttonVariants({
                      variant: "outline",
                    }),
                    "w-full relative",
                    plan.isPopular
                      ? "bg-primary text-primary-foreground hover:bg-primary/90"
                      : "",
                    isLoading && "cursor-not-allowed opacity-50"
                  )}
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin inline" />
                      Please wait...
                    </>
                  ) : (
                    plan.buttonText
                  )}
                </button>
                <p className="mt-6 text-xs leading-5 text-muted-foreground">
                  {plan.description}
                </p>
              </div>
            </motion.div>
          ))}
        </div>
      </Section>
    </div>
  );
}



================================================================================

File: src/app/profile/page.js (starts at line 5247)

"use client";

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import {
  ArrowLeft,
  Loader2,
  Check,
  ChevronsUpDown,
  UserCircle,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { JurisdictionSearch } from "@/components/JurisdictionSearch.jsx";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { industries } from "@/data/industries";
import Image from "next/image";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export default function ProfilePage() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [loading, setLoading] = useState(true);
  const [profile, setProfile] = useState(null);
  const [editing, setEditing] = useState(false);
  const [formData, setFormData] = useState({
    entity_name: "",
    industry: "",
    jurisdiction: "",
    authorized_signatory: "",
    signatory_email: "",
    registration_type: "",
    domain: "",
    description: "",
  });

  useEffect(() => {
    async function loadProfile() {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (!user) {
          router.push("/sign-in");
          return;
        }

        const { data: registration, error } = await supabase
          .from("registrations")
          .select("*")
          .eq("user_id", user.id)
          .single();

        if (error) throw error;

        setProfile(registration);
        setFormData({
          entity_name: registration.entity_name || "",
          industry: registration.industry || "",
          jurisdiction: registration.jurisdiction || "",
          authorized_signatory: registration.authorized_signatory || "",
          signatory_email: registration.signatory_email || "",
          registration_type: registration.registration_type || "",
          domain: registration.domain || "",
          description: registration.description || "",
        });
      } catch (error) {
        console.error("Error loading profile:", error);
        toast.error("Failed to load profile. Please try again.");
      } finally {
        setLoading(false);
      }
    }

    loadProfile();
  }, [router, supabase]);

  const handleSave = async () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.signatory_email)) {
      toast.error("Please enter a valid email address");
      return;
    }

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      const { error } = await supabase
        .from("registrations")
        .update(formData)
        .eq("user_id", user.id);

      if (error) throw error;
      setProfile({ ...profile, ...formData });
      setEditing(false);
      toast.success("Profile updated successfully.");
    } catch (error) {
      console.error("Error updating profile:", error);
      toast.error("Failed to update profile. Please try again.");
    }
  };

  const handleJurisdictionChange = (value) => {
    setFormData({ ...formData, jurisdiction: value });
  };

  const handleIndustrySelect = (value) => {
    if (industries.includes(value)) {
      setFormData({ ...formData, industry: value });
    } else {
      setFormData({ ...formData, industry: value.toLowerCase() });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="container max-w-4xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <Image
          src="/logo.png"
          alt="DocWiz Logo"
          width={180}
          height={60}
          priority
          className="h-auto"
        />

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="flex items-center gap-2">
              <UserCircle className="h-5 w-5" />
              My Account
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-48">
            <DropdownMenuItem onClick={() => router.push("/profile")}>
              Profile
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={async () => {
                try {
                  const { data: subscription } = await supabase
                    .from("subscriptions")
                    .select("status, stripe_subscription_id")
                    .eq("registration_id", profile?.id)
                    .single();

                  if (
                    subscription?.status === "active" &&
                    subscription?.stripe_subscription_id
                  ) {
                    const response = await fetch("/api/create-billing-portal", {
                      method: "POST",
                    });
                    const { session_url, error } = await response.json();
                    if (error) throw new Error(error);
                    window.location.href = session_url;
                  } else {
                    router.push("/pricing");
                  }
                } catch (error) {
                  console.error("Error handling billing:", error);
                  router.push("/pricing");
                }
              }}
            >
              Billing
            </DropdownMenuItem>
            <DropdownMenuItem
              onClick={async () => {
                await supabase.auth.signOut();
                router.push("/sign-in");
              }}
              className="text-red-600"
            >
              Logout
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      <Button
        variant="ghost"
        className="mb-6 text-muted-foreground hover:text-foreground"
        onClick={() => router.push("/dashboard")}
      >
        <ArrowLeft className="mr-2 h-4 w-4" />
        Back to Dashboard
      </Button>

      <Card className="shadow-lg">
        <CardHeader className="bg-primary/5">
          <CardTitle className="text-2xl font-semibold text-primary">
            Profile Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6 pt-6">
          <div className="grid gap-6">
            {Object.entries(formData).map(([key, value]) => (
              <div key={key} className="space-y-2">
                <Label htmlFor={key} className="text-sm font-medium capitalize">
                  {key === "registration_type"
                    ? "Organization Type"
                    : key.replace("_", " ")}
                </Label>
                {editing ? (
                  key === "jurisdiction" ? (
                    <JurisdictionSearch
                      value={value}
                      onChange={handleJurisdictionChange}
                      defaultValue={value || undefined}
                    />
                  ) : key === "industry" ? (
                    <div className="flex flex-col gap-2">
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant="outline"
                            role="combobox"
                            className="w-full justify-between max-w-md"
                          >
                            {formData.industry || "Select or enter industry..."}
                            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-[--radix-popover-trigger-width] p-0">
                          <Command>
                            <CommandInput
                              placeholder="Type or select industry..."
                              value={formData.industry}
                              onValueChange={(value) =>
                                setFormData({ ...formData, industry: value })
                              }
                            />
                            <CommandEmpty>
                              Press enter to use this industry
                            </CommandEmpty>
                            <CommandGroup>
                              {industries.map((industry) => (
                                <CommandItem
                                  key={industry}
                                  value={industry}
                                  onSelect={handleIndustrySelect}
                                >
                                  <Check
                                    className={cn(
                                      "mr-2 h-4 w-4",
                                      formData.industry === industry
                                        ? "opacity-100"
                                        : "opacity-0"
                                    )}
                                  />
                                  {industry}
                                </CommandItem>
                              ))}
                            </CommandGroup>
                          </Command>
                        </PopoverContent>
                      </Popover>
                    </div>
                  ) : key === "description" ? (
                    <textarea
                      id={key}
                      value={value}
                      onChange={(e) =>
                        setFormData({ ...formData, [key]: e.target.value })
                      }
                      className="flex min-h-[120px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 max-w-md"
                    />
                  ) : (
                    <Input
                      id={key}
                      value={value}
                      onChange={(e) =>
                        setFormData({ ...formData, [key]: e.target.value })
                      }
                      className="max-w-md"
                    />
                  )
                ) : (
                  <div className="text-muted-foreground">
                    {value || "Not set"}
                  </div>
                )}
              </div>
            ))}
          </div>

          <Separator className="my-6" />

          <div className="flex justify-end space-x-4">
            {editing ? (
              <>
                <Button variant="outline" onClick={() => setEditing(false)}>
                  Cancel
                </Button>
                <Button onClick={handleSave}>Save Changes</Button>
              </>
            ) : (
              <Button onClick={() => setEditing(true)}>Edit Profile</Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/register/page.js (starts at line 5585)

"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import SignupStep from "../components/SignupStep";
import OrganizationTypeStep from "../components/OrganizationTypeStep";
import BusinessDetailsStep from "../components/BusinessDetailsStep";
import EntityDetailsStep from "../components/EntityDetailsStep";

const steps = [
  "Signup",
  "Organization Type",
  "Business Details",
  "Entity Details",
];

export default function OnboardingForm() {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({});
  const [error, setError] = useState(null);

  const handleNext = (stepData) => {
    if (!stepData.error) {
      setError(null);
      setFormData({ ...formData, ...stepData });
      setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
    }
  };

  const handleError = (errorMessage) => {
    setError(errorMessage);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  console.log("Rendered with formData:", formData); // Debug log

  const handleBack = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = () => {
    console.log("Form submitted:", formData);
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return <SignupStep onNext={handleNext} onError={handleError} />;
      case 1:
        return (
          <OrganizationTypeStep
            onNext={handleNext}
            registrationId={formData.registrationId}
          />
        );
      case 2:
        return (
          <BusinessDetailsStep
            onNext={handleNext}
            registrationId={formData.registrationId}
          />
        );
      case 3:
        return (
          <EntityDetailsStep
            onNext={handleSubmit}
            registrationId={formData.registrationId}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">
            {currentStep > 0 ? steps[currentStep] : ""}
          </CardTitle>
        </CardHeader>
        <CardContent>
          {error && (
            <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
              {error}
              <Button
                variant="link"
                className="text-red-700 hover:text-red-900 ml-2"
                onClick={() => (window.location.href = "/sign-in")}
              >
                Sign in
              </Button>
            </div>
          )}
          {renderStep()}
        </CardContent>
        <CardFooter className="flex flex-col gap-4">
          <div className="flex justify-between w-full">
            <Button
              variant="outline"
              onClick={handleBack}
              disabled={currentStep === 0}
            >
              Back
            </Button>
            <div className="flex space-x-2">
              {steps.map((_, index) => (
                <div
                  key={index}
                  className={`w-3 h-3 rounded-full ${
                    index === currentStep ? "bg-blue-500" : "bg-gray-300"
                  }`}
                />
              ))}
            </div>
          </div>
          {currentStep === 0 && (
            <Button
              variant="link"
              className="text-blue-600 hover:text-blue-800"
              onClick={() => (window.location.href = "/sign-in")}
            >
              Already have an account? Login
            </Button>
          )}
        </CardFooter>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/sign-in/page.js (starts at line 5724)

"use client";

import { useState, useEffect } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { Mail, Lock, Loader2 } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

export default function SignIn() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isProcessingAuth, setIsProcessingAuth] = useState(true);

  useEffect(() => {
    const checkSessionAndHash = async () => {
      try {
        setIsProcessingAuth(true);
        // Check if there's a hash in the URL (access_token)
        if (typeof window !== "undefined" && window.location.hash) {
          const hashParams = new URLSearchParams(
            window.location.hash.substring(1) // Remove the # character
          );
          const accessToken = hashParams.get("access_token");
          const refreshToken = hashParams.get("refresh_token");

          if (accessToken && refreshToken) {
            // Set the session using the tokens
            const { error } = await supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken,
            });

            if (error) throw error;

            // Clear the hash from the URL
            window.location.hash = "";

            router.push("/dashboard");
            toast.success("Email verified successfully!");
            return;
          }
        }

        // Regular session check
        const {
          data: { session },
        } = await supabase.auth.getSession();
        if (session) {
          router.push("/dashboard");
          toast.info("Already signed in");
        }
      } catch (error) {
        console.error("Error checking session:", error);
        toast.error("Failed to authenticate");
      } finally {
        setIsProcessingAuth(false);
      }
    };

    checkSessionAndHash();
  }, [router, supabase.auth]);

  if (isProcessingAuth) {
    return (
      <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="flex flex-col items-center justify-center p-8">
            <Loader2 className="h-8 w-8 animate-spin text-blue-500 mb-4" />
            <p className="text-gray-600">Verifying your authentication...</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  const handleSignIn = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        if (error.message === "Email not confirmed") {
          router.push(`/verify-email?email=${encodeURIComponent(email)}`);
          toast.info("Please verify your email before continuing.");
          return;
        }
        throw error;
      }

      const {
        data: { user },
      } = await supabase.auth.getUser();
      router.push("/dashboard");
      toast.success("Signed in successfully!");
    } catch (error) {
      console.error("Error signing in:", error);
      toast.error(error.message || "Failed to sign in");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <div className="flex flex-col space-y-4">
            <div className="self-center">
              <Image
                src="/logo.png"
                alt="DocWiz Logo"
                width={120}
                height={40}
                priority
              />
            </div>
            <CardTitle className="text-xl">Sign In</CardTitle>
          </div>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSignIn} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <div className="relative">
                <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="pl-10"
                  required
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <div className="relative">
                <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="password"
                  type="password"
                  placeholder="Enter your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="pl-10"
                  required
                />
              </div>
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? "Signing in..." : "Sign In"}
            </Button>

            <div className="text-center text-sm text-gray-500">
              Don&apos;t have an account?{" "}
              <Link href="/register" className="text-blue-600 hover:underline">
                Sign up
              </Link>
            </div>

            <div className="text-center text-sm">
              <Link
                href="/forgot-password"
                className="text-blue-600 hover:underline"
              >
                Forgot your password?
              </Link>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/app/verify-email/page.js (starts at line 5916)

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useRouter, useSearchParams } from "next/navigation";
import { toast } from "sonner";
import { Mail } from "lucide-react";

export default function VerifyEmail() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const supabase = createClientComponentClient();
  const [countdown, setCountdown] = useState(60);
  const [resendCooldown, setResendCooldown] = useState(0);
  const [loading, setLoading] = useState(false);
  const [userEmail, setUserEmail] = useState(null);
  const [isVerifying, setIsVerifying] = useState(true);

  useEffect(() => {
    const timer = setInterval(() => {
      setCountdown((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);

    const cooldownTimer = setInterval(() => {
      setResendCooldown((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);

    const checkEmailVerification = async () => {
      try {
        const {
          data: { session },
        } = await supabase.auth.getSession();

        // Only proceed with verification check if we have a session
        if (session) {
          const {
            data: { user },
            error,
          } = await supabase.auth.getUser();

          if (error) throw error;

          if (user?.email_confirmed_at) {
            await supabase.auth.refreshSession();
            router.push("/dashboard");
          }
        }
      } catch (error) {
        console.error("Error checking verification:", error);
        toast.error("Failed to verify email status");
      }
    };

    // Check every 3 seconds
    const verificationChecker = setInterval(checkEmailVerification, 3000);

    // Check for valid session on mount
    const checkSession = async () => {
      try {
        setIsVerifying(true);
        const {
          data: { session },
          error,
        } = await supabase.auth.getSession();

        if (error) throw error;

        // If no session, check for email in URL params
        if (!session) {
          const emailFromUrl = searchParams.get("email");
          if (emailFromUrl) {
            setUserEmail(emailFromUrl);
            return;
          }
          router.push("/sign-in");
          return;
        }

        // Store the email for display and verification
        setUserEmail(session.user.email);

        // If already verified, redirect to dashboard
        if (session.user.email_confirmed_at) {
          router.push("/dashboard");
          return;
        }
      } catch (error) {
        console.error("Session check error:", error);
        toast.error("Unable to verify session");
        router.push("/sign-in");
      } finally {
        setIsVerifying(false);
      }
    };

    checkSession();

    return () => {
      clearInterval(timer);
      clearInterval(cooldownTimer);
      clearInterval(verificationChecker);
    };
  }, [router, supabase.auth, searchParams]);

  const handleResendEmail = async () => {
    try {
      setLoading(true);
      const { error } = await supabase.auth.resend({
        type: "signup",
        email: userEmail,
      });

      if (error) throw error;

      // Set cooldown to 60 seconds
      setResendCooldown(60);
      toast.success("Verification email resent successfully!");
    } catch (error) {
      console.error("Error resending verification email:", error);
      toast.error(error.message || "Failed to resend verification email");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-blue-100 to-purple-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">
            Verify Your Email
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {userEmail && (
            <p className="text-center text-gray-600">
              We&apos;ve sent a verification email to{" "}
              <span className="font-medium">{userEmail}</span>
            </p>
          )}
          <p className="text-center text-sm text-gray-500">
            You'll be automatically redirected once your email is verified.
          </p>
          {countdown > 0 && (
            <p className="text-center text-sm text-gray-500">
              Checking for verification... ({countdown}s)
            </p>
          )}

          <div className="flex justify-center">
            <Button
              variant="outline"
              onClick={handleResendEmail}
              disabled={resendCooldown > 0 || loading}
              className="gap-2"
            >
              <Mail className="h-4 w-4" />
              {loading
                ? "Sending..."
                : resendCooldown > 0
                  ? `Resend in ${resendCooldown}s`
                  : "Resend verification email"}
            </Button>
          </div>

          <p className="text-center text-sm text-gray-500">
            Don't see the email? Check your spam folder.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================

File: src/components/ChangePreview.js (starts at line 6092)

export default function ChangePreview({ originalText, newText, onAccept, onReject }) {
  const renderFormattedContent = (content) => {
    // If content is already HTML, render it directly
    if (/<[^>]*>/g.test(content)) {
      return (
        <div 
          dangerouslySetInnerHTML={{ __html: content }}
          className="prose prose-sm max-w-none [&>ul]:list-disc [&>ul]:pl-4 [&>ol]:list-decimal [&>ol]:pl-4"
        />
      );
    }
    
    // If plain text with newlines, convert to HTML with proper formatting
    if (content.includes('\n')) {
      const htmlContent = content
        .split('\n')
        .map(line => {
          if (line.trim().startsWith('-') || line.trim().startsWith('•')) {
            return `<li>${line.trim().substring(1).trim()}</li>`;
          }
          return `<p>${line}</p>`;
        })
        .join('');
      
      return (
        <div 
          dangerouslySetInnerHTML={{ __html: htmlContent }}
          className="prose prose-sm max-w-none [&>ul]:list-disc [&>ul]:pl-4 [&>ol]:list-decimal [&>ol]:pl-4"
        />
      );
    }
    
    // Plain text without formatting
    return <p>{content}</p>;
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg max-w-3xl w-full mx-4 space-y-4 max-h-[80vh] overflow-y-auto">
        <h3 className="text-lg font-semibold">Review Changes</h3>
        
        <div className="space-y-4">
          <div>
            <h4 className="text-sm font-medium text-gray-500">Original Text:</h4>
            <div className="p-3 bg-red-50 dark:bg-red-900/20">
              <div className="text-red-700 dark:text-red-300">
                {renderFormattedContent(originalText)}
              </div>
            </div>
          </div>
          
          <div>
            <h4 className="text-sm font-medium text-gray-500">New Text:</h4>
            <div className="p-3 bg-green-50 dark:bg-green-900/20">
              <div className="text-green-700 dark:text-green-300">
                {renderFormattedContent(newText)}
              </div>
            </div>
          </div>
        </div>

        <div className="flex justify-end space-x-3 pt-4 border-t">
          <button
            onClick={onReject}
            className="px-4 py-2 border rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            Reject
          </button>
          <button
            onClick={onAccept}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Accept
          </button>
        </div>
      </div>
    </div>
  );
}



================================================================================

File: src/components/Editor.js (starts at line 6172)

"use client";

import { useEditor, EditorContent } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Placeholder from "@tiptap/extension-placeholder";
import Typography from "@tiptap/extension-typography";
import CodeBlockLowlight from "@tiptap/extension-code-block-lowlight";
import Link from "@tiptap/extension-link";
import { common, createLowlight } from "lowlight";
import { useEffect, useState, useCallback } from "react";
import { Markdown } from "tiptap-markdown";
import MenuBar from "./MenuBar";
import Sidebar from "./Sidebar";
import { Extension } from "@tiptap/core";
import { Plugin, PluginKey } from "@tiptap/pm/state";
import { Decoration, DecorationSet } from "@tiptap/pm/view";
import "../styles/editor.css";
import SuggestionPopup from "./SuggestionPopup";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import ChangePreview from "./ChangePreview";
import { Wand2 } from "lucide-react";

// Create a new lowlight instance with common languages
const lowlight = createLowlight(common);

// Custom extension for placeholder highlighting and value display
const PlaceholderHighlight = Extension.create({
  name: "placeholderHighlight",

  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("placeholderHighlight"),
        props: {
          decorations: (state) => {
            const { doc } = state;
            const decorations = [];

            doc.descendants((node, pos) => {
              if (node.isText) {
                const regex = /\{\{([^}]+)\}\}/g;
                let match;

                while ((match = regex.exec(node.text)) !== null) {
                  const start = pos + match.index;
                  const end = start + match[0].length;

                  decorations.push(
                    Decoration.inline(start, end, {
                      class: "placeholder-text",
                    })
                  );
                }
              }
            });

            return DecorationSet.create(doc, decorations);
          },
        },
      }),
    ];
  },
});

export default function Editor({
  content,
  onChange,
  documentId,
  onImproveFormatting,
}) {
  const [isMounted, setIsMounted] = useState(false);
  const [documentValues, setDocumentValues] = useState({});
  const [selection, setSelection] = useState(null);
  const [popupPosition, setPopupPosition] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [previewChanges, setPreviewChanges] = useState(null);
  const supabase = createClientComponentClient();

  // Function to extract placeholders from content
  const extractPlaceholders = useCallback((text) => {
    console.log("Extracting placeholders from:", text);
    const regex = /\{\{([^}]+)\}\}/g;
    const placeholders = {};
    let match;

    while ((match = regex.exec(text)) !== null) {
      const name = match[1];
      placeholders[name] = {
        name: name,
        value: "",
        description: `Value for ${name.toLowerCase().replace(/_/g, " ")}`,
      };
    }

    console.log("Extracted placeholders:", placeholders);
    return placeholders;
  }, []);

  // Add this function to replace placeholders with their values
  const replaceContentPlaceholders = useCallback(
    (content) => {
      if (!content || !documentValues) return content;

      let processedContent = content;
      Object.entries(documentValues).forEach(([name, details]) => {
        const placeholder = `{{${name}}}`;
        const value = details.value || placeholder;
        processedContent = processedContent.replace(
          new RegExp(placeholder, "g"),
          value
        );
      });

      return processedContent;
    },
    [documentValues]
  );

  // Editor initialization
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        heading: { levels: [1, 2, 3, 4, 5, 6] },
        codeBlock: false,
      }),
      Placeholder.configure({
        placeholder: "Start typing...",
      }),
      Typography,
      CodeBlockLowlight.configure({
        lowlight,
        defaultLanguage: "javascript",
      }),
      Link.configure({
        openOnClick: false,
      }),
      Markdown.configure({
        html: true,
        transformPastedText: true,
        transformCopiedText: true,
      }),
      PlaceholderHighlight,
    ],
    content: replaceContentPlaceholders(content),
    onUpdate: ({ editor }) => {
      // Get the markdown content
      const markdown = editor.storage.markdown.getMarkdown();

      // Replace any displayed values back to placeholders before saving
      let processedMarkdown = markdown;
      Object.entries(documentValues).forEach(([name, details]) => {
        if (details.value) {
          const value = details.value;
          const placeholder = `{{${name}}}`;
          processedMarkdown = processedMarkdown.replace(
            new RegExp(value, "g"),
            placeholder
          );
        }
      });

      if (onChange) {
        onChange(processedMarkdown);
      }
    },
    editorProps: {
      attributes: {
        class:
          "prose prose-sm max-w-none focus:outline-none" +
          " prose-headings:font-semibold" +
          " prose-h1:text-3xl prose-h1:mb-4" +
          " prose-h2:text-2xl prose-h2:mb-3" +
          " prose-h3:text-xl prose-h3:mb-2" +
          " prose-p:text-base prose-p:leading-relaxed" +
          " prose-pre:text-sm",
      },
    },
  });

  // Initialize document values from database or content
  useEffect(() => {
    if (documentId && content) {
      const fetchDocumentValues = async () => {
        console.log("Fetching document values for ID:", documentId);
        const { data: document, error } = await supabase
          .from("user_documents")
          .select("placeholder_values")
          .eq("id", documentId)
          .single();

        console.log("Database values:", document?.placeholder_values);

        // Extract placeholders from content first
        const placeholders = extractPlaceholders(content);

        // If we have values in the database, update the placeholders
        if (!error && document?.placeholder_values?.length > 0) {
          document.placeholder_values.forEach((dbPlaceholder) => {
            if (placeholders[dbPlaceholder.name]) {
              // Preserve all metadata from the database
              placeholders[dbPlaceholder.name] = {
                ...dbPlaceholder,
                value: dbPlaceholder.value || "",
              };
            }
          });
        }

        console.log("Final placeholder values:", placeholders);
        setDocumentValues(placeholders);
      };

      fetchDocumentValues();
    } else if (content) {
      // If no documentId but we have content, just extract placeholders
      const placeholders = extractPlaceholders(content);
      setDocumentValues(placeholders);
    }
  }, [documentId, content, extractPlaceholders, supabase]);

  // Selection handling
  useEffect(() => {
    if (!editor) return;

    const handleSelection = () => {
      const { view } = editor;
      const { from, to } = view.state.selection;

      if (from === to) {
        setSelection(null);
        setPopupPosition(null);
        return;
      }

      const selectedText = editor.state.doc.textBetween(from, to);
      const coords = view.coordsAtPos(from);

      setSelection({
        text: selectedText,
        from,
        to,
      });

      setPopupPosition({
        top: coords.top + window.scrollY - 10,
        left: coords.left + window.scrollX,
      });
    };

    editor.on("selectionUpdate", handleSelection);
    return () => editor.off("selectionUpdate", handleSelection);
  }, [editor]);

  // Placeholder value handling
  const handlePlaceholderChange = async (name, value) => {
    console.log("Updating placeholder:", name, "with value:", value);

    // Update local state
    const newValues = {
      ...documentValues,
      [name]: {
        ...documentValues[name],
        value: value,
      },
    };
    setDocumentValues(newValues);

    // Update database if we have a document ID
    if (documentId) {
      // Get existing placeholder values from database
      const { data: document, error: fetchError } = await supabase
        .from("user_documents")
        .select("placeholder_values")
        .eq("id", documentId)
        .single();

      if (fetchError) {
        console.error(
          "Error fetching existing placeholder values:",
          fetchError
        );
        return;
      }

      // Create a map of existing placeholder data
      const existingPlaceholders = document.placeholder_values.reduce(
        (acc, placeholder) => {
          acc[placeholder.name] = placeholder;
          return acc;
        },
        {}
      );

      // Merge new values while preserving existing metadata
      const placeholderArray = Object.entries(newValues).map(
        ([name, details]) => ({
          ...existingPlaceholders[name], // Preserve existing metadata
          name,
          value: details.value || "", // Update only the value
        })
      );

      const { error } = await supabase
        .from("user_documents")
        .update({
          placeholder_values: placeholderArray,
        })
        .eq("id", documentId);

      if (error) {
        console.error("Error updating placeholder values:", error);
      }
    }
  };

  // AI improvement handling
  const handleSuggestionSubmit = async (prompt, shouldFormat = false) => {
    if (!selection) return;

    setIsProcessing(true);
    try {
      // First, improve the selected text
      const response = await fetch("/api/improve-text", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          selectedText: selection.text,
          fullDocument: editor.getHTML(),
          prompt,
        }),
      });

      const data = await response.json();
      if (data.error) throw new Error(data.error);

      // If formatting is requested, process the entire document
      if (shouldFormat) {
        const updatedContent =
          editor.state.doc.textBetween(0, selection.from) +
          data.improvedText +
          editor.state.doc.textBetween(
            selection.to,
            editor.state.doc.content.size
          );

        const formatResponse = await fetch("/api/improve-formatting", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            content: updatedContent,
          }),
        });

        const formatData = await formatResponse.json();
        if (formatData.error) throw new Error(formatData.error);

        setPreviewChanges({
          originalText: selection.text,
          newText: data.improvedText,
          from: selection.from,
          to: selection.to,
          formattedDocument: formatData.formattedContent,
        });
      } else {
        setPreviewChanges({
          originalText: selection.text,
          newText: data.improvedText,
          from: selection.from,
          to: selection.to,
        });
      }

      setPopupPosition(null);
    } catch (error) {
      console.error("Error improving text:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleAcceptChanges = () => {
    if (!previewChanges) return;

    if (previewChanges.formattedDocument) {
      // If we have a formatted version, use the entire document
      editor.commands.setContent(previewChanges.formattedDocument);
    } else {
      // Otherwise just replace the selected portion
      editor
        .chain()
        .focus()
        .setTextSelection({ from: previewChanges.from, to: previewChanges.to })
        .deleteSelection()
        .insertContent(previewChanges.newText)
        .run();
    }

    setPreviewChanges(null);
    setSelection(null);
  };

  const handleRejectChanges = () => {
    setPreviewChanges(null);
    setSelection(null);
  };

  const handleImproveFormatting = async () => {
    if (!editor) return;

    try {
      const currentContent = editor.storage.markdown.getMarkdown();
      if (onImproveFormatting) {
        const formattedContent = await onImproveFormatting(currentContent);
        if (formattedContent) {
          editor.commands.setContent(formattedContent, true);
        }
      }
    } catch (error) {
      console.error("Error improving formatting:", error);
    }
  };

  // Update editor content when documentValues change
  useEffect(() => {
    if (editor && content && documentValues) {
      const processedContent = replaceContentPlaceholders(content);
      // Only update if the content is actually different
      if (processedContent !== editor.getHTML()) {
        // Store current selection
        const { from, to } = editor.state.selection;

        editor.commands.setContent(processedContent, false);

        // Restore selection
        editor.commands.setTextSelection({ from, to });
      }
    }
  }, [documentValues, content, editor, replaceContentPlaceholders]);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  if (!isMounted) {
    return (
      <div className="min-h-[calc(100vh-200px)] p-4 border rounded-lg">
        Loading editor...
      </div>
    );
  }

  return (
    <div className="max-w-none flex relative">
      <div className="flex-1 border rounded-lg">
        <MenuBar
          editor={editor}
          onImproveFormatting={handleImproveFormatting}
        />
        <EditorContent
          editor={editor}
          className="min-h-[calc(100vh-200px)] p-4"
        />
        {popupPosition && (
          <SuggestionPopup
            position={popupPosition}
            onSubmit={handleSuggestionSubmit}
            onClose={() => {
              setSelection(null);
              setPopupPosition(null);
            }}
          />
        )}
      </div>
      <Sidebar
        documentValues={documentValues}
        onValueChange={handlePlaceholderChange}
      />
      {previewChanges && (
        <ChangePreview
          originalText={previewChanges.originalText}
          newText={previewChanges.newText}
          onAccept={handleAcceptChanges}
          onReject={handleRejectChanges}
        />
      )}
    </div>
  );
}



================================================================================

File: src/components/JurisdictionSearch.jsx (starts at line 6661)

"use client";

import React, { useState, useCallback } from "react";
import { Check, ChevronsUpDown, Loader2 } from 'lucide-react';
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { ScrollArea } from "@/components/ui/scroll-area";

export function JurisdictionSearch({ value, onChange, defaultValue }) {
  const [open, setOpen] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const searchJurisdictions = useCallback(
    async (searchTerm) => {
      setInputValue(searchTerm);
      if (!searchTerm || searchTerm.length < 2) {
        setSearchResults([]);
        return;
      }

      setIsLoading(true);
      try {
        const response = await fetch(
          `/api/places/autocomplete?input=${encodeURIComponent(searchTerm)}`
        );
        const data = await response.json();

        console.log("API Response:", data);

        if (data.predictions) {
          const formattedResults = data.predictions.map((prediction) => ({
            value: prediction.place_id,
            label: prediction.description,
          }));
          setSearchResults(formattedResults);
        }
      } catch (error) {
        console.error("Error fetching jurisdictions:", error);
        setSearchResults([]);
      } finally {
        setIsLoading(false);
      }
    },
    []
  );

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
        >
          {value ? value : defaultValue || "Select jurisdiction..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[400px] p-0" align="start">
        <Command shouldFilter={false}>
          <CommandInput
            placeholder="Search jurisdictions..."
            value={inputValue}
            onValueChange={searchJurisdictions}
          />
          <ScrollArea className="max-h-[300px] overflow-auto">
            {isLoading ? (
              <div className="flex items-center justify-center py-6">
                <Loader2 className="h-6 w-6 animate-spin text-primary" />
              </div>
            ) : searchResults.length === 0 ? (
              <CommandEmpty>No results found.</CommandEmpty>
            ) : (
              <CommandGroup>
                {searchResults.map((result) => (
                  <CommandItem
                    key={result.value}
                    onSelect={() => {
                      onChange(result.label);
                      setInputValue(result.label);
                      setOpen(false);
                    }}
                  >
                    <Check
                      className={cn(
                        "mr-2 h-4 w-4",
                        value === result.label ? "opacity-100" : "opacity-0"
                      )}
                    />
                    {result.label}
                  </CommandItem>
                ))}
              </CommandGroup>
            )}
          </ScrollArea>
        </Command>
      </PopoverContent>
    </Popover>
  );
}


================================================================================

File: src/components/LoadingModal.js (starts at line 6776)

import { useState, useEffect } from "react";
import { Loader2 } from "lucide-react";

export default function LoadingModal({ isOpen, onCancel }) {
  const [loadingText, setLoadingText] = useState(
    "Analyzing document structure..."
  );

  useEffect(() => {
    if (!isOpen) return;

    const messages = [
      "Analyzing document structure...",
      "Applying agreement best practices...",
      "Enhancing readability...",
      "Polishing final formatting...",
      "Finalizing changes...",
    ];

    let currentIndex = 0;
    const interval = setInterval(() => {
      currentIndex += 1;
      if (currentIndex < messages.length) {
        setLoadingText(messages[currentIndex]);
      } else {
        clearInterval(interval);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg text-center w-[400px]">
        <h2 className="text-xl font-semibold mb-4">Formatting using AI</h2>
        <div className="mb-6">
          <Loader2 className="h-10 w-10 animate-spin text-[#0700C7] mx-auto mb-4" />
          <p className="text-gray-600 min-h-[28px]">{loadingText}</p>
        </div>
        <button
          onClick={onCancel}
          className="bg-[#000000] text-white px-6 py-2 rounded hover:bg-[#000000] transition-colors font-medium"
        >
          Cancel
        </button>
      </div>
    </div>
  );
}



================================================================================

File: src/components/MenuBar.js (starts at line 6829)

import { Wand2 } from "lucide-react";

export default function MenuBar({ editor, onImproveFormatting }) {
  if (!editor) {
    return null;
  }

  return (
    <div className="border-b p-2 flex flex-wrap gap-2">
      <button
        onClick={() => editor.chain().focus().toggleBold().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("bold") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Bold
      </button>
      <button
        onClick={() => editor.chain().focus().toggleItalic().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("italic") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Italic
      </button>
      <button
        onClick={() => editor.chain().focus().toggleStrike().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("strike") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Strike
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCode().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("code") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Code
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCodeBlock().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("codeBlock") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Code Block
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("heading", { level: 1 })
            ? "bg-gray-200"
            : "hover:bg-gray-100"
        }`}
      >
        H1
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("heading", { level: 2 })
            ? "bg-gray-200"
            : "hover:bg-gray-100"
        }`}
      >
        H2
      </button>
      <button
        onClick={() => editor.chain().focus().toggleBulletList().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("bulletList") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Bullet List
      </button>
      <button
        onClick={() => editor.chain().focus().toggleOrderedList().run()}
        className={`p-1 px-2 rounded ${
          editor.isActive("orderedList") ? "bg-gray-200" : "hover:bg-gray-100"
        }`}
      >
        Ordered List
      </button>
      <button
        onClick={onImproveFormatting}
        className="p-2 rounded hover:bg-gray-100 text-orange-500 hover:text-orange-600 flex items-center gap-1"
        title="Improve Formatting"
      >
        <Wand2 className="w-5 h-5" />
        <span>Auto Format AI</span>
      </button>
    </div>
  );
}



================================================================================

File: src/components/NewAgreementForm.jsx (starts at line 6926)

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useRouter } from "next/navigation";
import { Wand2, Check, Loader2, AlertCircle } from "lucide-react"; // Import the magic wand icon
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { Select } from "@/components/ui/select";
import { JurisdictionSearch } from "@/components/JurisdictionSearch";
import { Slider } from "@/components/ui/slider";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";

export function NewAgreementForm() {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);
  const [jurisdiction, setJurisdiction] = useState("");
  const [userRegistration, setUserRegistration] = useState(null);
  const [complexity, setComplexity] = useState(3);
  const [length, setLength] = useState(3);
  const [jurisdictionError, setJurisdictionError] = useState(false);
  const [generationStep, setGenerationStep] = useState(0);
  const [legalityError, setLegalityError] = useState(null);
  const [rateLimitError, setRateLimitError] = useState(null);

  const generationSteps = [
    "Understanding the requirement",
    "Retrieving the context",
    "Looking up relevant laws",
    "Checking jurisdiction specific laws",
    "Writing your agreement based on research",
    "Finalizing your agreement"
  ];

  useEffect(() => {
    const fetchUserRegistration = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data, error } = await supabase
          .from('registrations')
          .select('city_name, state_name, country_name')
          .eq('user_id', user.id)
          .single();
        
        if (data) {
          setUserRegistration(data);
          // Set default jurisdiction from registration
          setJurisdiction(`${data.city_name}, ${data.state_name}, ${data.country_name}`);
        }
      }
    };

    fetchUserRegistration();
  }, [supabase]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Reset errors at the start
    setRateLimitError(null);
    setLegalityError(null);
    
    if (!jurisdiction) {
      setJurisdictionError(true);
      return;
    }
    setJurisdictionError(false);
    setLoading(true);
    setGenerationStep(0);

    try {
      // Start the loading states animation immediately
      const loadingStatesPromise = (async () => {
        for (let i = 0; i < generationSteps.length - 1; i++) {
          const delay = i === 4 ? 4000 : 2000;
          await new Promise(resolve => setTimeout(resolve, delay));
          setGenerationStep(i + 1);
        }
      })();

      // Make the API call in parallel
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Not authenticated');

      const response = await fetch('/api/generate-agreement', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          userId: user.id,
          jurisdiction,
          complexity,
          length
        }),
      });

      const data = await response.json();
      
      // Handle rate limit response FIRST
      if (response.status === 429) {
        setRateLimitError({
          message: "Error generating agreement",
          details: "Rate limit exceeded",
          resetIn: data.resetIn
        });
        setLoading(false);
        return;
      }
      
      // Then handle other responses
      if (response.status === 422) {
        setLegalityError({
          message: "This agreement cannot be generated",
          details: data.legalityNotes
        });
        setLoading(false);
        return;
      }

      if (!response.ok) throw new Error(data.error);

      // Wait for both the loading states and API call to complete
      await loadingStatesPromise;

      // Only redirect if everything is successful
      router.push(`/editor/document/${data.id}`);

    } catch (error) {
      console.error('Error:', error);
      setLegalityError({
        message: "Error generating agreement",
        details: error.message
      });
    } finally {
      setLoading(false);
      setGenerationStep(0);
    }
  };

  const getComplexityLabel = (value) => {
    const labels = {
      1: "Simple, easy to understand",
      2: "Basic legal terms",
      3: "Standard legal language",
      4: "Detailed legal terminology",
      5: "Complex legal language"
    };
    return labels[value];
  };

  const getLengthLabel = (value) => {
    const labels = {
      1: "Very brief",
      2: "Concise",
      3: "Standard",
      4: "Detailed",
      5: "Comprehensive"
    };
    return labels[value];
  };

  const LoadingStates = () => (
    <div className="space-y-2 mt-4">
      {generationSteps.map((step, index) => {
        const isComplete = index < generationStep;
        const isCurrent = index === generationStep;
        
        return (
          <div key={step} className="flex items-center gap-2 text-sm">
            {isComplete ? (
              <Check className="h-4 w-4 text-green-500" />
            ) : isCurrent ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : null}
            <span className={isComplete ? "text-green-500" : "text-muted-foreground"}>
              {step}
            </span>
          </div>
        );
      })}
    </div>
  );

  const formatTimeRemaining = (seconds) => {
    // Input is already in seconds, no need to convert from timestamp
    if (seconds < 60) return `${seconds} seconds`;
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes} minute${minutes > 1 ? 's' : ''}`;
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return `${hours} hour${hours > 1 ? 's' : ''} ${remainingMinutes > 0 ? `and ${remainingMinutes} minute${remainingMinutes > 1 ? 's' : ''}` : ''}`;
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {legalityError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>{legalityError.message}</AlertTitle>
          <AlertDescription>
            {legalityError.details}
          </AlertDescription>
        </Alert>
      )}
      {rateLimitError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error generating agreement</AlertTitle>
          <AlertDescription className="space-y-2">
            <p>Ouch, You've hit usage limits, Contact support for higher limits</p>
           
            <b>
              Please try again in {formatTimeRemaining(rateLimitError.resetIn)}
            </b>
          </AlertDescription>
        </Alert>
      )}
      <div className="space-y-2">
        <div className="flex items-center gap-2 mb-2">
          <Wand2 className="h-4 w-4" />
          <span className="text-sm text-muted-foreground">AI-Powered Generation</span>
        </div>
        <Textarea
          placeholder="Explain what agreement you need and for what purpose...
Example: I need a non-disclosure agreement for a freelance developer who will be working on my startup"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          className="min-h-[120px]"
        />
        <p className="text-sm text-muted-foreground">
          Tip: Check our templates first to save time - we have many common agreements ready to use.
        </p>
      </div>
      <div className="space-y-2">
        <label className="text-sm text-muted-foreground">
          Jurisdiction <span className="text-red-500">*</span>
        </label>
        <JurisdictionSearch
          value={jurisdiction}
          onChange={setJurisdiction}
          defaultValue={userRegistration ? 
            `${userRegistration.city_name}, ${userRegistration.state_name}, ${userRegistration.country_name}` : 
            "Select jurisdiction"
          }
        />
        {jurisdictionError && (
          <p className="text-sm text-red-500">
            Please select a jurisdiction
          </p>
        )}
        {userRegistration && (
          <p className="text-sm text-muted-foreground">
            Default jurisdiction based on your registration
          </p>
        )}
      </div>
      <div className="space-y-4">
        <div className="space-y-2">
          <label className="text-sm text-muted-foreground">Wording Complexity</label>
          <Slider
            min={1}
            max={5}
            step={1}
            value={[complexity]}
            onValueChange={([value]) => setComplexity(value)}
            className="w-full"
            style={{
              "--slider-color": "#0700c7"
            }}
          />
          <p className="text-sm text-muted-foreground">{getComplexityLabel(complexity)}</p>
        </div>

        <div className="space-y-2">
          <label className="text-sm text-muted-foreground">Agreement Length</label>
          <Slider
            min={1}
            max={5}
            step={1}
            value={[length]}
            onValueChange={([value]) => setLength(value)}
            className="w-full"
            style={{
              "--slider-color": "#0700c7"
            }}
          />
          <p className="text-sm text-muted-foreground">{getLengthLabel(length)}</p>
        </div>
      </div>
      <Button type="submit" className="w-full" disabled={loading}>
        {loading ? "Generating..." : "Generate Agreement"}
      </Button>

      {loading && <LoadingStates />}
    </form>
  );
}


================================================================================

File: src/components/PDFGenerator.js (starts at line 7225)

// src/components/PDFGenerator.js
import { marked } from "marked";
import html2pdf from "html2pdf.js";

export const generatePDF = async (content, placeholderValues) => {
  try {
    // Process content and placeholders
    let processedText = content;
    const placeholderMap = Array.isArray(placeholderValues)
      ? placeholderValues.reduce((acc, item) => {
          if (item && item.name) {
            acc[item.name] = item;
          }
          return acc;
        }, {})
      : {};

    // Replace placeholders with their values
    const regex = /\{\{([^}]+)\}\}/g;
    processedText = processedText.replace(regex, (match, placeholderName) => {
      const placeholder = placeholderMap[placeholderName];
      return placeholder && placeholder.value ? placeholder.value : match;
    });

    // Configure marked options
    marked.setOptions({
      breaks: true,
      gfm: true,
      headerIds: true,
      smartLists: true,
    });

    // Convert markdown to HTML
    const processedContent = marked(processedText);

    // Create temporary container with proper styling
    const tempContainer = document.createElement("div");
    tempContainer.className = "legal-document";
    tempContainer.innerHTML = processedContent;

    // Add necessary styles
    const styleElement = document.createElement("style");
    styleElement.textContent = `
      .legal-document {
        font-family: "Times New Roman", Times, serif;
        font-size: 12pt;
        line-height: 1.5;
        color: #000000;
        padding: 96pt 72pt;
        margin: 0 auto;
        max-width: 8.5in;
        box-sizing: border-box;
        counter-reset: section;
        word-break: normal;
        word-wrap: break-word;
        hyphens: none;
      }
      
      /* Main title styling */
      .legal-document h1:first-child {
        font-size: 14pt;
        font-weight: bold;
        text-align: center;
        margin: 0 0 36pt 0;
        padding: 0;
        text-transform: uppercase;
        letter-spacing: 0.5pt;
      }
      
      /* Section headings */
      .legal-document h2 {
        font-size: 12pt;
        font-weight: bold;
        margin: 24pt 0 12pt 0;
        padding: 0;
        page-break-after: avoid;
      }
      
      /* Section numbering */
      .legal-document h2::before {
        counter-increment: section;
        content: counter(section) ". ";
      }
      
      /* Paragraph spacing and formatting */
      .legal-document p {
        margin: 0 0 12pt 0;
        padding: 0;
        text-align: justify;
        orphans: 3;
        widows: 3;
        word-break: normal;
        overflow-wrap: break-word;
        hyphens: none;
      }
      
      /* List styling */
      .legal-document ul, 
      .legal-document ol {
        margin: 0 0 12pt 0;
        padding-left: 24pt;
      }
      
      .legal-document li {
        margin: 0 0 6pt 0;
        padding: 0;
      }
      
      /* Subsection styling */
      .legal-document .subsection {
        margin: 0 0 16pt 0;
        padding: 0;
      }

      /* Signature block styling */
      .legal-document .signature-block {
        margin-top: 36pt;
        page-break-inside: avoid;
        break-inside: avoid;
      }
      
      /* Page layout */
      @page {
        size: letter;
        margin: 1in;
      }
      
      /* Section break control */
      .legal-document section {
        page-break-inside: avoid;
        break-inside: avoid;
      }
      
      /* Table styling */
      .legal-document table {
        width: 100%;
        margin: 12pt 0;
        border-collapse: collapse;
        page-break-inside: avoid;
      }
      
      .legal-document th, 
      .legal-document td {
        padding: 6pt;
        border: 1pt solid #000000;
        text-align: left;
      }

      /* Remove blank pages */
      .legal-document:last-child:blank {
        display: none;
      }

      /* Witness section spacing */
      .legal-document .witness-section {
        margin-top: 48pt;
        page-break-inside: avoid;
        break-inside: avoid;
      }
    `;

    // Create container for PDF generation
    const tempDiv = document.createElement("div");
    tempDiv.style.position = "absolute";
    tempDiv.style.left = "-9999px";
    tempDiv.style.top = "0";
    tempDiv.appendChild(styleElement);
    tempDiv.appendChild(tempContainer);
    document.body.appendChild(tempDiv);

    // Configure PDF options
    const opt = {
      margin: 0,
      filename: "document.pdf",
      image: { type: "jpeg", quality: 0.98 },
      html2canvas: {
        scale: 2,
        useCORS: true,
        letterRendering: true,
        scrollY: 0,
        windowWidth: tempContainer.scrollWidth,
        windowHeight: tempContainer.scrollHeight,
        removeContainer: true,
        onclone: function (clonedDoc) {
          const content = clonedDoc.querySelector(".legal-document");
          if (content) {
            // Process all text nodes to prevent word breaks
            const walk = document.createTreeWalker(
              content,
              NodeFilter.SHOW_TEXT,
              null,
              false
            );
            let node;
            while ((node = walk.nextNode())) {
              if (node.parentElement.tagName !== "PRE") {
                // Replace hyphenation opportunities with non-breaking spaces
                node.textContent = node.textContent.replace(
                  /\u00AD/g,
                  "\u00A0"
                );
              }
            }

            // Add proper spacing
            content.style.marginTop = "48pt";
            content.style.marginBottom = "48pt";

            // Remove empty pages
            const pages = content.querySelectorAll(".page");
            pages.forEach((page) => {
              if (!page.textContent.trim()) {
                page.remove();
              }
            });
          }
        },
      },
      jsPDF: {
        unit: "pt",
        format: "letter",
        orientation: "portrait",
        compress: true,
        precision: 16,
        hotfixes: ["px_scaling"],
      },
      pagebreak: {
        mode: ["avoid-all", "css", "legacy"],
        before: ".page-break-before",
        after: ".page-break-after",
        avoid: ["h2", "h3", ".signature-block", ".witness-section"],
      },
    };

    try {
      // Generate PDF
      const pdfBlob = await html2pdf()
        .from(tempContainer)
        .set(opt)
        .outputPdf("blob");

      // Clean up
      document.body.removeChild(tempDiv);

      return pdfBlob;
    } catch (error) {
      console.error("PDF Generation Error:", error);
      document.body.removeChild(tempDiv);
      throw new Error(`Failed to generate PDF: ${error.message}`);
    }
  } catch (error) {
    console.error("PDF Processing Error:", error);
    throw new Error(`Failed to process PDF content: ${error.message}`);
  }
};

// Helper function to generate PDF for preview
export const generatePreviewPDF = async (content, placeholderValues) => {
  return generatePDF(content, placeholderValues);
};

// Helper function to generate PDF for SignWell
export const generateSignwellPDF = async (content, placeholderValues) => {
  return generatePDF(content, placeholderValues);
};



================================================================================

File: src/components/PDFPreview.js (starts at line 7491)

"use client";

import { useEffect, useState, useRef } from "react";
import { marked } from "marked";
import { Button } from "@/components/ui/button";
import {
  Download,
  Printer,
  ChevronLeft,
  ChevronRight,
  ChevronsUp,
  ChevronsDown,
} from "lucide-react";
import html2pdf from "html2pdf.js";

export default function PDFPreview({ content, placeholderValues, signers }) {
  const [processedContent, setProcessedContent] = useState("");
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const previewRef = useRef(null);

  useEffect(() => {
    if (!content || !placeholderValues) return;

    let processedText = content;

    // Ensure placeholderValues is an array and create the map
    const placeholderMap = Array.isArray(placeholderValues)
      ? placeholderValues.reduce((acc, item) => {
          if (item && item.name) {
            acc[item.name] = item;
          }
          return acc;
        }, {})
      : {};

    console.log("placeholderValues:", placeholderValues); // Debug log
    console.log("placeholderMap:", placeholderMap); // Debug log

    // Replace placeholders with their values
    const regex = /\{\{([^}]+)\}\}/g;
    processedText = processedText.replace(regex, (match, placeholderName) => {
      const placeholder = placeholderMap[placeholderName];
      if (placeholder && placeholder.value) {
        return placeholder.value;
      }
      return match;
    });

    // Configure marked options
    marked.setOptions({
      breaks: true,
      gfm: true,
      headerIds: true,
      smartLists: true,
    });

    setProcessedContent(marked(processedText));
  }, [content, placeholderValues]);

  // Calculate total pages based on content height
  useEffect(() => {
    if (previewRef.current) {
      const contentHeight = previewRef.current.scrollHeight;
      const pageHeight = previewRef.current.clientHeight;
      setTotalPages(Math.ceil(contentHeight / pageHeight));
    }
  }, [processedContent]);

  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
      if (previewRef.current) {
        const pageHeight = previewRef.current.clientHeight;
        previewRef.current.scrollTop = (newPage - 1) * pageHeight;
      }
    }
  };

  const handleScroll = (direction) => {
    if (previewRef.current) {
      const scrollAmount = direction === "up" ? -100 : 100;
      previewRef.current.scrollBy({ top: scrollAmount, behavior: "smooth" });
    }
  };

  const handlePrint = () => {
    const element = document.querySelector(".preview-content");
    if (!element) return;

    // Clone the element to manipulate it without affecting the display
    const clonedElement = element.cloneNode(true);
    const printFrame = document.createElement("iframe");
    printFrame.style.position = "absolute";
    printFrame.style.left = "-9999px";
    document.body.appendChild(printFrame);

    const printDocument = printFrame.contentDocument;
    printDocument.write(`
      <html>
        <head>
          <title>Print Document</title>
          <style>
            @page {
              margin: 20mm; /* Match the PDF margin setting */
            }
            body { 
              margin: 0;
              font-family: "Times New Roman", serif;
            }
            .preview-content {
              font-family: "Times New Roman", serif;
              line-height: 1.8;
              color: #1a1a1a;
              padding: 0 40px;
            }
            /* Copy any other styles from your PDF that make it look good */
          </style>
        </head>
        <body>
          <div class="preview-content">
            ${clonedElement.innerHTML}
          </div>
        </body>
      </html>
    `);
    printDocument.close();

    printFrame.onload = () => {
      try {
        printFrame.contentWindow.focus();
        printFrame.contentWindow.print();
      } catch (error) {
        console.error("Print failed:", error);
      } finally {
        setTimeout(() => {
          document.body.removeChild(printFrame);
        }, 500);
      }
    };
  };

  const handleDownload = async () => {
    const element = document.querySelector(".preview-content");
    if (!element) return;

    setIsGeneratingPDF(true);
    try {
      // Clone the element to manipulate it without affecting the display
      const clonedElement = element.cloneNode(true);

      // Create a temporary container
      const tempDiv = document.createElement("div");
      tempDiv.style.position = "absolute";
      tempDiv.style.left = "-9999px";
      tempDiv.style.width = "210mm"; // A4 width
      tempDiv.style.minHeight = "297mm"; // A4 height
      tempDiv.style.visibility = "hidden";
      document.body.appendChild(tempDiv);

      // Add the same HTML structure and styling as print, including signature styles
      tempDiv.innerHTML = `
        <div style="
          margin: 0;
          font-family: 'Times New Roman', serif;
          width: 100%;
        ">
          <div class="preview-content" style="
            font-family: 'Times New Roman', serif;
            line-height: 1.8;
            color: #1a1a1a;
            padding: 0 40px;
            width: 100%;
            position: relative;
          ">
            ${clonedElement.innerHTML}
          </div>
        </div>
      `;

      // Add signature page styles
      const styleElement = document.createElement("style");
      styleElement.textContent = `
        .signature-page {
          padding-top: 40px;
          border-top: 1px solid #eee;
          page-break-before: always;
        }
        .signature-block {
          margin-bottom: 2em;
        }
        .signature-block .border-b {
          border-bottom: 1px solid black;
          display: block;
          width: 240px;
          height: 32px;
          margin-bottom: 8px;
        }
      `;
      tempDiv.appendChild(styleElement);

      // Force layout calculation
      await new Promise((resolve) => setTimeout(resolve, 100));

      const contentHeight = tempDiv.scrollHeight;
      const a4Height = 297; // height in mm
      const a4HeightPx = a4Height * 3.78; // rough px to mm conversion
      const totalPages = Math.ceil(contentHeight / a4HeightPx);

      const opt = {
        margin: 20,
        filename: "document.pdf",
        image: { type: "jpeg", quality: 0.98 },
        html2canvas: {
          scale: 2,
          scrollY: 0,
          height: contentHeight,
          windowHeight: contentHeight,
          useCORS: true,
          logging: true,
          onclone: (element) => {
            // Ensure all content is visible in the cloned element
            const content = element.querySelector(".preview-content");
            if (content) {
              content.style.height = "auto";
              content.style.overflow = "visible";
              content.style.position = "relative";
            }

            // Ensure signature page styling is preserved
            const signaturePage = element.querySelector(".signature-page");
            if (signaturePage) {
              signaturePage.style.pageBreakBefore = "always";
              signaturePage.style.paddingTop = "40px";
              signaturePage.style.borderTop = "1px solid #eee";
            }
          },
        },
        jsPDF: {
          unit: "mm",
          format: "a4",
          orientation: "portrait",
          compress: true,
          putTotalPages: true,
        },
      };

      try {
        await html2pdf()
          .set(opt)
          .from(tempDiv.firstElementChild)
          .toPdf()
          .get("pdf")
          .then((pdf) => {
            pdf.setProperties({
              title: "Document",
              subject: "Document",
              creator: "Your App",
              author: "Your App",
              keywords: "document, pdf",
              producer: "html2pdf.js",
            });
            return pdf;
          })
          .save();
      } finally {
        document.body.removeChild(tempDiv);
      }
    } catch (error) {
      console.error("Error generating PDF:", error);
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <div className="pdf-preview h-full overflow-hidden bg-gray-100 p-4 flex flex-col">
      {/* Controls at the top */}
      <div className="max-w-4xl mx-auto mb-4 flex justify-between items-center w-full print:hidden">
        {/* Left side: Page controls */}
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
          >
            <ChevronLeft size={16} />
          </Button>
          <span className="text-sm">
            Page {currentPage} of {totalPages}
          </span>
          <Button
            variant="outline"
            size="sm"
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            <ChevronRight size={16} />
          </Button>
        </div>

        {/* Right side: Download and Print buttons */}
        <div className="flex gap-2">
          {/* Temporarily hidden download button
          <Button
            variant="outline"
            size="sm"
            onClick={handleDownload}
            disabled={isGeneratingPDF}
            className="flex items-center gap-2"
          >
            <Download size={16} />
            {isGeneratingPDF ? "Generating PDF..." : "Download PDF"}
          </Button>
          */}
          <Button
            variant="outline"
            size="sm"
            onClick={handlePrint}
            className="flex items-center gap-2"
          >
            <Printer size={16} />
            Print
          </Button>
        </div>
      </div>

      {/* Document container with scroll controls */}
      <div className="relative flex-1 max-w-4xl mx-auto w-full">
        {/* Scroll controls - Updated positioning and z-index */}
        <div className="absolute right-[-40px] top-1/2 transform -translate-y-1/2 flex flex-col gap-2 z-10 print:hidden">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleScroll("up")}
            className="p-1 bg-white hover:bg-gray-100"
          >
            <ChevronsUp size={16} />
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleScroll("down")}
            className="p-1 bg-white hover:bg-gray-100"
          >
            <ChevronsDown size={16} />
          </Button>
        </div>

        {/* Content */}
        <div
          ref={previewRef}
          className="preview-content bg-white p-8 shadow-lg h-full overflow-auto relative"
        >
          <div dangerouslySetInnerHTML={{ __html: processedContent }} />

          {/* Dynamic Signature Page */}
          <div className="signature-page mt-8 page-break-before">
            <h2 className="text-center mb-6">Signatures</h2>
            <div className="flex flex-col gap-8">
              {signers &&
                signers.map((signer, index) => (
                  <div key={index} className="signature-block">
                    <div className="border-b border-black w-64 h-8 mb-2"></div>
                    <p className="text-sm font-semibold">{signer.value}</p>
                    <p className="text-sm text-gray-600 mb-1">
                      {signer.description || "Signer"}
                    </p>
                    <p className="text-sm mt-1">Date: _____________________</p>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </div>

      <style jsx global>{`
        .preview-content {
          font-family: "Times New Roman", serif;
          line-height: 1.8;
          color: #1a1a1a;
          padding: 40px;
          scroll-behavior: smooth;
          position: relative;
          height: calc(100vh - 150px);
          margin-right: 40px;
        }

        .preview-content h1 {
          font-size: 24px;
          font-weight: bold;
          text-align: center;
          margin-bottom: 32px;
          text-transform: uppercase;
        }

        .preview-content h2 {
          font-size: 18px;
          font-weight: bold;
          margin-top: 24px;
          margin-bottom: 16px;
        }

        .preview-content p {
          margin-bottom: 16px;
          text-align: justify;
          font-size: 12pt;
        }

        /* Hide scrollbar but keep functionality */
        .preview-content::-webkit-scrollbar {
          width: 0px;
        }

        @media print {
          .preview-content {
            height: auto;
            overflow: visible;
          }
        }

        .signature-page {
          padding-top: 40px;
          border-top: 1px solid #eee;
        }

        .page-break-before {
          page-break-before: always;
        }

        @media print {
          .signature-page {
            break-before: page;
          }
        }
      `}</style>
    </div>
  );
}



================================================================================

File: src/components/Sidebar.js (starts at line 7933)

import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Calendar } from "@/components/ui/calendar";
import { Button } from "@/components/ui/button";
import { CalendarIcon } from "lucide-react";
import { format as dateFormat } from "date-fns";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { useState } from "react";

export default function Sidebar({ documentValues, onValueChange }) {
  const [openCalendars, setOpenCalendars] = useState({});

  const hasValues = documentValues && Object.keys(documentValues).length > 0;

  if (!hasValues) {
    return (
      <div className="w-80 border-l p-4">
        <p className="text-sm text-muted-foreground text-center">
          No document fields available
        </p>
      </div>
    );
  }

  const renderInput = (name, field) => {
    const format = field.format || { type: "text" };

    switch (format.type) {
      case "date":
        return (
          <Popover
            open={openCalendars[name]}
            onOpenChange={(open) =>
              setOpenCalendars((prev) => ({
                ...prev,
                [name]: open,
              }))
            }
          >
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className={cn(
                  "w-full justify-start text-left font-normal",
                  !field.value && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {field.value
                  ? dateFormat(new Date(field.value), "MM-dd-yyyy")
                  : "Pick a date"}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={field.value ? new Date(field.value) : undefined}
                onSelect={(date) => {
                  const formattedDate = date
                    ? dateFormat(date, "MM-dd-yyyy")
                    : "";
                  onValueChange(name, formattedDate);
                  setOpenCalendars((prev) => ({
                    ...prev,
                    [name]: false,
                  }));
                }}
                initialFocus
              />
            </PopoverContent>
          </Popover>
        );

      case "number":
        return (
          <Input
            id={name}
            type="number"
            value={field.value || ""}
            onChange={(e) => {
              const value = e.target.value;
              if (format.pattern) {
                const regex = new RegExp(format.pattern);
                if (value === "" || regex.test(value)) {
                  onValueChange(name, value);
                }
              } else {
                onValueChange(name, value);
              }
            }}
            placeholder={`Enter ${name.toLowerCase().replace(/_/g, " ")}`}
            className="bg-background"
          />
        );

      default:
        return (
          <Input
            id={name}
            type={format.type === "email" ? "email" : "text"}
            value={field.value || ""}
            onChange={(e) => onValueChange(name, e.target.value)}
            placeholder={`Enter ${name.toLowerCase().replace(/_/g, " ")}`}
            className="bg-background"
          />
        );
    }
  };

  const getFormatHint = (format) => {
    if (!format) return null;

    switch (format.type) {
      case "date":
        return "Select a date from the calendar (MM-DD-YYYY)";
      case "number":
        return format.pattern
          ? `Must match pattern: ${format.pattern}`
          : "Enter a number";
      case "email":
        return "Enter a valid email address";
      case "phone":
        return "Enter a phone number";
      default:
        return null;
    }
  };

  return (
    <div className="w-80 border-l bg-muted/10">
      <div className="p-4 border-b">
        <h2 className="font-semibold">Document Fields</h2>
        <p className="text-sm text-muted-foreground">
          Fill in the values for the placeholders in your document
        </p>
      </div>

      <ScrollArea className="h-[calc(100vh-10rem)]">
        <div className="p-4 space-y-6">
          {Object.entries(documentValues).map(([name, field]) => (
            <div key={name} className="space-y-2">
              <Label htmlFor={name} className="text-sm font-medium">
                {name
                  .replace(/_/g, " ")
                  .split(" ")
                  .map(
                    (word) =>
                      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                  )
                  .join(" ")}
              </Label>

              {renderInput(name, field)}

              {field.description && (
                <p className="text-xs text-muted-foreground">
                  {field.description}
                </p>
              )}

              {field.format && getFormatHint(field.format) && (
                <p className="text-xs text-blue-500">
                  {getFormatHint(field.format)}
                </p>
              )}

              {field.signer && (
                <p className="text-xs text-amber-500">
                  This field represents a signing party
                </p>
              )}
            </div>
          ))}
        </div>
      </ScrollArea>

      <div className="p-4 border-t bg-muted/30">
        <p className="text-xs text-muted-foreground">
          Changes are automatically saved and updated in the document
        </p>
      </div>
    </div>
  );
}



================================================================================

File: src/components/SuggestionPopup.js (starts at line 8124)

"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";

export default function SuggestionPopup({ position, onSubmit, onClose }) {
  const [prompt, setPrompt] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await onSubmit(prompt, true);
    } finally {
      setIsLoading(false);
      setPrompt("");
    }
  };

  return (
    <div
      className="absolute z-50 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 w-80"
      style={{
        top: `${position.top}px`,
        left: `${position.left}px`,
      }}
    >
      <form onSubmit={handleSubmit}>
        <textarea
          className="w-full p-2 border rounded-md mb-2 dark:bg-gray-700"
          placeholder="How would you like to improve this section?"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          rows={3}
        />
        <div className="flex justify-end space-x-2">
          <Button variant="outline" type="button" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit" disabled={!prompt.trim() || isLoading}>
            {isLoading ? (
              <span className="flex items-center gap-2">
                <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="none"
                  />
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
                Loading...
              </span>
            ) : (
              "Submit"
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}



================================================================================

File: src/components/ui/alert.jsx (starts at line 8195)

import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================================================

File: src/components/ui/badge.jsx (starts at line 8243)

import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }



================================================================================

File: src/components/ui/button.jsx (starts at line 8278)

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }



================================================================================

File: src/components/ui/calendar.jsx (starts at line 8326)

"use client";

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" {...props} />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" {...props} />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================================================

File: src/components/ui/card.jsx (starts at line 8390)

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================================================

File: src/components/ui/command.jsx (starts at line 8441)

"use client";
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props} />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  ...props
}) => {
  return (
    (<Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command
          className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>)
  );
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props} />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props} />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props} />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props} />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />)
  );
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================================================

File: src/components/ui/dialog.jsx (starts at line 8559)

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================================================

File: src/components/ui/dialog.tsx (starts at line 8656)

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================================================

File: src/components/ui/dropdown-menu.jsx (starts at line 8779)

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />)
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



================================================================================

File: src/components/ui/input.jsx (starts at line 8937)

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }



================================================================================

File: src/components/ui/label.jsx (starts at line 8957)

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================================================

File: src/components/ui/popover.jsx (starts at line 8976)

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



================================================================================

File: src/components/ui/radio-group.jsx (starts at line 9004)

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>)
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================================================

File: src/components/ui/scroll-area.jsx (starts at line 9036)

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================================================

File: src/components/ui/section.jsx (starts at line 9077)

export default function Section({
  id,
  title,
  subtitle,
  description,
  children,
  className,
}) {
  const sectionId = title ? title.toLowerCase().replace(/\s+/g, "-") : id;
  return (
    <section id={id || sectionId}>
      <div className={className}>
        <div className="relative container mx-auto px-4 py-16 max-w-7xl">
          <div className="text-center space-y-4 pb-6 mx-auto">
            {title && (
              <h2 className="text-sm text-primary font-mono font-medium tracking-wider uppercase">
                {title}
              </h2>
            )}
            {subtitle && (
              <h3 className="mx-auto mt-4 max-w-xs text-3xl font-semibold sm:max-w-none sm:text-4xl md:text-5xl">
                {subtitle}
              </h3>
            )}
            {description && (
              <p className="mt-6 text-lg leading-8 text-slate-600 max-w-2xl mx-auto">
                {description}
              </p>
            )}
          </div>
          {children}
        </div>
      </div>
    </section>
  );
}

  


================================================================================

File: src/components/ui/select.jsx (starts at line 9115)

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================================================

File: src/components/ui/separator.jsx (starts at line 9238)

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



================================================================================

File: src/components/ui/sheet.jsx (starts at line 9264)

"use client";
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      {children}
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================================================

File: src/components/ui/slider.css (starts at line 9374)

.slider {
  --slider-color: #0700c7;
}

/* Add these styles to customize the slider track and thumb */
.slider [data-slider-thumb] {
  background-color: var(--slider-color);
  border-color: var(--slider-color);
}

.slider [data-slider-track][data-orientation="horizontal"] {
  background-color: var(--slider-color);
}



================================================================================

File: src/components/ui/slider.jsx (starts at line 9388)

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"
import { cn } from "@/lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full" style={{ backgroundColor: "#0700c7" }} />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-[#0700c7] bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



================================================================================

File: src/components/ui/switch.jsx (starts at line 9408)

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}>
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )} />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================================================

File: src/components/ui/table.jsx (starts at line 9433)

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================================================

File: src/components/ui/textarea.jsx (starts at line 9517)

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Textarea.displayName = "Textarea"

export { Textarea }



================================================================================

File: src/components/ui/toast.jsx (starts at line 9536)

"use client";
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props} />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return (
    (<ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props} />)
  );
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props} />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}>
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

export { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };



================================================================================

File: src/components/ui/toaster.jsx (starts at line 9620)

"use client"

import { useToast } from "@/components/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    (<ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          (<Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>)
        );
      })}
      <ToastViewport />
    </ToastProvider>)
  );
}



================================================================================

File: src/data/industries.js (starts at line 9656)

export const industries = [
  "Agriculture",
  "Construction",
  "Education",
  "Financial Services",
  "Healthcare",
  "Information Technology",
  "Manufacturing",
  "Real Estate",
  "Retail",
  "Transportation",
  // Add more industries as needed
];



================================================================================

File: src/hooks/use-toast.js (starts at line 9670)

"use client";
// Inspired by react-hot-toast library
import * as React from "react"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST"
}

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString();
}

const toastTimeouts = new Map()

const addToRemoveQueue = (toastId) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state, action) => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
}

const listeners = []

let memoryState = { toasts: [] }

function dispatch(action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

function toast({
  ...props
}) {
  const id = genId()

  const update = (props) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    };
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast }



================================================================================

File: src/lib/supabase.js (starts at line 9826)

import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);



================================================================================

File: src/lib/utils.js (starts at line 9833)

import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}



================================================================================

File: src/lib/utils.ts (starts at line 9840)

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================================================

File: src/lib/extensions/placeholder.js (starts at line 9847)

import { Extension } from "@tiptap/core";
import { Plugin, PluginKey } from "@tiptap/pm/state";
import { Decoration, DecorationSet } from "@tiptap/pm/view";

export const PlaceholderHighlight = Extension.create({
  name: "placeholderHighlight",

  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("placeholderHighlight"),
        props: {
          decorations: (state) => {
            const { doc } = state;
            const decorations = [];

            doc.descendants((node, pos) => {
              if (node.isText) {
                // Match {{PLACEHOLDER_NAME}} format
                const regex = /\{\{([^}]+)\}\}/g;
                let match;

                while ((match = regex.exec(node.text)) !== null) {
                  const start = pos + match.index;
                  const end = start + match[0].length;

                  decorations.push(
                    Decoration.inline(start, end, {
                      class: "placeholder-text",
                    })
                  );
                }
              }
            });

            return DecorationSet.create(doc, decorations);
          },
        },
      }),
    ];
  },
});



================================================================================

File: src/lib/hooks/use-window-size.js (starts at line 9890)

"use client";

import { useState, useEffect } from "react";

export default function useWindowSize() {
  const [windowSize, setWindowSize] = useState({
    width: undefined,
    height: undefined,
    isDesktop: false,
  });

  useEffect(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
        isDesktop: window.innerWidth >= 768, // Matches your md breakpoint
      });
    }

    // Add event listener
    window.addEventListener("resize", handleResize);

    // Call handler right away so state gets updated with initial window size
    handleResize();

    // Remove event listener on cleanup
    return () => window.removeEventListener("resize", handleResize);
  }, []); // Empty array ensures that effect is only run on mount

  return windowSize;
}



================================================================================

File: src/styles/editor.css (starts at line 9923)

/* Base Editor Styles */
.ProseMirror {
  > * + * {
    margin-top: 0.75em;
  }
  
  outline: none;
  min-height: calc(100vh - 10rem);
}

/* Placeholder Styles */
.ProseMirror p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}

/* Dynamic Field Styles */
.placeholder-text {
  background-color: #e8f0fe;
  border-radius: 4px;
  padding: 2px 6px;
  margin: 0 1px;
  border: 1px solid #4285f4;
  color: #1967d2;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: 0.875em;
  position: relative;
  display: inline-block;
}

/* Dark mode styles */
.dark .placeholder-text {
  background-color: #1a365d;
  border-color: #4299e1;
  color: #63b3ed;
}

/* Syntax Highlighting */
pre {
  background: #0d1117;
  padding: 1rem;
  border-radius: 0.5rem;
}

code {
  color: #c9d1d9;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

/* General editor styles */
.editor-toolbar {
  border-bottom: 1px solid #e5e7eb;
  background-color: #ffffff;
  padding: 0.5rem;
}

.dark .editor-toolbar {
  border-bottom-color: #374151;
  background-color: #111827;
}


================================================================================

File: src/utils/rateLimiter.js (starts at line 9986)

import { Ratelimit } from "@upstash/ratelimit";
import { Redis } from "@upstash/redis";
import { createClient } from "@supabase/supabase-js";

// Initialize Redis
const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

// Initialize Supabase with service role key
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Create limiters
const globalLimiter = new Ratelimit({
  redis,
  limiter: Ratelimit.slidingWindow(10000, "1 d"), // 100000 requests per day globally
  prefix: "ratelimit:global",
});

const userLimiter = new Ratelimit({
  redis,
  limiter: Ratelimit.slidingWindow(10, "1 h"), // 10 requests per hour per user
  prefix: "ratelimit:user",
});

export async function checkRateLimit(userId) {
  try {
    // Check global rate limit
    const globalLimit = await globalLimiter.limit("global");
    if (!globalLimit.success) {
      const resetInSeconds = Math.max(
        0,
        Math.floor((globalLimit.reset - Date.now()) / 1000)
      );
      return {
        success: false,
        error: "Global rate limit exceeded",
        resetIn: resetInSeconds, // Convert to seconds from now
        limit: 100,
        period: "day",
      };
    }

    // Check user-specific rate limit
    const userLimit = await userLimiter.limit(userId);
    if (!userLimit.success) {
      const resetInSeconds = Math.max(
        0,
        Math.floor((userLimit.reset - Date.now()) / 1000)
      );
      return {
        success: false,
        error: "User rate limit exceeded",
        resetIn: resetInSeconds, // Convert to seconds from now
        limit: 3,
        period: "hour",
      };
    }

    return {
      success: true,
      remaining: {
        user: userLimit.remaining,
        global: globalLimit.remaining,
      },
    };
  } catch (error) {
    console.error("Rate limit check error:", error);
    return {
      success: false,
      error: "Rate limit check failed",
      resetIn: 3600,
    };
  }
}

export async function trackAPIUsage({
  userId,
  endpoint,
  tokensUsed,
  cost,
  registrationId,
}) {
  try {
    // Get the registration ID if not provided
    if (!registrationId && userId) {
      const { data: registration } = await supabase
        .from("registrations")
        .select("id")
        .eq("user_id", userId)
        .single();

      registrationId = registration?.id;
    }

    const { error } = await supabase.from("api_usage").insert([
      {
        id: crypto.randomUUID(),
        user_id: userId,
        registration_id: registrationId, // Link to registration
        endpoint,
        tokens_used: tokensUsed,
        cost,
        request_status: "completed",
        timestamp: new Date().toISOString(), // Using timestamp instead of created_at per schema
      },
    ]);

    if (error) {
      console.error("Insert error:", error);
      throw error;
    }
  } catch (error) {
    console.error("Failed to track API usage:", error);
  }
}



================================================================================